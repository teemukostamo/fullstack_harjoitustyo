{"version":3,"sources":["img/logo.png","components/layout/ModalNotification.js","actions/types.js","services/users.js","actions/userActions.js","services/login.js","services/artists.js","services/albums.js","services/programs.js","services/reports.js","services/search.js","services/tracks.js","reducers/notificationReducer.js","components/user/LoggedInUserInfo.js","actions/loginActions.js","components/report/CurrentReport.js","components/layout/Navbar.js","components/layout/Footer.js","components/layout/Togglable.js","actions/reportActions.js","components/report/CreateNewReportForm.js","actions/reportsListActions.js","components/report/InProgressReportListItem.js","components/report/InProgressReportsList.js","components/layout/Home.js","components/user/AddUserModal.js","components/user/EditUserModal.js","components/user/UserListItem.js","components/user/UserList.js","components/report/ReportFilterForm.js","components/report/FilterReportList.js","components/report/ReportListItem.js","components/report/ReportList.js","actions/programActions.js","components/program/EditProgramModal.js","components/program/MergePrograms.js","components/program/ProgramListItem.js","components/program/AddProgramModal.js","components/layout/Notification.js","components/program/ProgramList.js","actions/albumActions.js","components/artist/MergeAlbumsModal.js","components/artist/AlbumsByArtistItem.js","components/artist/AlbumsByArtist.js","components/artist/ArtistDetailsForm.js","actions/artistActions.js","components/artist/ArtistDetails.js","hooks/changeArtistOptionsHook.js","components/album/ChangeArtistModal.js","components/album/AlbumDetailsForm.js","actions/trackActions.js","components/album/MergeAlbumTracksModal.js","components/album/TracksInAnAlbumItem.js","components/album/TracksInAnAlbum.js","components/album/AlbumDetails.js","components/track/ChangeAlbumModal.js","hooks/changeAlbumOptionsHook.js","components/track/ChangeArtistModal.js","components/track/TrackDetailsForm.js","components/track/PlayHistoryItem.js","components/track/PlayHistory.js","components/track/TrackDetails.js","components/login/LoginForm.js","components/report/ReportTransferOptions.js","actions/reportTransferActions.js","components/report/ReportTransferListItem.js","components/report/ReportTransferList.js","actions/searchActions.js","components/search/AddTrackBtn.js","components/search/SearchForm.js","components/search/MergeArtists.js","components/search/MergeAlbums.js","components/search/MergeTracks.js","components/track/AddToCurrentReport.js","components/search/SearchResultItem.js","components/search/SortResults.js","components/search/SearchResults.js","components/search/Search.js","components/top100/Top100SearchForm.js","components/top100/Top100List.js","components/track/EditTrackModal.js","components/report/ReportWithTracksItem.js","components/track/AddTrackModal.js","components/track/SearchTrack.js","hooks/searchTracksHook.js","components/track/GetDjOnlineTracks.js","components/report/ReportDetails.js","components/report/ReportWithTracks.js","App.js","reducers/artistReducer.js","reducers/albumReducer.js","reducers/trackReducer.js","reducers/loginReducer.js","reducers/reportReducer.js","reducers/userReducer.js","reducers/reportsListReducer.js","reducers/programReducer.js","reducers/searchReducer.js","store.js","index.js"],"names":["module","exports","connectedModalNotification","connect","state","notification","message","type","style","color","SET_LOADING","token","getAll","a","config","headers","Authorization","axios","get","req","data","setToken","newToken","createUser","userToAdd","post","request","updateUser","userToUpdate","put","id","response","deleteUser","delete","dispatch","userService","users","console","log","login","credentials","res","getOneArtist","getAlbumsByArtist","updateArtist","artistToUpdate","getOneAlbum","getTracklistOfAlbum","updateAlbum","albumToUpdate","changeArtistId","getAllActive","getOne","createProgram","newProgram","updateProgram","updatedProgram","mergePrograms","mergeParams","download","require","getAllByDate","date","getAllByDateByUser","user","getAllInProgress","getAllTransfers","addTrackToReport","trackToAdd","deleteTrackFromReport","deleteReport","updateSortableRank","remainingTracks","forEach","track","index","trackToUpdate","sortable_rank","report_track_id","getReportDetails","createReport","newReport","updateReport","updatedReport","generateReportDownload","params","responseType","downloadReport","filename","getTracksForSearch","query","getCatIdFromDiscogs","artist","album","process","getTop100","list","start_date","end_date","advancedSearch","searchParams","kind","merge","changeArtistOptions","changeAlbumOptions","checkDjonlineTracks","studioId","tracks","arr","Object","entries","value","push","reverse","newArr","hours","charAt","parseInt","length","split","seconds","startTime","endTime","album_name","artist_name","cat_id","matrix","disc_no","side","track_no","tracknumber","isrc","record_country","recording_country","country","play_time","djonline_id","label","track_title","song","year","report_id","newerArr","sortable_rank_start","returnArr","addNewTrack","addTrackToDb","updateTrack","updateAlbumId","updateArtistId","getOneTrack","getOneTrackHistory","initialState","setNotification","content","setTimeout","notificationReducer","action","connectedLoggedInUserModal","setNotificationConnect","updateUserConnect","updateCurrentUserConnect","error","useState","modalOpen","setModalOpen","password","setPassword","confirmPassword","setConfirmPassword","first_name","firstName","setFirstName","last_name","lastName","setLastName","email","setEmail","handleClose","Modal","trigger","role","tabIndex","onClick","closeIcon","open","onClose","Header","Content","Form","onSubmit","Field","control","Input","focus","placeholder","onChange","e","target","Fragment","defaultValue","Button","disabled","connectedCurrentReport","report","reportDetails","display","float","marginTop","marginRight","marginBottom","to","program_name","moment","program_date","format","program_start_time","slice","program_end_time","connectedNavbar","logoutConnect","window","localStorage","removeItem","Icon","name","size","options","key","text","LoggedInUserInfo","icon","level","Menu","pointing","stackable","inverted","Item","link","Image","alt","src","logo","position","Dropdown","Footer","textAlign","Date","getFullYear","href","rel","Togglable","buttonLabel","children","visible","setVisible","hideWhenVisible","showWhenVisible","toggleVisibility","getOneReport","reportService","connectedCreateNewReportForm","programs","createReportConnect","program_id","new_program_name","user_id","programService","program","newReportWithNewProgram","programId","setProgramId","programNumber","setProgramNumber","dj","setDj","newProgramName","setNewProgramName","programDate","setProgramDate","programStartTime","setProgramStartTime","programEndTime","setProgramEndTime","redirect","setRedirect","programOptions","activePrograms","map","borderRadius","opacity","padding","Grid","Column","Container","Popup","openOnFocus","selection","search","event","preventDefault","Group","widths","DatePicker","locale","fi","selected","dateFormat","program_no","program_dj","status","rerun","getAllReportsByDate","reports","getAllReportsByDateByUser","connectedInProgressReportListItem","deleteInProgressReportConnect","setOpen","Table","Row","Cell","Confirm","onCancel","onConfirm","cancelButton","confirmButton","connectedInProgressReportsList","reportsList","getAllInProgressConnect","useEffect","loading","inProgress","striped","Body","r","connectedHome","Dimmer","active","Loader","divided","columns","connectedAddUserModal","newUser","props","username","setUsername","setLevel","setStatus","floated","required","Checkbox","checked","connectedEditUserModal","mapDispatchToProps","setCurrent","payload","deleteUserConnect","connectedUser","userLevelOutPrint","className","userStatusOutPrint","last_seen","connectedUserList","getAllReportsByDateConnect","getAllReportsByDateByUserConnect","connectedReportFilterForm","reportMonth","setReportMonth","reportYear","setReportYear","dateNow","years","i","yearOptions","option","getReportsByMonth","filterByUserIdConnect","filterByStatusConnect","filterByTextConnect","connectedFilterReportList","userId","setUserId","filterText","setFilterText","userOptions","addAllToUserOptions","getUser","connectedReportListItem","deleteReportConnect","reportStatusOutPrint","Responsive","as","minWidth","connectedReportList","reportListTimeDate","reportListDate","reportsToShow","filterByText","filter","toLowerCase","includes","filterUserValue","filterStatusValue","connectedEditProgramModal","updateProgramConnect","setName","identifier","setIdentifier","setDisplay","site","setSite","connectedMergePrograms","programToMerge","setProgramToMerge","handleOpen","mergeOptions","allPrograms","mergeTo","ProgramListItem","connectedAddProgramModal","createNewProgramConnect","programToAdd","Message","floating","success","header","negative","connectedProgramList","getAllProgramsConnect","mergeAlbumFunction","searchService","albumService","tracklist","connectedMergeAlbumsModal","mergeAlbumsFunctionConnect","album_id","albumToMerge","setAlbumToMerge","albumList","AlbumsByArtistItem","track_count","report_occurrence","AlbumsByArtist","connectedArtistDetailsForm","updateArtistConnect","artistService","updatedArtist","currentArtist","setArtist","spotify_id","spotifyId","setSpotifyId","connectedArtistDetails","getOneArtistConnect","useChangeArtistOptionsHook","inputText","setInputText","debouncedSearchTrack","useConstant","AwesomeDebouncePromise","useAsync","connectedChangeArtistModal","updateArtistIdConnect","currentAlbum","artistToChange","setArtistToChange","results","undefined","result","artist_id","title","description","handleResultSelect","onResultSelect","onSearchChange","onSelectionChange","changedArtist","connectedAlbumDetailsForm","updateAlbumConnect","updatedAlbum","setLabel","catId","setCatId","setYear","cursor","fontSize","trackService","updatedTrack","mergeTrackFunction","mergeAction","history","connectedMergeAlbumTracksModal","track_id","trackToMerge","setTrackToMerge","TracksInAnAlbumItem","TracksInAnAlbum","connectedAlbumDetails","getOneAlbumConnect","connectedChangeAlbumModal","changeAlbumIdConnect","currentTrack","useChangeAlbumOptionsHook","albumToChange","setAlbumToChange","changedAlbum","changeArtistIdConnect","connectedTrackDetailsForm","updateTrackConnect","setAlbum","trackTitle","setTrackTitle","Math","floor","min","setMin","sec","setSec","setCountry","recordCountry","setRecordCountry","people","setPeople","discNo","setDiscNo","trackNo","setTrackNo","setIsrc","comment","setComment","replace","addToReport","trackToSave","maxLength","TextArea","PlayHistoryItem","pgm","PlayHistory","playhistory","connectedTrackDetails","getOneTrackConnect","getOneTrackHistoryConnect","newLogin","loginService","setItem","JSON","stringify","handleLogin","trim","connectedReportTransferOptions","generateReportTransferConnect","transferredReport","pickerDate","setPickerDate","showMonthYearPicker","period","ReportTransferListItem","item","created_at","getAllTransfersConnect","connectedReportTransferList","lastReport","reportTransferList","catno","clearDiscogsCatId","connectedAddTrackBtn","addTrackToDbConnect","addNewTrackConnect","getCatIdFromDiscogsConnect","setTrack","discogsCatId","saveAndAddToReport","connectedSearchForm","advancedSearchConnect","searchString","setSearchString","searchTarget","setSearchTarget","connectedMergeArtists","mergeArtistFunctionConnect","updateArtistStateConnect","artistToMerge","setArtistToMerge","Array","from","Set","advancedResults","find","newName","connectedMergeAlbums","updateAlbumStateConnect","setNotificatonConnect","connectedMergeTracks","mergeTrackFunctionConnect","updateTrackStateConnect","connectedAddToCurrentReport","addTrackToReportConnect","basic","SearchResultItem","connectedSortResult","sortAdvancedResultsConnect","sortBy","setSortBy","connectedSearchResults","resultsToShow","sortAdvancedResults","sort","b","Search","connectedTop100SearchForm","now","startDate","setStartDate","endDate","setEndDate","setList","disabledKeyboardNavigation","connectedTop100List","top100Query","top100","t","count","connectedEditTrackModal","removeCurrentTrack","clearDiscogsCatIdConnect","trackToEdit","connectedReportWithTracksItem","deleteTrackFromReportConnect","checkForDeleteConnect","unCheckForDeleteConnect","setChecked","minutes","toString","marginLeft","connectedAddTrackModal","connectedSearchTrack","getAutocompleteResults","setTrackToSave","useSearchTracksHook","newTrackToReport","connectedGetDjOnlineTracks","getDjonlineTracksConnect","parseISO","setDate","setStudioId","setStartTime","setEndTime","connectedReportDetails","updateReportConnect","copyReportConnect","reportDetailsToCopy","reportTracksToCopy","setRerun","Segment","getRerun","handleCopyReportClick","horizontal","updatedReportDetails","connectedReportWithTracks","getOneReportConnect","getReportDetailsConnect","reportArray","deleteCheckedConnect","idsToDelete","updateSortableRankConnect","newOrder","dragState","setDragState","djonline","array","dragProps","onDragEnd","fromIndex","toIndex","splice","nodeSelector","handleSelector","this","indexOf","checkedForDelete","initializeUserConnect","loggedUserJSON","getItem","parse","err","statusText","initializeProgramsConnect","initializeUsersConnect","exact","path","component","Home","ReportList","ReportTransferList","render","match","ProgramList","Top100List","UserList","artistReducer","albumReducer","trackReducer","loginReducer","editTrackId","reportReducer","current","userReducer","lastTransfer","reportListReducer","programReducer","searchResults","searchReducer","mergeAlbumTo","newAlbumName","filteredAlbums","renamedAlbums","removeMergedAlbums","newAlbumResults","mergeArtistTo","newArtistName","filteredArtists","renamedArtists","removeMergedArtists","newArtistResults","appReducer","combineReducers","reportsListReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,aA2QGqF,SAxQO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC7B4L,EAAMC,iBACNnB,EAAoB1K,IAuQR0B,MAAM,gBAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTjD,YAAY,QACZqG,aAAW,EACXC,WAAS,EACTC,QAAM,EACNvE,QA3QS,CACrB,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,aAqJGqF,SAlJK,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC3B4L,EAAMC,iBACNjB,EAAkB5K,IAiJN0B,MAAM,yBAGV,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACrG,EAAA,EAAD,CACEC,SAAUA,EACVjM,MAAM,QACN8K,QArJkB,WAC9B,IAAMtG,EAAY,CAChByL,QAASnO,EAAMT,GACf0O,WAAYM,EACZL,iBAAkBW,EAClB9D,aAAcD,KAAOiE,GAAa/D,OAAO,cACzCC,mBAAoBgE,EACpB9D,iBAAkBgE,EAClB0B,WAAY/L,SAAS2J,GACrBqC,WAAYnC,EACZoC,OAAQ,EACRC,MAAO,MAGPlM,SAASpC,EAAUyI,mBACnBrG,SAASpC,EAAUuI,oBAEnBzD,EAAuB,wCAAyC,SAEhEwG,EAAoBtL,GACpB4M,GAAY,MA8HJ,kB,oBCpbD2B,GAAsB,SAAA1P,GAAI,8CAAI,WAAM5B,GAAN,eAAArB,EAAA,sEAEvCqB,EAAS,CACP3B,KAAMG,IAERwB,EAAS,CACP3B,KnBQ8B,yBmBdO,SAQjB6P,GAAcvM,aAAaC,GARV,OAQjC2P,EARiC,OAUvCvR,EAAS,CACP3B,KnBPiC,0BmBQjCa,KAAMqS,EACN3P,SAbqC,gDAgBvCzB,QAAQC,IAAR,MAhBuC,yDAAJ,uDAqB1BoR,GAA4B,SAAC5P,EAAME,GAAP,8CAAgB,WAAM9B,GAAN,eAAArB,EAAA,sEAErDqB,EAAS,CACP3B,KAAMG,IAERwB,EAAS,CACP3B,KnBb8B,yBmBOqB,SAQ/B6P,GAAcrM,mBAAmBD,EAAME,GARR,OAQ/CyP,EAR+C,OAUrDvR,EAAS,CACP3B,KnB5BiC,0BmB6BjCa,KAAMqS,EACN3P,SAbmD,gDAgBrDzB,QAAQC,IAAR,MAhBqD,yDAAhB,uDC2D1BqR,GAL2BxT,aANlB,SAAAC,GACtB,MAAO,CACLmC,MAAOnC,EAAMmC,SAIkD,CACjEqR,8BDfoC,SAAAvO,GAAM,8CAAI,WAAMnD,GAAN,eAAArB,EAAA,sEAE5CqB,EAAS,CACP3B,KAAMG,IAHoC,SAKtC0P,GAAc9L,aAAae,EAAOwD,WALI,uBAMtBuH,GAAcnM,iBAAiBoB,EAAOqL,SANhB,OAMtC+C,EANsC,OAO5CvR,EAAS,CACP3B,KnBhE6B,sBmBiE7Ba,KAAMqS,IAToC,kDAY5CpR,QAAQC,IAAR,MAZ4C,0DAAJ,uDCgB1CyH,uBAAwBN,IAFgBtJ,EAhFT,SAAC,GAK3B,IAJLyM,EAII,EAJJA,OACArK,EAGI,EAHJA,MACAqR,EAEI,EAFJA,8BACA7J,EACI,EADJA,uBACI,EACoBI,oBAAS,GAD7B,mBACGsB,EADH,KACSoI,EADT,KAoBJ,OACE,kBAAC,IAAMtH,SAAP,KACE,kBAACuH,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,kBAAaP,EAAO9K,KAAO8K,EAAOqB,OAE5C,kBAAC6F,GAAA,EAAME,KAAP,KACG3G,KAAOT,EAAOU,cAAcC,OAAO,eAEtC,kBAACuG,GAAA,EAAME,KAAP,KAAapH,EAAOwG,YACpB,kBAACU,GAAA,EAAME,KAAP,KACG,IACD,kBAAChG,EAAA,EAAD,CAAMvN,MAAM,MAAM8K,QAAS,kBAAMsI,GAAQ,IAAO5F,KAAK,WACrD,kBAACgG,GAAA,EAAD,CACEvK,QAAO,6CAAwCkD,EAAOqB,KAA/C,YAAuDrB,EAAOU,cACrE7B,KAAMA,EACNyI,SAjCW,WACnBL,GAAQ,IAiCAM,UA9BY,WACpBN,GAAQ,GACR,IAAMxO,EAAS,CACbwD,UAAW+D,EAAO9K,GAClB4O,QAASnO,EAAMT,IAEjB8R,EAA8BvO,GAC9B0E,EAAuB,GAAD,OACjB6C,EAAOqB,KADU,YACFrB,EAAOU,aADL,eAEpB,YAsBM8G,aAAa,sBACbC,cAAc,kBC+CXC,GAJwBnU,aAPf,SAAAC,GACtB,MAAO,CACLmU,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,SAI+C,CAC9DiS,wBFzC8B,SAAA1S,GAAE,8CAAI,WAAMI,GAAN,eAAArB,EAAA,sEAElCqB,EAAS,CACP3B,KAAMG,IAERwB,EAAS,CACP3B,KnBlC8B,yBmB4BE,SAQZ6P,GAAcnM,iBAAiBnC,GARnB,OAQ5B2R,EAR4B,OAUlCvR,EAAS,CACP3B,KnBhD6B,sBmBiD7Ba,KAAMqS,IAZ0B,gDAelCpR,QAAQC,IAAR,MAfkC,yDAAJ,wDEwCKnC,EAzFT,SAAC,GAIxB,IAHLoU,EAGI,EAHJA,YACAhS,EAEI,EAFJA,MACAiS,EACI,EADJA,wBAOA,OALAC,qBAAU,WACRD,EAAwBjS,EAAMT,MAE7B,KAEyB,IAAxByS,EAAYG,QAEZ,6BACE,8DACA,6CAKyB,OAA3BH,EAAYI,WACP,KAE6B,IAAlCJ,EAAYI,WAAWrN,OAEvB,kBAAC8K,GAAA,EAAKC,OAAN,KACE,kBAACC,EAAA,EAAD,KACE,8DADF,sCAQJ,kBAAC,IAAM/F,SAAP,KACE,kBAAC6F,GAAA,EAAKC,OAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC3G,EAAA,EAAD,uCACA,kBAACmI,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,gBACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,YACA,kBAACF,GAAA,EAAME,KAAP,QAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGN,EAAYI,WAAW3C,KAAI,SAAA8C,GAAC,OAC3B,kBAAC,GAAD,CAA0B1G,IAAK0G,EAAEhT,GAAI8K,OAAQkI,eCC9CC,GAFO5U,aANE,SAAAC,GACtB,MAAO,CACLkQ,SAAUlQ,EAAMkQ,YAI2B,KAAzBnQ,EA/CT,SAAC,GACZ,OAAgC,OADH,EAAfmQ,SACDyB,eAET,kBAACO,EAAA,EAAD,KACE,gEACA,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,GAAA,EAAD,iBACQ,KAKd,kBAAC5C,EAAA,EAAD,KACE,gEACA,kBAACF,GAAA,EAAD,CAAM+C,QAAQ,cACZ,kBAAC/C,GAAA,EAAK2B,IAAN,CAAUqB,QAAS,GACjB,kBAAC,GAAD,MACA,kBAAC,GAAD,YC+KKC,GAJelV,YAAQ,KAAM,CAAEsJ,mBAAiBlI,WrBlKrC,SAAAC,GAAS,8CAAI,WAAMU,GAAN,eAAArB,EAAA,sEAEnCqB,EAAS,CACP3B,KAAMG,IAH2B,SAKbyB,EAAYZ,WAAWC,GALV,OAK7B8T,EAL6B,OAMnCpT,EAAS,CACP3B,KF9BqB,cE+BrBa,KAAMkU,IAR2B,gDAWnCjT,QAAQC,IAAR,MAXmC,yDAAJ,wDqBkKLnC,EApLT,SAAAoV,GAAU,IAAD,EACMpL,oBAAS,GADf,mBACrBC,EADqB,KACVC,EADU,OAEIF,mBAAS,IAFb,mBAErBqL,EAFqB,KAEXC,EAFW,OAGItL,mBAAS,IAHb,mBAGrBG,EAHqB,KAGXC,EAHW,OAIkBJ,mBAAS,IAJ3B,mBAIrBK,EAJqB,KAIJC,EAJI,OAKMN,mBAAS,IALf,mBAKrBQ,EALqB,KAKVC,EALU,OAMIT,mBAAS,IANb,mBAMrBW,EANqB,KAMXC,EANW,OAOFZ,mBAAS,IAPP,mBAOrBa,EAPqB,KAOdC,EAPc,OAQFd,mBAAS,GARP,mBAQrBqE,EARqB,KAQdkH,EARc,OASAvL,mBAAS,MATT,mBASrBmJ,EATqB,KASbqC,EATa,KActBzK,EAAc,WAClBb,GAAa,IAmDf,OACE,kBAACc,EAAA,EAAD,CACEC,QACE,kBAACqB,EAAA,EAAD,CACEjM,MAAO,CAAE0M,aAAc,UACvB3B,QA5DW,WACjBlB,GAAa,IA4DPuL,QAAQ,QACRnV,MAAM,SAEN,kBAACuN,EAAA,EAAD,CAAMC,KAAK,QANb,8BAUFzC,WAAS,EACTC,KAAMrB,EACNsB,QAASR,GAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,+BAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SAnEkB,WACxBxB,IAAaE,GACf+K,EAAM9L,gBAAgB,sCAA2B,QAEnD,IAAMjI,EAAY,CAChBgU,WACAlL,WACAI,WAAYC,EACZE,UAAWC,EACXE,QACAwD,QACA8E,UAEFiC,EAAMhU,WAAWC,GACjB+T,EAAM9L,gBAAN,UAAyBjI,EAAUgU,SAAnC,gBAAwD,WACxDtK,MAqDM,kBAACW,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACT1L,KAAK,OACL4L,YAAY,6BACZC,SAAU,SAAAC,GAAC,OAAIoJ,EAAYpJ,EAAEC,OAAOvF,QACpC0B,MAAM,4BAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTC,OAAK,EACL3L,KAAK,WACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAI9B,EAAY8B,EAAEC,OAAOvF,QACpC0B,MAAM,aAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTC,OAAK,EACL3L,KAAK,WACL4L,YAAY,uBACZC,SAAU,SAAAC,GAAC,OAAI5B,EAAmB4B,EAAEC,OAAOvF,QAC3C0B,MAAM,uBAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTC,OAAK,EACL3L,KAAK,OACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIzB,EAAayB,EAAEC,OAAOvF,QACrC0B,MAAM,YAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTC,OAAK,EACL3L,KAAK,OACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAItB,EAAYsB,EAAEC,OAAOvF,QACpC0B,MAAM,aAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTC,OAAK,EACL3L,KAAK,QACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAIpB,EAASoB,EAAEC,OAAOvF,QACjC0B,MAAM,UAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASoD,IACTqD,WAAS,EACTjG,aAAcgC,EACdL,QA5GW,CACnB,CACEC,IAAK,EACLC,KAAM,KACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,WACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,IA+FDqF,SA5FO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACzB4L,EAAMC,iBACN8C,EAAS3O,IA2FD0B,MAAM,SAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASH,IAAKiK,SACd7H,KAAK,SACL7B,SA7FQ,WAEduJ,EADa,OAAXrC,EACQ,EAEA,OA0FJyC,UAAWzC,EACX7K,MAAM,6BAER,kBAACgE,EAAA,EAAD,CACEhM,MAAM,QACNF,KAAK,SACLmM,UACG8I,IACAlL,IACAE,IACAQ,IACAL,IACAG,GATL,kB,qBCgEKkL,GALgB7V,YAAQ,KAAM,CAC3C4J,uBAAwBN,GACxBO,kBAAmBrI,GAFUxB,EAtNT,SAAC,GAAyD,IAAvD6D,EAAsD,EAAtDA,KAAM+F,EAAgD,EAAhDA,uBAAwBC,EAAwB,EAAxBA,kBAAwB,EAC3CG,oBAAS,GADkC,mBACtEC,EADsE,KAC3DC,EAD2D,OAE7CF,mBAAS,IAFoC,mBAEtEG,EAFsE,KAE5DC,EAF4D,OAG/BJ,mBAAS,IAHsB,mBAGtEK,EAHsE,KAGrDC,EAHqD,OAI3CN,mBAASnG,EAAK0G,YAJ6B,mBAItEC,EAJsE,KAI3DC,EAJ2D,OAK7CT,mBAASnG,EAAK6G,WAL+B,mBAKtEC,EALsE,KAK5DC,EAL4D,OAMnDZ,mBAASnG,EAAKgH,OANqC,mBAMtEA,EANsE,KAM/DC,EAN+D,OAOnDd,mBAASnG,EAAKwK,OAPqC,mBAOtEA,EAPsE,KAO/DkH,EAP+D,OAQjDvL,mBAASnG,EAAKsP,QARmC,mBAQtEA,EARsE,KAQ9DqC,EAR8D,KAavEzK,EAAc,WAClBb,GAAa,IAsEf,OACE,kBAACc,EAAA,EAAD,CACEC,QACE,uBAAGqE,KAAK,KAAKlE,QA7EA,WACjBlB,GAAa,KA6ENrG,EAAKwR,UAGVhK,WAAS,EACTC,KAAMrB,EACNsB,QAASR,GAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,uCAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SAhFY,WACtB,GAAwB,IAApBxB,EAAShD,QAA2C,IAA3BkD,EAAgBlD,OAAc,CACzD,IAAM1F,EAAe,CACnBE,GAAIkC,EAAKlC,GACT4I,WAAYC,EACZE,UAAWC,EACXE,QACAwD,QACA8E,UAEFvJ,EAAuB,sBAAD,OACPnI,EAAa8I,WADN,YACoB9I,EAAaiJ,UADjC,0BAEpB,WAEFb,EAAkBpI,GAClBsJ,SACK,GAAIZ,IAAaE,GAAmBF,EAAShD,QAAU,EAC5DyC,EAAuB,sBAAuB,YACzC,CACL,IAAMnI,EAAe,CACnBE,GAAIkC,EAAKlC,GACTwI,WACAI,WAAYC,EACZE,UAAWC,EACXE,QACAwD,QACA8E,UAEFtJ,EAAkBpI,GAClBmI,EAAuB,sBAAD,OACPnI,EAAa8I,WADN,YACoB9I,EAAaiJ,UADjC,0BAEpB,WAEFK,OAgDI,kBAACW,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTO,aAAcxI,EAAKwR,SACnBjV,KAAK,OACL4L,YAAY,6BACZO,UAAQ,EACRjE,MAAM,4BAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTC,OAAK,EACL3L,KAAK,WACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAI9B,EAAY8B,EAAEC,OAAOvF,QACpC0B,MACE,kBAAC,IAAM8D,SAAP,KACE,qEACC,KACD,kBAAC,EAAD,SAIN,kBAACV,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTC,OAAK,EACL3L,KAAK,WACL4L,YAAY,uBACZC,SAAU,SAAAC,GAAC,OAAI5B,EAAmB4B,EAAEC,OAAOvF,QAC3C0B,MACE,kBAAC,IAAM8D,SAAP,KACE,oDACC,KACD,kBAAC,EAAD,SAIN,kBAACV,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTC,OAAK,EACLM,aAAc7B,EACdpK,KAAK,OACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIzB,EAAayB,EAAEC,OAAOvF,QACrC0B,MAAM,YAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTC,OAAK,EACLM,aAAc1B,EACdvK,KAAK,OACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAItB,EAAYsB,EAAEC,OAAOvF,QACpC0B,MAAM,aAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTC,OAAK,EACLM,aAAcxB,EACdzK,KAAK,QACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAIpB,EAASoB,EAAEC,OAAOvF,QACjC0B,MAAM,UAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTqD,WAAS,EACTjG,aAAcxI,EAAKwK,MACnBL,QA/GW,CACnB,CACEC,IAAK,EACLC,KAAM,KACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,WACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,IAkGDqF,SA/FO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACzB4L,EAAMC,iBACN8C,EAAS3O,IA8FD0B,MAAM,SAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASH,IAAKiK,SACd7H,KAAK,SACL7B,SAhGQ,WAEduJ,EADa,OAAXrC,EACQ,EAEA,OA6FJyC,UAAWzC,EACX7K,MAAM,6BAER,kBAACgE,EAAA,EAAD,CACEhM,MAAM,QACNF,KAAK,SACLmM,UAAW1B,IAAUL,IAAcG,GAHrC,YAOA,kBAAC,EAAD,YC1GJmL,GAAqB,CACzBC,WvBnEwB,SAAAlS,GACxB,MAAO,CACLzD,KFnBuB,cEoBvB4V,QAASnS,IuBiEX+F,uBAAwBN,GACxB9H,aACAyU,kBvBhCwB,SAAAtU,GAAE,8CAAI,WAAMI,GAAN,SAAArB,EAAA,sEAE5BqB,EAAS,CACP3B,KAAMG,IAERwB,EAAS,CACP3B,KFzDqB,cE0DrBa,KAAMU,IAPoB,SAStBK,EAAYH,WAAWF,GATD,uDAW5BO,QAAQC,IAAR,MAX4B,yDAAJ,wDuBqCb+T,GAFOlW,YAAQ,KAAM8V,GAAd9V,EA1FD,SAAC,GAAyD,IAGzEmW,EASAC,EACAC,EAbkBxS,EAAsD,EAAtDA,KAAMoS,EAAgD,EAAhDA,kBAAmBrM,EAA6B,EAA7BA,uBAA6B,EACpDI,oBAAS,GAD2C,mBACrEsB,EADqE,KAC/DoI,EAD+D,KAK1EyC,EADiB,IAAftS,EAAKwK,MACa,KACI,IAAfxK,EAAKwK,MACM,WAEA,QAKF,OAAhBxK,EAAKsP,QACPkD,EAAqB,cACrBD,EAAY,iBACa,IAAhBvS,EAAKsP,SACdkD,EAAqB,oBACrBD,EAAY,eAYd,OACE,kBAACzC,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CAAehQ,KAAMA,KAEvB,kBAAC8P,GAAA,EAAME,KAAP,KACGhQ,EAAK0G,WADR,IACqB1G,EAAK6G,WAE1B,kBAACiJ,GAAA,EAAME,KAAP,KACE,kBAAC,KAAD,CAAQzG,OAAO,2BAA2BvJ,EAAKyS,YAEjD,kBAAC3C,GAAA,EAAME,KAAP,CAAYuC,UAAWA,GAAYC,GACnC,kBAAC1C,GAAA,EAAME,KAAP,KAAasC,GACb,kBAACxC,GAAA,EAAME,KAAP,KACE,kBAAChG,EAAA,EAAD,CAAMvN,MAAM,MAAM8K,QAAS,kBAAMsI,GAAQ,IAAO5F,KAAK,WACrD,kBAACgG,GAAA,EAAD,CACEvK,QAAO,uDAAyC1F,EAAKwR,SAA9C,KACP/J,KAAMA,EACNyI,SA3Ba,WACnBL,GAAQ,IA2BFM,UAzBc,WACpBN,GAAQ,GACRuC,EAAkBpS,EAAKlC,IACvBiI,EAAuB,qBAAD,OAAa/F,EAAKwR,SAAlB,eAAyC,YAuBzDpB,aAAa,sBACbC,cAAc,iBCgCTqC,GAFWvW,aALF,SAAAC,GAAK,MAAK,CAChCgC,MAAOhC,EAAMgC,MACbG,MAAOnC,EAAMmC,SAGoC,KAAzBpC,EApFT,SAAC,GAAsB,IAApBiC,EAAmB,EAAnBA,MAAOG,EAAY,EAAZA,MACzB,OAAoB,OAAhBH,EAAMA,QAAoC,IAAlBA,EAAMsS,QAE9B,kBAACpC,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQhH,KAAK,UAAb,mCAMY,IAAhB3L,EAAMiM,MAEN,kBAAC8D,EAAA,EAAD,KACE,yBAAK9R,MAAO,CAAEwM,UAAW,OAAQE,aAAc,SAC7C,wBAAI1M,MAAO,CAAEsM,QAAS,WAAtB,sBACA,kBAAC,GAAD,OAEF,kBAACgH,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,gCACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,gCACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,eAIJ,kBAACF,GAAA,EAAMe,KAAP,KACGzS,EAAMA,MAAM4P,KAAI,SAAAhO,GAAI,OACnB,kBAAC,GAAD,CAAMA,KAAMA,EAAMoK,IAAKpK,EAAKlC,WAOjC,Q,UCqJHmU,GAAqB,CACzB9F,gBACAwG,2BAA4BnD,GAC5BoD,iCAAkClD,IAQrBmD,GALmB1W,aAhBV,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,OACd2H,YAAanU,EAAMmU,YACnBlU,aAAcD,EAAMC,aACpB+B,MAAOhC,EAAMgC,MACbG,MAAOnC,EAAMmC,SAYf0T,GAFgC9V,EA9LT,SAAC,GAKnB,IAJLiC,EAII,EAJJA,MACAG,EAGI,EAHJA,MACAoU,EAEI,EAFJA,2BACAC,EACI,EADJA,iCACI,EACkCzM,mBAAS,IAD3C,mBACG2M,EADH,KACgBC,EADhB,OAEgC5M,mBAAS,IAFzC,mBAEG6M,EAFH,KAEeC,EAFf,KAIJ,GAAoB,OAAhB7U,EAAMA,MACR,OACE,kBAAC4S,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQtG,UAAQ,EAAClF,QAAQ,iBAwE/B,IAlEA,IA+DMwN,GAAU,IAAI3H,MAAOC,cAAgB,EACrC2H,EAAQ,GAELC,EAAI,KAAMA,GAAKF,EAASE,IAC/BD,EAAMnQ,KAAKoQ,GAEb,IAAIC,EAAcF,EAAMnF,KAAI,SAAAsF,GAAM,MAAK,CACrClJ,IAAKkJ,EACLjJ,KAAMiJ,EACNvQ,MAAOuQ,MAETD,EAAcA,EAAYpQ,UAsB1B,OACE,kBAAC,IAAMsF,SAAP,KACE,kBAACV,EAAA,EAAD,KACE,oDACA,kBAACA,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEjD,YAAY,WACZqG,aAAa,EACbC,WAAS,EACTtE,QA1GS,CACnB,CACEC,IAAK,KACLC,KAAM,WACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,WACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,YACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,WACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,WACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,aACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,cACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,SACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,UACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,UACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,YACNtH,MAAO,MAET,CACEqH,IAAK,KACLC,KAAM,WACNtH,MAAO,OAgDCqF,SArBK,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACzB4L,EAAMC,iBACNmE,EAAehQ,IAoBLA,MAAO+P,KAGX,kBAACjL,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEjD,YAAY,QACZqG,aAAW,EACXC,WAAS,EACTtE,QAASkJ,EACTjL,SA1BI,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACxB4L,EAAMC,iBACNqE,EAAclQ,IAyBJA,MAAOiQ,IACN,KAEL,kBAACnL,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQhM,MAAM,OAAO8K,QAAS,kBA9Cd,WACxB,IAAMzH,EAAI,UAAMkT,EAAN,YAAoBF,GAEV,IAAhBvU,EAAMiM,MACRoI,EAAiC9S,EAAMvB,EAAMT,IAE7C6U,EAA2B7S,GAwCeyT,KAApC,QAIF,kBAAC1L,EAAA,EAAKE,MAAN,Y,SCSJkK,GAAqB,CACzBuB,sBT1D4B,SAAA1V,GAAE,OAAI,SAAAI,GAClCA,EAAS,CACP3B,KnB3E6B,oBmB4E7Ba,KAAMU,MSwDR2V,sBTpD4B,SAAAnE,GAAM,OAAI,SAAApR,GACtCA,EAAS,CACP3B,KnBjF4B,mBmBkF5Ba,KAAMkS,MSkDRoE,oBT9C0B,SAAArJ,GAAI,8CAAI,WAAMnM,GAAN,SAAArB,EAAA,sDAClCqB,EAAS,CACP3B,KnBvF0B,iBmBwF1Ba,KAAMiN,IAH0B,2CAAJ,wDSsDjBsJ,GALmBxX,aAfV,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,OACd2H,YAAanU,EAAMmU,YACnBnS,MAAOhC,EAAMgC,MACbG,MAAOnC,EAAMmC,SAYf0T,GAFgC9V,EA/JT,SAAC,GAMnB,IALLiC,EAKI,EALJA,MACAG,EAII,EAJJA,MACAiV,EAGI,EAHJA,sBACAC,EAEI,EAFJA,sBACAC,EACI,EADJA,oBACI,EACwBvN,mBAAS,MADjC,mBACGyN,EADH,KACWC,EADX,OAEwB1N,mBAAS,MAFjC,mBAEGmJ,EAFH,KAEWqC,EAFX,OAGgCxL,mBAAS,IAHzC,mBAGG2N,EAHH,KAGeC,EAHf,KAYJ,GAPAtD,qBAAU,WACR+C,EAAsBI,GACtBH,EAAsBnE,GACtBoE,EAAoBI,KAEnB,CAACF,EAAQtE,EAAQwE,IAEA,OAAhB1V,EAAMA,MACR,OACE,6BACE,8CAKN,IAAM4V,EAAc5V,EAAMA,MAAM4P,KAAI,SAAAhO,GAAI,MAAK,CAC3CoK,IAAKpK,EAAKlC,GACVuM,KAAK,GAAD,OAAKrK,EAAK0G,WAAV,YAAwB1G,EAAK6G,WACjC9D,MAAO/C,EAAKlC,OAGRmW,EAAmB,CACvB,CACE7J,IAAK,EACLC,KAAM,SACNtH,MAAO,OAJc,oBAMpBiR,IAqBCE,EAAU,SAAC7L,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MACpBsF,EAAEuG,iBACFiF,EAAU9Q,IA+BZ,OACE,kBAAC8E,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,KACE,kBAACE,EAAA,EAAD,CACE1L,KAAK,OACL4L,YAAY,iBACZC,SA/BgB,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAClC4L,EAAMC,iBACNmF,EAAchR,GACd2Q,EAAoBI,OAIA,IAAhBvV,EAAMiM,MACD,KAGP,kBAAC3C,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEjD,YAAY,oBACZqG,aAAW,EACXC,WAAS,EACTC,QAAM,EACNvE,QAAS8J,EACT7L,SAAU8L,KAiBZ,kBAACrM,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEjD,YAAY,OACZqG,aAAW,EACXC,WAAS,EACTtE,QAnEY,CACpB,CACEC,IAAK,IACLC,KAAM,SACNtH,MAAO,MAET,CACEqH,IAAK,IACLC,KAAM,mBACNtH,MAAO,GAET,CACEqH,IAAK,IACLC,KAAM,SACNtH,MAAO,IAsDDqF,SA9CQ,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC1B4L,EAAMC,iBACN+C,EAAU5O,GACV0Q,EAAsBnE,MA4Cb,KAEL,kBAACzH,EAAA,EAAKE,MAAN,WCFOoM,GALiBhY,aAJR,SAAAC,GAAK,MAAK,CAChCmC,MAAOnC,EAAMmC,SAG0C,CACvD6V,oBVzB0B,SAAAtW,GAAE,8CAAI,WAAMI,GAAN,SAAArB,EAAA,sEAE9BqB,EAAS,CACP3B,KAAMG,IAHsB,SAKxB0P,GAAc9L,aAAaxC,GALH,OAM9BI,EAAS,CACP3B,KnBzEuB,gBmB0EvBa,KAAMU,IARsB,gDAW9BO,QAAQC,IAAR,MAX8B,yDAAJ,uDU0B5ByH,uBAAwBN,IAFMtJ,EA1GT,SAAC,GAKjB,IAaDkY,EACA9B,EAlBJ6B,EAII,EAJJA,oBACArO,EAGI,EAHJA,uBACAxH,EAEI,EAFJA,MACAqK,EACI,EADJA,OACI,EACoBzC,oBAAS,GAD7B,mBACGsB,EADH,KACSoI,EADT,KAgBJ,GAAsB,IAAlBjH,EAAO0G,OACT+E,EAAuB,cAClB,GAAsB,IAAlBzL,EAAO0G,OAChB+E,EAAuB,wBAClB,GAAsB,IAAlBzL,EAAO0G,OAEhB,OADA+E,EAAuB,YAChB,KAMT,OAJqB,IAAjBzL,EAAO2G,QACTgD,EAAY,SAGM,IAAhBhU,EAAMiM,OAAgC,IAAjB5B,EAAO2G,MACvB,KAIP,kBAAC,IAAMhH,SAAP,KACE,kBAACuH,GAAA,EAAMC,IAAP,CAAWwC,UAAWA,GACpB,kBAAC+B,GAAA,EAAD,CAAYC,GAAIzE,KAAME,KAAMwE,SAAU,KACnC5L,EAAOwG,YAEV,kBAACU,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAMuC,UAAWA,EAAWpJ,GAAE,kBAAaP,EAAO9K,KAC/C8K,EAAOqB,OAGZ,kBAAC6F,GAAA,EAAME,KAAP,KACG3G,KAAOT,EAAOU,cAAcC,OAAO,eAEtC,kBAACuG,GAAA,EAAME,KAAP,KACGpH,EAAOY,mBAAmBC,MAAM,GAAI,GADvC,KAC6C,IAC1Cb,EAAOc,iBAAiBD,MAAM,GAAI,IAErC,kBAACqG,GAAA,EAAME,KAAP,KAAaqE,GACb,kBAACvE,GAAA,EAAME,KAAP,KACE,kBAAChG,EAAA,EAAD,CACExN,MAAO,CAAEC,MAAO,OAChBwN,KAAK,SACL1C,QAAS,kBAAMsI,GAAQ,MAEzB,kBAACI,GAAA,EAAD,CACEvK,QAAO,6CAAwCkD,EAAOqB,KAA/C,YAAuDrB,EAAOU,cACrE7B,KAAMA,EACNyI,SA1DW,WACnBL,GAAQ,IA0DAM,UAxDY,WACpBN,GAAQ,GACRuE,EAAoBxL,EAAO9K,IAC3BiI,EAAuB,GAAD,OACjB6C,EAAOqB,KADU,YACFrB,EAAOU,aADL,eAEpB,oBCJND,KAAO2F,OAAO,MAEd,IA8IMiD,GAAqB,CACzBU,2BAA4BnD,GAC5BoD,iCAAkClD,IAG9B+E,GAAsBtY,aAbJ,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,OACd2H,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,SAWf0T,GAF0B9V,EAnJT,SAAC,GAKb,IAkCDuY,EAtCJnW,EAII,EAJJA,MACAgS,EAGI,EAHJA,YACAoC,EAEI,EAFJA,2BACAC,EACI,EADJA,iCAkBA,GAfAnC,qBAAU,WACY,IAAhBlS,EAAMiM,MAC2B,OAA/B+F,EAAYoE,eACd/B,EAAiCvJ,OAASE,OAAO,WAAYhL,EAAMT,IAEnE8U,EAAiCrC,EAAYoE,eAAgBpW,EAAMT,IAE7B,OAA/ByS,EAAYoE,eACrBhC,EAA2BtJ,OAASE,OAAO,YAE3CoJ,EAA2BpC,EAAYoE,kBAGxC,IAE6B,OAA5BpE,EAAYA,aAAwBA,EAAYG,QAClD,OACE,kBAACM,GAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,GAAA,EAAD,CAAQxL,QAAQ,iBAKtB,GAAuC,IAAnC6K,EAAYA,YAAYjN,OAC1B,OACE,kBAACgL,EAAA,EAAD,KACE,8FACA,kBAAC,GAAD,OAOJoG,EADiC,OAA/BnE,EAAYoE,eACOtL,OAASE,OAAO,aAEhBF,KAAOkH,EAAYoE,gBAAgBpL,OAAO,aAGjE,IAAIqL,EAAgBrE,EAAYA,YAuBhC,OArBAqE,EAC+B,IAA7BrE,EAAYsE,aACRD,EACCA,EAAgBA,EAAcE,QAAO,SAAAlM,GAAM,OAC1CA,EAAOqB,KACJ8K,cACAC,SAASzE,EAAYsE,aAAaE,kBAE7CH,EACkC,OAAhCrE,EAAY0E,gBACRL,EACCA,EAAgBA,EAAcE,QAC7B,SAAAlM,GAAM,OAAIA,EAAO8D,UAAY6D,EAAY0E,mBAEjDL,EACoC,OAAlCrE,EAAY2E,kBACRN,EACCA,EAAgBA,EAAcE,QAC7B,SAAAlM,GAAM,OAAIA,EAAO0G,SAAWiB,EAAY2E,qBAI9C,kBAAC5G,EAAA,EAAD,KACE,kBAAC,GAAD,MACA,wCAAcoG,GACd,kBAAC,GAAD,MACA,kBAAC5E,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACuE,GAAA,EAAD,CAAYC,GAAIzE,KAAME,KAAMwE,SAAU,KAAtC,cAGA,kBAAC1E,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,cACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,QAGJ,kBAACF,GAAA,EAAMe,KAAP,KACG+D,EAAc5G,KAAI,SAAA8C,GAAC,OAClB,kBAAC,GAAD,CAAgB1G,IAAK0G,EAAEhT,GAAI8K,OAAQkI,aA+DhC2D,MCvFFhV,GAAgB,SAAAC,GAAW,8CAAI,WAAMxB,GAAN,eAAArB,EAAA,sEAExCqB,EAAS,CACP3B,KAAMG,IAHgC,SAKlCiQ,EAAelN,cAAcC,GALK,uBAMjBiN,EAAe/P,SANE,OAMlC0P,EANkC,OAOxCpO,EAAS,CACP3B,K/BxD0B,mB+ByD1Ba,KAAMkP,IATgC,kDAYxCjO,QAAQC,IAAR,MAZwC,0DAAJ,uDCxElC9B,GAAQ,CACZyR,aAAc,EACdnF,QAAS,QACToF,QAAS,GACTC,QAAS,OAuJLgH,GAA4BhZ,YAAQ,KAAM,CAC9C4J,uBAAwBN,GACxB2P,qBDpG2B,SAAA5V,GAAc,8CAAI,WAAMtB,GAAN,SAAArB,EAAA,sEAE3CqB,EAAS,CACP3B,KAAMG,IAHmC,SAKrCiQ,EAAepN,cAAcC,GALQ,OAM3CtB,EAAS,CACP3B,K/BlCwB,iB+BmCxBa,KAAMoC,IARmC,gDAW3CnB,QAAQC,IAAR,MAX2C,yDAAJ,wDCkGTnC,EApJT,SAAC,GAInB,IAHLyQ,EAGI,EAHJA,QACAwI,EAEI,EAFJA,qBACArP,EACI,EADJA,uBACI,EAC8BI,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEoBF,mBAASyG,EAAQ3C,MAFrC,mBAEGA,EAFH,KAESoL,EAFT,OAGgClP,mBAASyG,EAAQ0I,YAHjD,mBAGGA,EAHH,KAGeC,EAHf,OAI0BpP,mBAASyG,EAAQ9D,SAJ3C,mBAIGA,EAJH,KAIY0M,EAJZ,OAKoBrP,mBAASyG,EAAQ6I,MALrC,mBAKGA,EALH,KAKSC,EALT,KAUExO,EAAc,WAClBb,GAAa,IAiCf,OACE,kBAACc,EAAA,EAAD,CACEC,QACE,uBAAGqE,KAAK,KAAKlE,QAxCA,WACjBlB,GAAa,KAwCNuG,EAAQ3C,MAGbzC,WAAS,EACTC,KAAMrB,EACNsB,QAASR,GAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,6BAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SA3Cc,WACxB,IAAMtI,EAAiB,CACrB1B,GAAI8O,EAAQ9O,GACZgL,UACAwM,aACArL,OACAwL,OACA/I,QAASE,EAAQF,SAEnB0I,EAAqB5V,GACrBuG,EAAuB,GAAD,OAAIvG,EAAeyK,KAAnB,mBAAuC,WAC7D/C,MAiCM,kBAACW,EAAA,EAAKE,MAAN,CACEtD,MAAM,gBACNuD,QAASC,IACTC,OAAK,EACL3L,KAAK,OACLiM,aAAcyB,EACd7B,SAAU,SAAAC,GAAC,OAAIgN,EAAQhN,EAAEC,OAAOvF,UAGlC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,wBACNuD,QAASC,IACTC,OAAK,EACL3L,KAAK,OACLiM,aAAc8M,EACdlN,SAAU,SAAAC,GAAC,OAAIkN,EAAclN,EAAEC,OAAOvF,UAGxC,kBAAC8E,EAAA,EAAKE,MAAN,CACEC,QAASH,IAAKiK,SACd7H,KAAK,SACL7B,SAnDS,WAEfoN,EADc,OAAZ1M,EACS,EAEA,OAgDLiJ,UAAWjJ,EACXrE,MACE,2CACa,IACX,kBAAC8J,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAEsM,QAAS,UAClBmB,KAAK,oBAGTvE,QAAQ,wEACRlJ,MAAOA,GACPoO,UAAQ,OAKhB,kBAAC/C,EAAA,EAAKE,MAAN,CACEC,QAASH,IAAKiK,SACd7H,KAAK,SACL7B,SAjEM,WAEZsN,EADW,OAATD,EACM,EAEA,OA8DF1D,UAAW0D,EACXhR,MACE,gEAC4B,IAC1B,kBAAC8J,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAEsM,QAAS,UAClBmB,KAAK,oBAGTvE,QAAQ,8EACRlJ,MAAOA,GACPoO,UAAQ,OAKhB,kBAACnC,EAAA,EAAD,CAAQhM,MAAM,QAAQF,KAAK,SAASmM,UAAWuB,GAA/C,kBA6BKkL,MCnDTQ,GAAyBxZ,aAPP,SAAAC,GAEtB,MAAO,CACLkQ,SAAUlQ,EAAMkQ,YAIoC,CACtD7M,iBACAsG,uBAAwBN,IAFKtJ,EArHT,SAAC,GAKhB,IAJLqQ,EAII,EAJJA,WACApD,EAGI,EAHJA,aACAkD,EAEI,EAFJA,SACAvG,EACI,EADJA,uBACI,EAC8BI,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEwCF,mBAAS,MAFjD,mBAEGyP,EAFH,KAEmBC,EAFnB,KAGEC,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAGf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDtJ,GAIP,IAaMuJ,EAAezJ,EAAS0J,YAAYhI,KAAI,SAAApB,GAAO,MAAK,CACxD9O,GAAI8O,EAAQ9O,GACZuM,KAAK,GAAD,OAAKuC,EAAQ9O,GAAb,cAAqB8O,EAAQ3C,MACjClH,MAAO6J,EAAQ9O,OAMjB,OACE,kBAACqJ,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDtJ,IAIL,kBAAC7E,EAAA,EAAD,4BACoB6E,EADpB,MACmCpD,EADnC,WAGA,kBAACjC,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SArCK,WACf,IAAMpI,EAAc,CAClBnD,KAAM,UACN+F,MAAOsT,EACPK,QAASzJ,GAEX/M,GAAcC,GACdqG,EAAuB,YAAD,OACRrG,EAAY4C,MADJ,gBAEpB,WAEF4E,MA2BM,kBAACW,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEhD,SAtBc,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC9BsF,EAAEuG,iBACFiH,EAAkB9S,IAqBR0L,WAAS,EACTC,QAAM,EACNvE,QAAS4L,KAGb,kBAAClO,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlM,KAAK,UAAb,qBAqDGoZ,MChFAO,GA3CS,SAAC,GAAiB,IAWpC3D,EAXqB3F,EAAc,EAAdA,QACzB,OAAgB,OAAZA,EAEA,kBAAC0B,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQhH,KAAK,UAAb,0BAOgB,IAApB0C,EAAQ9D,UACVyJ,EAAY,kBAIZ,kBAACzC,GAAA,EAAMC,IAAP,CAAWwC,UAAWA,GACpB,kBAACzC,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CAAexD,WAAYI,EAAQ9O,GAAIsL,aAAcwD,EAAQ3C,QAG/D,kBAAC6F,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CAAkBpD,QAASA,KAE7B,kBAACkD,GAAA,EAAME,KAAP,KAAapD,EAAQ0I,eChBrB9Y,GAAQ,CACZyR,aAAc,EACdnF,QAAS,QACToF,QAAS,GACTC,QAAS,OA2ILgI,GAA2Bha,aALT,SAAAC,GACtB,MAAO,CACLmC,MAAOnC,EAAMmC,SAGyC,CACxDwH,uBAAwBN,GACxB2Q,wBJvG8B,SAAAC,GAAY,8CAAI,WAAMnY,GAAN,eAAArB,EAAA,sEAE5CqB,EAAS,CACP3B,KAAMG,IAHoC,SAKtBiQ,EAAetN,cAAcgX,GALP,OAKtCzJ,EALsC,OAM5C1O,EAAS,CACP3B,K/BtB4B,qB+BuB5Ba,KAAMwP,IARoC,gDAW5CvO,QAAQC,IAAR,MAX4C,yDAAJ,wDIqGXnC,EAxIT,SAAC,GAIlB,IAHLoC,EAGI,EAHJA,MACA6X,EAEI,EAFJA,wBACArQ,EACI,EADJA,uBACI,EAC8BI,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEoBF,mBAAS,IAF7B,mBAEG8D,EAFH,KAESoL,EAFT,OAGgClP,mBAAS,IAHzC,mBAGGmP,EAHH,KAGeC,EAHf,OAI0BpP,oBAAS,GAJnC,mBAIG2C,EAJH,KAIY0M,EAJZ,OAKoBrP,oBAAS,GAL7B,mBAKGsP,EALH,KAKSC,EALT,KAUExO,EAAc,WAClBb,GAAa,IAgBf,OACE,kBAACc,EAAA,EAAD,CACEC,QACE,kBAACqB,EAAA,EAAD,CAAQlB,QAvBK,WACjBlB,GAAa,IAsBoBuL,QAAQ,QAAQnV,MAAM,SAAnD,oBAIF+K,WAAS,EACTC,KAAMrB,EACNsB,QAASR,GAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,wBAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SA1BO,WACjB,IAAMuO,EAAe,CACnBvN,UACAwM,aACArL,OACAwL,OACA/I,QAASnO,EAAMT,IAEjBsY,EAAwBC,GACxBtQ,EAAuB,GAAD,OAAIsQ,EAAapM,KAAjB,gBAAkC,WACxD/C,MAiBM,kBAACW,EAAA,EAAKE,MAAN,CACEtD,MAAM,gBACNuD,QAASC,IACTC,OAAK,EACL3L,KAAK,OACL4L,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAIgN,EAAQhN,EAAEC,OAAOvF,UAElC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,oBACNuD,QAASC,IACTC,OAAK,EACL3L,KAAK,OACL4L,YAAY,uBACZC,SAAU,SAAAC,GAAC,OAAIkN,EAAclN,EAAEC,OAAOvF,UAGxC,kBAAC8E,EAAA,EAAKE,MAAN,CACEC,QAASH,IAAKiK,SACd7H,KAAK,SACL7B,SAAU,kBAAMoN,GAAY1M,IAC5BiJ,UAAWjJ,EACXrE,MACE,2CACa,IACX,kBAAC8J,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAEsM,QAAS,UAClBmB,KAAK,oBAGTvE,QAAQ,wEACRlJ,MAAOA,GACPoO,UAAQ,OAKhB,kBAAC/C,EAAA,EAAKE,MAAN,CACEC,QAASH,IAAKiK,SACd7H,KAAK,OACL7B,SAAU,kBAAMsN,GAASD,IACzB1D,UAAW0D,EACXhR,MACE,gEAC4B,IAC1B,kBAAC8J,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAEsM,QAAS,UAClBmB,KAAK,oBAGTvE,QAAQ,8EACRlJ,MAAOA,GACPoO,UAAQ,OAKhB,kBAACnC,EAAA,EAAD,CAAQhM,MAAM,QAAQF,KAAK,SAASmM,UAAWuB,GAA/C,kBAmCKkM,M,UCzHAha,gBANS,SAAAC,GACtB,MAAO,CACLC,aAAcD,EAAMC,gBAITF,EArCM,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACtB,OAA6B,OAAzBA,EAAaC,QACR,KAGiB,YAAtBD,EAAaE,KAEb,yBAAKgW,UAAU,YACb,kBAAC+D,GAAA,EAAD,CAASC,UAAQ,EAACC,SAAO,EAACC,OAAQpa,EAAaC,WAK3B,SAAtBD,EAAaE,KAEb,yBAAKgW,UAAU,YACb,kBAAC+D,GAAA,EAAD,CAASC,UAAQ,EAACG,UAAQ,EAACD,OAAQpa,EAAaC,WAK/C,QC0EHqa,GAAuBxa,aALL,SAAAC,GAAK,MAAK,CAChCkQ,SAAUlQ,EAAMkQ,SAChB/N,MAAOnC,EAAMmC,SAGuC,CACpDqY,sBN3F4B,yDAAM,WAAM1Y,GAAN,eAAArB,EAAA,sEAEhCqB,EAAS,CACP3B,KAAMG,IAHwB,SAKTiQ,EAAe/P,SALN,OAK1B0P,EAL0B,OAMhCpO,EAAS,CACP3B,K/BsB0B,mB+BrB1Ba,KAAMkP,IARwB,gDAWhCjO,QAAQC,IAAR,MAXgC,yDAAN,wDM0FDnC,EA3FT,SAAC,GAAgD,IAA9Cya,EAA6C,EAA7CA,sBAAuBtK,EAAsB,EAAtBA,SAAU/N,EAAY,EAAZA,MAKtD,OAJAkS,qBAAU,WACRmG,MAEC,IAC0B,OAAzBtK,EAAS0J,cAA6C,IAArB1J,EAASoE,QAE1C,kBAACpC,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQhH,KAAK,UAAb,yBAKY,IAAhB3L,EAAMiM,OAA+B,IAAhBjM,EAAMiM,MAE3B,kBAAC8D,EAAA,EAAD,KACE,yBAAK9R,MAAO,CAAEwM,UAAW,OAAQE,aAAc,SAC7C,wBAAI1M,MAAO,CAAEsM,QAAS,WAAtB,YACA,kBAAC,GAAD,OAGF,kBAAC,GAAD,MACA,kBAACgH,GAAA,EAAD,KACE,kBAACA,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,WACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,mBAIJ,kBAACF,GAAA,EAAMe,KAAP,KACGvE,EAAS0J,YAAYhI,KAAI,SAAApB,GAAO,OAC/B,kBAAC,GAAD,CAAiBA,QAASA,EAASxC,IAAKwC,EAAQ9O,WAOrD,QAsDM6Y,MC1DFE,GAAqB,SAAAnX,GAAW,8CAAI,WAAMxB,GAAN,iBAAArB,EAAA,sEAE7CqB,EAAS,CACP3B,KAAMG,IAHqC,SAKvCoa,GAAcxU,MAAM5C,GALmB,uBAMzBqX,EAAajY,YAAYY,EAAYuW,SANZ,cAMvCpU,EANuC,OAO7C3D,EAAS,CACP3B,KtCyBuB,gBsCxBvBa,KAAMyE,IATqC,UAWrBkV,EAAahY,oBACnCW,EAAYuW,SAZ+B,QAWvCe,EAXuC,OAc7C9Y,EAAS,CACP3B,KtCmBgC,yBsClBhCa,KAAM4Z,IAhBqC,kDAmB7C3Y,QAAQC,IAAR,MAnB6C,0DAAJ,uDCoEvC2Y,GAA4B9a,aANV,SAAAC,GACtB,MAAO,CACLwF,OAAQxF,EAAMwF,UAIyC,CACzDsV,2BAA4BL,IADI1a,EA5GT,SAAC,GAKnB,IAJLgb,EAII,EAJJA,SACAxT,EAGI,EAHJA,WACA/B,EAEI,EAFJA,OACAsV,EACI,EADJA,2BACI,EAC8B/Q,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEoCF,mBAAS,MAF7C,mBAEGiR,EAFH,KAEiBC,EAFjB,KAGEvB,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAEf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDqB,GAIP,IAUMpB,EAAenU,EAAO0V,UAAUtJ,KAAI,SAAAnM,GAAK,MAAK,CAClDuI,IAAKvI,EAAMsV,SACX9M,KAAK,GAAD,OAAKxI,EAAMsV,SAAX,cAAyBtV,EAAMoI,MACnClH,MAAOlB,EAAMsV,aAMf,OACE,kBAAChQ,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDqB,IAIL,kBAACxP,EAAA,EAAD,4BACoBwP,EADpB,MACiCxT,EADjC,WAGA,kBAACwD,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SAlCK,WAMfoP,EALoB,CAClB3a,KAAM,QACN+F,MAAO8U,EACPnB,QAASkB,IAGXjQ,MA4BM,kBAACW,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEhD,SAtBY,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC5BsF,EAAEuG,iBACFyI,EAAgBtU,IAqBN0L,WAAS,EACTC,QAAM,EACNvE,QAAS4L,KAGb,kBAAClO,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlM,KAAK,UAAb,qBA+CG0a,MCnFAM,GA7BY,SAAC,GAAe,IAAb1V,EAAY,EAAZA,MAC5B,OACE,kBAACiO,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CAAkBrM,WAAY9B,EAAMoI,KAAMkN,SAAUtV,EAAMsV,YAE5D,kBAACrH,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,iBAAYtH,EAAMsV,WAAatV,EAAMoI,OAE/C,kBAAC6F,GAAA,EAAME,KAAP,KAAanO,EAAMyT,YACnB,kBAACxF,GAAA,EAAME,KAAP,KAAanO,EAAM2V,aACnB,kBAAC1H,GAAA,EAAME,KAAP,KAAanO,EAAM4V,qBC+BVC,GA3CQ,SAAC,GAAmB,IAAjBJ,EAAgB,EAAhBA,UACxB,OAAkB,OAAdA,EACK,yCAGP,kBAAC,IAAM/O,SAAP,KACE,uCACA,kBAACuH,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,YACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,kBACA,kBAACF,GAAA,EAAME,KAAP,mBACA,kBAACF,GAAA,EAAME,KAAP,iBACA,kBAACF,GAAA,EAAME,KAAP,QAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGyG,EAAUtJ,KAAI,SAAAnM,GAAK,OAClB,kBAAC,GAAD,CAAoBuI,IAAKvI,EAAMsV,SAAUtV,MAAOA,WCoDtD8V,GAA6Bxb,YAAQ,KAAM,CAC/Cyb,oBC7C0B,SAAA/Y,GAAc,8CAAI,WAAMX,GAAN,eAAArB,EAAA,6DAC5CqB,EAAS,CACP3B,KAAMG,IAFoC,SAItCmb,EAAcjZ,aAAaC,GAJW,uBAKhBgZ,EAAcnZ,aAAaG,EAAef,IAL1B,OAKtCga,EALsC,OAM5C5Z,EAAS,CACP3B,K3CiC0B,iB2ChC1Ba,KAAM0a,IARoC,2CAAJ,uDD8CxC/R,uBAAwBN,IAFStJ,EAtET,SAAC,GAIpB,IAHL4b,EAGI,EAHJA,cACAhS,EAEI,EAFJA,uBACA6R,EACI,EADJA,oBACI,EACwBzR,mBAAS4R,EAAc9N,MAD/C,mBACGrI,EADH,KACWoW,EADX,OAE8B7R,mBAAS4R,EAAcE,YAFrD,mBAEGC,EAFH,KAEcC,EAFd,KAGJ,GAAsB,OAAlBJ,EACF,OACE,kBAAC/G,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,qBAiBN,OACE,kBAAC9C,GAAA,EAAD,CAAMgD,QAAS,GACb,kBAAChD,GAAA,EAAKC,OAAN,KACE,+CACA,kBAACxG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,CACEtD,MAAM,gBACNuD,QAASC,IACT1L,KAAK,OACLiM,aAAc5G,EACdwG,SAAU,SAAAC,GAAC,OAAI2P,EAAU3P,EAAEC,OAAOvF,UAEpC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,aACNuD,QAASC,IACT1L,KAAK,OACLiM,aAAc0P,EACd9P,SAAU,SAAAC,GAAC,OAAI8P,EAAa9P,EAAEC,OAAOvF,UAEvC,kBAAC8E,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlB,QAhCE,WAClB,IAAM1I,EAAiB,CACrBf,GAAIia,EAAcja,GAClBmM,KAAMrI,EACNqW,WAAYC,GAEdN,EAAoB/Y,GACpBkH,EAAuB,YAAD,OACRlH,EAAeoL,KADP,0BAEpB,YAuBoCxN,MAAM,SAApC,6BA4BGkb,MEXAS,GAJgBjc,aAnCP,SAAAC,GACtB,MAAO,CACLwF,OAAQxF,EAAMwF,UAiCsC,CACtDyW,oBD1D0B,SAAAva,GAAE,8CAAI,WAAMI,GAAN,iBAAArB,EAAA,sEAE9BqB,EAAS,CACP3B,K3C8D8B,yB2C5DhC2B,EAAS,CACP3B,KAAMG,IANsB,SAQTmb,EAAcnZ,aAAaZ,GARlB,cAQxB8D,EARwB,OAS9B1D,EAAS,CACP3B,K3CqDwB,iB2CpDxBa,KAAMwE,IAXsB,SAaNiW,EAAclZ,kBAAkBb,GAb1B,OAaxBwZ,EAbwB,OAc9BpZ,EAAS,CACP3B,K3CiDkC,2B2ChDlCa,KAAMka,IAhBsB,kDAmB9BjZ,QAAQC,IAAR,MAnB8B,0DAAJ,wDCyDCnC,EA3DT,SAAC,GAAyC,IAAvC2B,EAAsC,EAAtCA,GAAIua,EAAkC,EAAlCA,oBAAqBzW,EAAa,EAAbA,OAMhD,OALA6O,qBAAU,WACR4H,EAAoBhV,SAASvF,MAE5B,CAACA,IAEyB,OAAzB8D,EAAOmW,cAEP,kBAACzJ,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,sBAON,kBAAC5C,EAAA,EAAD,KACE,kBAAC,GAAD,CAAmByJ,cAAenW,EAAOmW,gBACzC,kBAAC,GAAD,CAAgBT,UAAW1V,EAAO0V,gB,wCCrB3BgB,GAA6B,WAAO,IAAD,EACZnS,mBAAS,IADG,mBACvCoS,EADuC,KAC5BC,EAD4B,KAIxCC,EAAuBC,cAAY,kBACvCC,aAAuB7B,GAAcvU,oBAAqB,QAEtDmM,EAASkK,oBAAQ,sBACrB,sBAAA/b,EAAA,yDAC2B,IAArB0b,EAAUjV,OADhB,yCAEW,IAFX,gCAIWmV,EAAqBF,IAJhC,2CAQA,CAACA,IAEH,MAAO,CACLA,YACAC,eACA9J,WC0GWmK,GALoB1c,aANX,SAAAC,GACtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAI0C,CAC1DoK,sBRrD4B,SAAAja,GAAc,8CAAI,WAAMX,GAAN,SAAArB,EAAA,sEAE5CqB,EAAS,CACP3B,KAAMG,IAHoC,SAKtCqa,EAAa7X,eAAeL,GALU,OAM5CX,EAAS,CACP3B,KtCAgC,yBsCChCa,KAAMyB,IARoC,gDAW5CR,QAAQC,IAAR,MAX4C,yDAAJ,uDQsD1CyH,uBAAwBN,IAFStJ,EAxHT,SAAC,GAIpB,IAHL4c,EAGI,EAHJA,aACAD,EAEI,EAFJA,sBACA/S,EACI,EADJA,uBACI,EAC6BuS,KAAzBE,EADJ,EACIA,aAAc9J,EADlB,EACkBA,OADlB,EAE8BvI,oBAAS,GAFvC,mBAEGC,EAFH,KAEcC,EAFd,OAGwCF,mBAAS,MAHjD,mBAGG6S,EAHH,KAGmBC,EAHnB,KAKEnD,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAGf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GAApD,kBAMJ,IAAIoD,EAAU,GAEZA,OADoBC,IAAlBzK,EAAO0K,OACC,GAEA1K,EAAO0K,OAAOpL,KAAI,SAAAoL,GAAM,MAAK,CACrChP,IAAKgP,EAAOC,UACZC,MAAM,IAAD,OAAMF,EAAOC,UAAb,aAA2BD,EAAOxV,aACvC2V,YAAaH,EAAOxV,YACpBb,MAAOqW,EAAOC,UACdzV,YAAawV,EAAOxV,gBAIxB,IAcM4V,EAAqB,SAACnR,EAAD,GAAoB,IAAd+Q,EAAa,EAAbA,OAC/B/Q,EAAEuG,iBACFqK,EAAkBG,IAGpB,OACE,kBAACjS,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GAApD,mBAKF,kBAACnO,EAAA,EAAD,sBAAuBoR,EAAapV,WAApC,gBACA,kBAACwD,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAKE,MAAN,KACE,yBAAKwK,UAAU,iBACb,kBAAC,KAAD,CACE7B,QAAShC,EAAOgC,QAChB+I,eAAgBD,EAChBE,eAAgB,SAAArR,GAAC,OAAImQ,EAAanQ,EAAEC,OAAOvF,QAC3C4W,kBAAmBH,EACnBN,QAASA,MAIf,kBAACrR,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlB,QA5CC,WACf,IAAMqS,EAAgB,CACpBzC,SAAU4B,EAAa,GAAG5B,SAC1BkC,UAAWL,EAAejW,MAC1Ba,YAAaoV,EAAepV,aAE9BkV,EAAsBc,GACtB7T,EAAuB,GAAD,OACjBgT,EAAa,GAAGpV,WADC,gCAEpB,WAEFuD,MAiCM,gBCyDK2S,GALmB1d,YAAQ,KAAM,CAC9C2d,mBT5GyB,SAAA7a,GAAa,8CAAI,WAAMf,GAAN,eAAArB,EAAA,6DAC1CqB,EAAS,CACP3B,KAAMG,IAFkC,SAIpCqa,EAAa/X,YAAYC,GAJW,uBAKf8X,EAAajY,YAAYG,EAAcnB,IALxB,OAKpCic,EALoC,OAM1C7b,EAAS,CACP3B,KtCsCyB,gBsCrCzBa,KAAM2c,IARkC,2CAAJ,uDS6GtChU,uBAAwBN,IAFQtJ,EAnIT,SAAC,GAKnB,IAJLgb,EAII,EAJJA,SACA4B,EAGI,EAHJA,aACAe,EAEI,EAFJA,mBACA/T,EACI,EADJA,uBACI,EACoBI,mBAAS4S,EAAa,GAAGpV,YAD7C,mBACGsG,EADH,KACSoL,EADT,OAEsBlP,mBAAS4S,EAAa,GAAGtU,OAF/C,mBAEGA,EAFH,KAEUuV,EAFV,OAGsB7T,mBAAS4S,EAAa,GAAGlV,QAH/C,mBAGGoW,EAHH,KAGUC,EAHV,OAIoB/T,mBAAS,MAJ7B,mBAIGvB,EAJH,KAISuV,EAJT,OAK8BhU,mBAAS4S,EAAa,GAAGd,YALvD,mBAKGC,EALH,KAKcC,EALd,KAcJ,GARA1H,qBAAU,WACqB,OAAzBsI,EAAa,GAAGnU,KAClBuV,EAAQ,MAERA,EAAQ9W,SAAS0V,EAAa,GAAGnU,SAGlC,CAACmU,EAAa,GAAGnU,OACC,OAAjBmU,EACF,OACE,kBAAC/H,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,qBAoBN,OACE,kBAAC9C,GAAA,EAAD,CAAMgD,QAAS,GACb,kBAAChD,GAAA,EAAKC,OAAN,KACE,8CACA,kBAACxG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,KACE,gDACA,kBAACE,EAAA,EAAD,CAAOS,UAAQ,EAACnM,KAAK,OAAOwG,MAAOgW,EAAa,GAAGnV,cACnD,8BACE,kBAAC,IAAD,CACEpH,MAAO,CACL4d,OAAQ,UACRC,SAAU,SACV5d,MAAO,OACPwM,YAAa,QAEfE,GAAE,oBAAe4P,EAAa,GAAGM,YAPnC,oCAYF,8BACE,kBAAC,GAAD,CAAmBN,aAAcA,MAGrC,kBAAClR,EAAA,EAAKE,MAAN,CACEtD,MAAM,SACNuD,QAASC,IACT1L,KAAK,OACLiM,aAAcyB,EACd7B,SAAU,SAAAC,GAAC,OAAIgN,EAAQhN,EAAEC,OAAOvF,UAElC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,aACNuD,QAASC,IACT1L,KAAK,OACLiM,aAAc/D,EACd2D,SAAU,SAAAC,GAAC,OAAI2R,EAAS3R,EAAEC,OAAOvF,UAEnC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,YACNuD,QAASC,IACT1L,KAAK,OACLiM,aAAcyR,EACd7R,SAAU,SAAAC,GAAC,OAAI6R,EAAS7R,EAAEC,OAAOvF,UAEnC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,QACNuD,QAASC,IACT1L,KAAK,SACLiM,aAAc5D,EACdwD,SAAU,SAAAC,GAAC,OAAI8R,EAAQ9R,EAAEC,OAAOvF,UAElC,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,aACNuD,QAASC,IACT1L,KAAK,OACLiM,aAAc0P,EACd9P,SAAU,SAAAC,GAAC,OAAI8P,EAAa9P,EAAEC,OAAOvF,UAEvC,kBAAC8E,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlB,QA5EE,WAClB,IAAMtI,EAAgB,CACpBnB,GAAIqZ,EACJlN,OACAxF,QACAZ,OAAQoW,EACRrV,OACAqT,WAAYC,GAEd4B,EAAmB7a,GACnB8G,EAAuB,WAAD,OACT9G,EAAcgL,KADL,0BAEpB,YAgEoCxN,MAAM,SAApC,6BCjFCwI,GAAc,SAAA7E,GAAU,8CAAI,WAAMlC,GAAN,eAAArB,EAAA,sEAErCqB,EAAS,CACP3B,KAAMG,IAH6B,SAKjB4d,GAAarV,YAAY7E,GALR,OAK/BM,EAL+B,OAMrCxC,EAAS,CACP3B,KhDuBuB,gBgDtBvBa,KAAMsD,IAR6B,gDAWrCrC,QAAQC,IAAR,MAXqC,yDAAJ,uDAyBxB6G,GAAc,SAAAvE,GAAa,8CAAI,WAAM1C,GAAN,eAAArB,EAAA,sEAExCqB,EAAS,CACP3B,KAAMG,IAHgC,SAKb4d,GAAanV,YAAYvE,GALZ,OAKlC2Z,EALkC,OAMxCrc,EAAS,CACP3B,KhDDsB,egDEtBa,KAAMmd,IARgC,gDAWxClc,QAAQC,IAAR,MAXwC,yDAAJ,uDAe3BgH,GAAc,SAAAxH,GAAE,8CAAI,WAAMI,GAAN,eAAArB,EAAA,sEAE7BqB,EAAS,CACP3B,KAAMG,IAHqB,SAKT4d,GAAahV,YAAYxH,GALhB,OAKvB4C,EALuB,OAM7BxC,EAAS,CACP3B,KhDfuB,gBgDgBvBa,KAAMsD,IARqB,gDAW7BrC,QAAQC,IAAR,MAX6B,yDAAJ,uDAuChBkc,GAAqB,SAAA9a,GAAW,8CAAI,WAAMxB,GAAN,mBAAArB,EAAA,sEAE7CqB,EAAS,CACP3B,KAAMG,IAHqC,SAKnBoa,GAAcxU,MAAM5C,GALD,cAKvC+a,EALuC,OAM7Cpc,QAAQC,IAAImc,GANiC,SAOzBH,GAAahV,YAAY5F,EAAYuW,SAPZ,cAOvCvV,EAPuC,OAQ7CxC,EAAS,CACP3B,KhDxDuB,gBgDyDvBa,KAAMsD,IAVqC,UAYvB4Z,GAAa/U,mBAAmB7F,EAAYuW,SAZrB,QAYvCyE,EAZuC,OAa7Cxc,EAAS,CACP3B,KhD5D+B,wBgD6D/Ba,KAAMsd,IAfqC,kDAkB7Crc,QAAQC,IAAR,MAlB6C,0DAAJ,uDCG9Bqc,GAJwBxe,aANf,SAAAC,GACtB,MAAO,CACLyF,MAAOzF,EAAMyF,SAI+C,CAC9D2Y,uBADqCre,EAxGT,SAAC,GAAsC,IAApCye,EAAmC,EAAnCA,SAAUlW,EAAyB,EAAzBA,YAAa7C,EAAY,EAAZA,MAAY,EAChCsE,oBAAS,GADuB,mBAC3DC,EAD2D,KAChDC,EADgD,OAE1BF,mBAAS,MAFiB,mBAE3D0U,EAF2D,KAE7CC,EAF6C,KAG5DhF,EAAa,WACjBzP,GAAa,IAMf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjD8E,GAIP,IASM7E,EAAelU,EAAMmV,UAAUhJ,KAAI,SAAAtN,GAAK,MAAK,CACjD0J,IAAK1J,EAAMka,SACXvQ,KAAK,GAAD,OAAK3J,EAAMka,SAAX,cAAyBla,EAAMgE,aACnC3B,MAAOrC,EAAMka,aAMf,OACE,kBAACzT,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAjCgB,WAClBrB,GAAa,IAiCXe,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjD8E,IAIL,kBAACjT,EAAA,EAAD,2BACmBiT,EADnB,MACgClW,EADhC,WAGA,kBAACyC,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SAjCK,WAMf0S,GALoB,CAClBje,KAAM,QACN+F,MAAOuY,EACP5E,QAAS2E,MA8BL,kBAAC/S,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEhD,SAtBY,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC5BsF,EAAEuG,iBACFkM,EAAgB/X,IAqBN0L,WAAS,EACTC,QAAM,EACNvE,QAAS4L,KAGb,kBAAClO,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlM,KAAK,UAAb,qBCxBGwe,GApCa,SAAC,GAAe,IAAbra,EAAY,EAAZA,MAC7B,OACE,kBAACoP,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CACE4K,SAAUla,EAAMka,SAChBlW,YAAahE,EAAMgE,eAGvB,kBAACoL,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,iBAAYzI,EAAMka,WACvBla,EAAMkD,YADT,MACyBlD,EAAMgE,YAAa,MAG9C,kBAACoL,GAAA,EAAME,KAAP,KACGtP,EAAMuD,SADT,MACsBvD,EAAMqD,SAE5B,kBAAC+L,GAAA,EAAME,KAAP,KAAatP,EAAMyD,MACnB,kBAAC2L,GAAA,EAAME,KAAP,KAAatP,EAAM+W,mBACnB,kBAAC3H,GAAA,EAAME,KAAP,QCqBSgL,GAzCS,SAAC,GAAmB,IAAjBhE,EAAgB,EAAhBA,UACzB,OAAkB,OAAdA,EACK,yCAGP,kBAAC,IAAMzO,SAAP,KACE,sCACA,kBAACuH,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,YACA,kBAACF,GAAA,EAAME,KAAP,+BACA,kBAACF,GAAA,EAAME,KAAP,uBACA,kBAACF,GAAA,EAAME,KAAP,aACA,kBAACF,GAAA,EAAME,KAAP,mBAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGmG,EAAUhJ,KAAI,SAAAtN,GAAK,OAClB,kBAAC,GAAD,CAAqB0J,IAAK1J,EAAMka,SAAUla,MAAOA,WC8C9Cua,GAHe9e,aAnCN,SAAAC,GAAK,MAAK,CAChCyF,MAAOzF,EAAMyF,SAkCwC,CACrDqZ,mBdzDyB,SAAApd,GAAE,8CAAI,WAAMI,GAAN,iBAAArB,EAAA,sEAE7BqB,EAAS,CACP3B,KtCmE6B,wBsCjE/B2B,EAAS,CACP3B,KAAMG,IANqB,SAQTqa,EAAajY,YAAYhB,GARhB,cAQvB+D,EARuB,OAS7B3D,EAAS,CACP3B,KtC0DuB,gBsCzDvBa,KAAMyE,IAXqB,SAaLkV,EAAahY,oBAAoBjB,GAb5B,OAavBkZ,EAbuB,OAc7B9Y,EAAS,CACP3B,KtCsDgC,yBsCrDhCa,KAAM4Z,IAhBqB,kDAmB7B3Y,QAAQC,IAAR,MAnB6B,0DAAJ,wDcwDCnC,EA3DT,SAAC,GAAuC,IAArC2B,EAAoC,EAApCA,GAAI+D,EAAgC,EAAhCA,MAAOqZ,EAAyB,EAAzBA,mBAMjC,OALAzK,qBAAU,WACRyK,EAAmBpd,KAElB,CAACA,IAEuB,OAAvB+D,EAAMkX,aAEN,kBAACzK,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,sBAON,kBAAC5C,EAAA,EAAD,KACE,kBAAC,GAAD,CAAkB6I,SAAUrZ,EAAIib,aAAclX,EAAMkX,eACpD,kBAAC,GAAD,CAAiB/B,UAAWnV,EAAMmV,gB,UCuGzBmE,GALmBhf,aANV,SAAAC,GACtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAIyC,CACzD0M,qBLO2B,SAAAnc,GAAa,8CAAI,WAAMf,GAAN,eAAArB,EAAA,sEAE1CqB,EAAS,CACP3B,KAAMG,IAHkC,SAKhB4d,GAAalV,cAAcnG,GALX,OAKpCD,EALoC,OAM1CX,QAAQC,IAAIU,GACZd,EAAS,CACP3B,KhDzEsB,egD0EtBa,KAAM6B,IATkC,gDAY1CZ,QAAQC,IAAR,MAZ0C,yDAAJ,uDKNxCyH,uBAAwBN,IAFQtJ,EArHT,SAAC,GAInB,IAHLkf,EAGI,EAHJA,aACAD,EAEI,EAFJA,qBACArV,EACI,EADJA,uBACI,ECNmC,WAAO,IAAD,EACXI,mBAAS,IADE,mBACtCoS,EADsC,KAC3BC,EAD2B,KAIvCC,EAAuBC,cAAY,kBACvCC,aAAuB7B,GAActU,mBAAoB,QAErDkM,EAASkK,oBAAQ,sBACrB,sBAAA/b,EAAA,yDAC2B,IAArB0b,EAAUjV,OADhB,yCAEW,IAFX,gCAIWmV,EAAqBF,IAJhC,2CAQA,CAACA,IAEH,MAAO,CACLA,YACAC,eACA9J,UDd+B4M,GAAzB9C,EADJ,EACIA,aAAc9J,EADlB,EACkBA,OADlB,EAE8BvI,oBAAS,GAFvC,mBAEGC,EAFH,KAEcC,EAFd,OAGsCF,mBAAS,MAH/C,mBAGGoV,EAHH,KAGkBC,EAHlB,KAIE1F,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAEf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GAApD,iBAKJ,IAAIoD,EAAU,GAEZA,OADoBC,IAAlBzK,EAAO0K,OACC,GAEA1K,EAAO0K,OAAOpL,KAAI,SAAAoL,GAAM,MAAK,CACrChP,IAAKgP,EAAOjC,SACZmC,MAAM,IAAD,OAAMF,EAAOjC,SAAb,aAA0BiC,EAAOzV,YACtC4V,YAAaH,EAAOxV,YACpBN,OAAQ8V,EAAO9V,OACfP,MAAOqW,EAAOjC,SACdxT,WAAYyV,EAAOzV,eAGvB,IAcM6V,EAAqB,SAACnR,EAAD,GAAoB,IAAd+Q,EAAa,EAAbA,OAC/B/Q,EAAEuG,iBACF4M,EAAiBpC,IAGnB,OACE,kBAACjS,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GAApD,kBAKF,kBAACnO,EAAA,EAAD,sBAAuB0T,EAAa3W,YAApC,eACA,kBAACyC,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAKE,MAAN,KACE,yBAAKwK,UAAU,iBACb,kBAAC,KAAD,CACE7B,QAAShC,EAAOgC,QAChB+I,eAAgBD,EAChBE,eAAgB,SAAArR,GAAC,OAAImQ,EAAanQ,EAAEC,OAAOvF,QAC3C4W,kBAAmBH,EACnBN,QAASA,MAMf,kBAACrR,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlB,QA9CC,WACf,IAAMkU,EAAe,CACnBb,SAAUS,EAAaT,SACvBzD,SAAUoE,EAAcxY,MACxBY,WAAY4X,EAAc5X,YAE5ByX,EAAqBK,GACrB1V,EAAuB,GAAD,OACjBsV,EAAa3W,YADI,8BAEpB,WAEFwC,MAmCM,gBEwCK2R,GALoB1c,aANX,SAAAC,GACtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAI0C,CAC1DgN,sBPyB4B,SAAA7c,GAAc,8CAAI,WAAMX,GAAN,eAAArB,EAAA,sEAE5CqB,EAAS,CACP3B,KAAMG,IAHoC,SAKjB4d,GAAajV,eAAexG,GALX,OAKtCD,EALsC,OAM5CP,QAAQC,IAAIM,GACZV,EAAS,CACP3B,KhDxFuB,gBgDyFvBa,KAAMyB,IAToC,gDAY5CR,QAAQC,IAAR,MAZ4C,yDAAJ,uDOxB1CyH,uBAAwBN,IAFStJ,EAnHT,SAAC,GAIpB,IAHLkf,EAGI,EAHJA,aACAK,EAEI,EAFJA,sBACA3V,EACI,EADJA,uBACI,EAC6BuS,KAAzBE,EADJ,EACIA,aAAc9J,EADlB,EACkBA,OADlB,EAE8BvI,oBAAS,GAFvC,mBAEGC,EAFH,KAEcC,EAFd,OAGwCF,mBAAS,MAHjD,mBAGG6S,EAHH,KAGmBC,EAHnB,KAIEnD,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAEf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GAApD,kBAKJ,IAAIoD,EAAU,GAEZA,OADoBC,IAAlBzK,EAAO0K,OACC,GAEA1K,EAAO0K,OAAOpL,KAAI,SAAAoL,GAAM,MAAK,CACrChP,IAAKgP,EAAOC,UACZC,MAAM,IAAD,OAAMF,EAAOC,UAAb,aAA2BD,EAAOxV,aACvC2V,YAAaH,EAAOxV,YACpBb,MAAOqW,EAAOC,UACdzV,YAAawV,EAAOxV,gBAIxB,IAcM4V,EAAqB,SAACnR,EAAD,GAAoB,IAAd+Q,EAAa,EAAbA,OAC/B/Q,EAAEuG,iBACFqK,EAAkBG,IAGpB,OACE,kBAACjS,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GAApD,mBAKF,kBAACnO,EAAA,EAAD,sBAAuB0T,EAAa3W,YAApC,gBACA,kBAACyC,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAKE,MAAN,KACE,yBAAKwK,UAAU,iBACb,kBAAC,KAAD,CACE7B,QAAShC,EAAOgC,QAChB+I,eAAgBD,EAChBE,eAAgB,SAAArR,GAAC,OAAImQ,EAAanQ,EAAEC,OAAOvF,QAC3C4W,kBAAmBH,EACnBN,QAASA,MAIf,kBAACrR,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlB,QA5CC,WACf,IAAMqS,EAAgB,CACpBgB,SAAUS,EAAaT,SACvBvB,UAAWL,EAAejW,MAC1Ba,YAAaoV,EAAepV,aAE9B8X,EAAsB9B,GACtB7T,EAAuB,GAAD,OACjBsV,EAAa3W,YADI,+BAEpB,WAEFwC,MAiCM,gBCymBKyU,GANmBxf,aAPV,SAAAC,GACtB,MAAO,CACLsE,MAAOtE,EAAMsE,MACbkI,OAAQxM,EAAMwM,UAIyC,CACzD7C,uBAAwBN,GACxBmW,mBAAoBzW,GACpBhF,qBAHgChE,EApqBT,SAAC,GAMnB,IALLkf,EAKI,EALJA,aACA3a,EAII,EAJJA,MACAkI,EAGI,EAHJA,OACAgT,EAEI,EAFJA,mBACA7V,EACI,EADJA,uBACI,EAC4BI,oBAAS,GADrC,mBACGyH,EADH,KACaC,EADb,OAEwB1H,mBAASkV,EAAazZ,QAF9C,mBAEGA,EAFH,KAEWoW,EAFX,OAGsB7R,mBAASkV,EAAaxZ,OAH5C,mBAGGA,EAHH,KAGUga,EAHV,OAIgC1V,mBAASkV,EAAa3W,aAJtD,mBAIGoX,EAJH,KAIeC,EAJf,OAKkB5V,mBAAS6V,KAAKC,MAAMZ,EAAa/X,OAAS,KAL5D,mBAKG4Y,EALH,KAKQC,EALR,OAMkBhW,mBAASkV,EAAa/X,OAAS,IANjD,mBAMG8Y,EANH,KAMQC,EANR,OAO0BlW,mBAASkV,EAAa/W,SAPhD,mBAOGA,EAPH,KAOYgY,EAPZ,OAQsCnW,mBACxCkV,EAAajX,gBATX,mBAQGmY,EARH,KAQkBC,EARlB,OAWwBrW,mBAAS,MAXjC,mBAWGsW,EAXH,KAWWC,EAXX,OAYwBvW,mBAASkV,EAAatX,SAZ9C,mBAYG4Y,EAZH,KAYWC,GAZX,QAa0BzW,mBAASkV,EAAapX,UAbhD,qBAaG4Y,GAbH,MAaYC,GAbZ,SAcoB3W,mBAAS,MAd7B,qBAcGvB,GAdH,MAcSuV,GAdT,SAeoBhU,mBAASkV,EAAalX,MAf1C,qBAeGA,GAfH,MAeS4Y,GAfT,SAgB0B5W,mBAASkV,EAAa2B,SAhBhD,qBAgBGA,GAhBH,MAgBYC,GAhBZ,MAkBJxM,qBAAU,WACkB,OAAtB4K,EAAazW,KACfuV,GAAQ,MAERA,GAAQ9W,SAASgY,EAAazW,SAE/B,CAACyW,EAAazW,OAEjB6L,qBAAU,WACoB,OAAxB4K,EAAaoB,OACfC,EAAU,MAEVA,EACErB,EAAaoB,OACVS,QAAQ,MAAO,IACfA,QAAQ,OAAQ,MAChBA,QAAQ,MAAO,OAGrB,CAAC7B,EAAaoB,SAEjB,IAoUMU,GAAc,WAClB,IAAMC,EAAc,CAClBxC,SAAUS,EAAaT,SACvB/V,UAAW+D,EAAOC,cAAc/K,GAChCwF,OAAQ+X,EAAa/X,OACrBzC,cAAe+H,EAAOA,OAAOtF,OAAS,GAExCnD,GAAiBid,GACjBrX,EAAuB,GAAD,OACjBsV,EAAa3W,YADI,kCAC8BkE,EAAOC,cAAcO,cACvE,WAEFyE,GAAY,IAcd,OAAqB,OAAjBwN,EAEA,kBAACrK,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,qBAIFtD,EACK,kBAAC,IAAD,CAAUzE,GAAE,mBAAcP,EAAOC,cAAc/K,MAGtD,kBAACsQ,GAAA,EAAD,CAAMgD,QAAS,GACb,kBAAChD,GAAA,EAAKC,OAAN,KACE,6CACA,kBAACxG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTS,UAAQ,EACR3F,MAAOrC,EAAM2a,aAAa,GAAGzZ,OAC7BrF,KAAK,OACL4L,YAAavG,EACbwG,SAAU,SAAAC,GAAC,OAAI2P,EAAU3P,EAAEC,OAAOvF,QAClC0B,MAAM,YAGR,8BACE,kBAAC,IAAD,CACEjI,MAAO,CACL4d,OAAQ,UACRC,SAAU,SACV5d,MAAO,OACPwM,YAAa,QAEfE,GAAE,oBAAekS,EAAahC,YAPhC,6BAYF,8BACE,kBAAC,GAAD,CAAmBgC,aAAcA,KAGnC,kBAACxT,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,yCACA,kBAAC5J,EAAA,EAAD,CACES,UAAQ,EACR3F,MAAOrC,EAAM2a,aAAa,GAAGxZ,MAC7BtF,KAAK,OACL4L,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIwT,EAASxT,EAAEC,OAAOvF,UAEnC,8BACE,kBAAC,IAAD,CACEvG,MAAO,CACL4d,OAAQ,UACRC,SAAU,SACV5d,MAAO,OACPwM,YAAa,QAEfE,GAAE,mBAAckS,EAAalE,WAP/B,4BAYF,8BACE,kBAAC,GAAD,CAAkBkE,aAAcA,MAGpC,kBAACxT,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,wCACA,kBAAC5J,EAAA,EAAD,CACEO,aAAcsT,EACdvf,KAAK,OACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAI0T,EAAc1T,EAAEC,OAAOvF,WAG1C,kBAAC8E,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,mDACA,kBAAC5J,EAAA,EAAD,CACEoV,UAAW,EACX7U,aAAc0T,EACd3f,KAAK,SACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI8T,EAAO9T,EAAEC,OAAOvF,WAGnC,kBAAC8E,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,mDACA,kBAAC5J,EAAA,EAAD,CACEO,aAAc4T,EACdiB,UAAW,EACX9gB,KAAK,SACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAIgU,EAAOhU,EAAEC,OAAOvF,YAIrC,kBAAC8E,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,wCACA,kBAAC5J,EAAA,EAAD,CACEoV,UAAW,EACX7U,aAAcmU,EACdpgB,KAAK,SACL4L,YAAY,8BACZC,SAAU,SAAAC,GAAC,OAAIuU,GAAUvU,EAAEC,OAAOvF,WAGtC,kBAAC8E,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,yCACA,kBAAC5J,EAAA,EAAD,CACEO,aAAcqU,GACdQ,UAAW,EACX9gB,KAAK,SACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIyU,GAAWzU,EAAEC,OAAOvF,YAIzC,kBAAC8E,EAAA,EAAKE,MAAN,KACE,yFACA,kBAACuV,GAAA,EAAD,CACE9U,aAAciU,EACdrU,SAAU,SAAAC,GAAC,OAAIqU,EAAUrU,EAAEC,OAAOvF,QAClCoF,YAAY,2BAGhB,kBAACN,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,8DACA,kBAACzG,EAAA,EAAD,CACEjD,YAAY,2BACZqG,aAAa,EACbhG,aAAclE,EACdmK,WAAS,EACTtE,QAxeS,CACrB,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,MACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,YACNtH,MAAO,OA2dGqF,SAxdK,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC3B4L,EAAMC,iBACN0N,EAAWvZ,OAydH,kBAAC8E,EAAA,EAAKE,MAAN,KACE,+CACA,kBAACqD,EAAA,EAAD,CACEjD,YAAY,0BACZqG,aAAa,EACbhG,aAAc+T,EACd9N,WAAS,EACTC,QAAM,EACNvE,QA/de,CAC3B,CAAEE,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,mBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iCAAkCtH,MAAO,MACjD,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,wCAAyCtH,MAAO,MACxD,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,oCAAqCtH,MAAO,MACpD,CAAEsH,KAAM,gCAAiCtH,MAAO,MAChD,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yCAA0CtH,MAAO,MACzD,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,6CAA8CtH,MAAO,MAC7D,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,kBAAmBtH,MAAO,MAClC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,+CAAgDtH,MAAO,MAC/D,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,+BAAgCtH,MAAO,MAC/C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,uCAAwCtH,MAAO,MACvD,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,OA8OfqF,SA5OW,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACjC4L,EAAMC,iBACN4N,EAAiBzZ,QA8OX,kBAAC8E,EAAA,EAAKE,MAAN,KACE,uCACA,kBAACE,EAAA,EAAD,CACEO,aAAcrE,GACdkZ,UAAW,GACX9gB,KAAK,OACL4L,YAAY,UACZC,SAAU,SAAAC,GAAC,OAAI0U,GAAQ1U,EAAEC,OAAOvF,WAGpC,kBAAC8E,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,wCACA,kBAAC5J,EAAA,EAAD,CACEO,aAAc5D,GACdyY,UAAW,EACX9gB,KAAK,SACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAI8R,GAAQ9R,EAAEC,OAAOvF,WAGpC,kBAAC8E,EAAA,EAAKE,MAAN,KACE,gDACA,kBAACuV,GAAA,EAAD,CACE9U,aAAcwU,GACd5U,SAAU,SAAAC,GAAC,OAAI4U,GAAW5U,EAAEC,OAAOvF,QACnCoF,YAAY,sBAGhB,kBAACM,EAAA,EAAD,CAaEhM,MAAM,QACN8K,QAtRU,WAKlB,GAHe,OAAX3F,GACFmE,EAAuB,8BAA+B,QAEzC,OAAX0W,EAAiB,CACnB,IAAMnZ,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GACvCxb,EAAgB,CACpBgD,YAAahC,EACb+B,WAAY9B,EACZwX,UAAWgC,EAAahC,UACxBlC,SAAUkE,EAAalE,SACvByD,SAAUS,EAAaT,SACvBlW,YAAaoX,EACbxY,SACAgB,UACAF,eAAgBmY,EAChBE,SACA1Y,QAAS4Y,EACT1Y,SAAU4Y,GACVjY,QACAT,QACA6Y,YAEFpB,EAAmBhb,GACnBmF,EAAuB,UAAD,OACVnF,EAAc8D,YADJ,0BAEpB,eAEG,CACL,IAAMpB,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GACvCxb,EAAgB,CACpBgD,YAAahC,EACb+B,WAAY9B,EACZwX,UAAWgC,EAAahC,UACxBlC,SAAUkE,EAAalE,SACvByD,SAAUS,EAAaT,SACvBlW,YAAaoX,EACbxY,SACAgB,UACAF,eAAgBmY,EAChBE,OAAO,KAAD,OAAOA,EAAOS,QAAQ,MAAO,OAA7B,MACNnZ,QAAS4Y,EACT1Y,SAAU4Y,GACVjY,QACAT,QACA6Y,YAEFpB,EAAmBhb,GACnBmF,EAAuB,UAAD,OACVnF,EAAc8D,YADJ,0BAEpB,cAqNE,sBAjMuB,OAAzBkE,EAAOC,cACF,KAGP,kBAACJ,EAAA,EAAD,CAAQlB,QAAS4V,GAAa1gB,MAAM,QAApC,gCChYS8gB,GArBS,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACzB,OACE,kBAAC1N,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KAAawN,EAAIlU,cACjB,kBAACwG,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,mBAAcqU,EAAI3Y,YAAc2Y,EAAIpU,iBCmCrCqU,GAxCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OAAoB,OAAhBA,EAEA,kBAAC1M,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,qBAKJ,kBAAC,IAAM3I,SAAP,KACE,8CACA,kBAACuH,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,kCACA,kBAACF,GAAA,EAAME,KAAP,kBAGJ,kBAACF,GAAA,EAAMe,KAAP,KACG6M,EAAY1P,KAAI,SAAAwP,GAAG,OAClB,kBAAC,GAAD,CAAiBpT,IAAKoT,EAAI3Y,UAAW2Y,IAAKA,WC6CvCG,GAJexhB,aANN,SAAAC,GACtB,MAAO,CACLsE,MAAOtE,EAAMsE,SAIsC,CACrDkd,mBAAoBtY,GACpBuY,0BXmBgC,SAAA/f,GAAE,8CAAI,WAAMI,GAAN,eAAArB,EAAA,sEAEpCqB,EAAS,CACP3B,KhDxB6B,wBgD0B/B2B,EAAS,CACP3B,KAAMG,IAN4B,SAQd4d,GAAa/U,mBAAmBzH,GARlB,OAQ9B4c,EAR8B,OASpCxc,EAAS,CACP3B,KhDhC+B,wBgDiC/Ba,KAAMsd,IAX4B,gDAcpCrc,QAAQC,IAAR,MAdoC,yDAAJ,wDWrBNnC,EA1DT,SAAC,GAKf,IAJLuE,EAII,EAJJA,MACA5C,EAGI,EAHJA,GACA8f,EAEI,EAFJA,mBACAC,EACI,EADJA,0BAQA,OANApN,qBAAU,WACRoN,EAA0Bxa,SAASvF,IACnC8f,EAAmBva,SAASvF,MAE3B,IAEwB,OAAvB4C,EAAM2a,cAA+C,OAAtB3a,EAAMgd,YAErC,kBAACpP,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,sBAON,kBAAC5C,EAAA,EAAD,KACE,kBAAC,GAAD,CAAkB+M,aAAc3a,EAAM2a,aAAa,KACnD,kBAAC,GAAD,CAAaqC,YAAahd,EAAMgd,kBCqBvBvhB,eAAQ,KAAM,CAAE2hB,ShDRP,SAAA9d,GAAI,8CAAI,WAAM9B,GAAN,eAAArB,EAAA,sEAE5BqB,EAAS,CACP3B,KAAMG,IAHoB,SAKNqhB,EAAaxf,MAAMyB,GALb,OAKtBsR,EALsB,OAM5BzH,OAAOC,aAAakU,QAAQ,aAAcC,KAAKC,UAAU5M,IAGzDpT,EAAS,CACP3B,KZtDe,QYuDfa,KAAMkU,EACNZ,SAAS,IAZiB,gDAmB5BxS,EAAS,CACP3B,KAAM,mBACNa,KANc,CACdd,QAAS,6BACTC,KAAM,UAMRoJ,YAAW,WACTzH,EAAS,CACP3B,KAAM,yBAEP,KA3ByB,yDAAJ,uDgDQakJ,oBAA1BtJ,EA7CG,SAAC,GAAkB,IAAhB2hB,EAAe,EAAfA,SAAe,EACF3X,mBAAS,IADP,mBAC3BqL,EAD2B,KACjBC,EADiB,OAEFtL,mBAAS,IAFP,mBAE3BG,EAF2B,KAEjBC,EAFiB,KAK5B4X,EAAW,uCAAG,WAAMxP,GAAN,SAAA9R,EAAA,sDAClB8R,EAAMC,iBAKNkP,EAJa,CACXtM,WACAlL,aAJgB,2CAAH,sDAQjB,OACE,6BACE,kEACA,qDACA,kBAAC,GAAD,MACA,kBAACuB,EAAA,EAAD,CAAMC,SAAUqW,GACd,kBAACtW,EAAA,EAAKE,MAAN,CACEtD,MAAM,0BACNuD,QAASC,IACT1L,KAAK,OACL4L,YAAY,6BACZC,SAAU,SAAAC,GAAC,OAAIoJ,EAAYpJ,EAAEC,OAAOvF,MAAMqb,WAE5C,kBAACvW,EAAA,EAAKE,MAAN,CACEtD,MAAM,WACNuD,QAASC,IACT1L,KAAK,WACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAI9B,EAAY8B,EAAEC,OAAOvF,MAAMqb,WAE5C,kBAAC3V,EAAA,EAAD,CAAQhM,MAAM,QAAQF,KAAK,UAA3B,iBCuFO8hB,GALwBliB,aAPf,SAAAC,GACtB,MAAO,CACLmU,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,SAI+C,CAC9DoU,2BAA4BnD,GAC5B8O,8BCtGoC,SAAAjd,GAAM,8CAAI,WAAMnD,GAAN,iBAAArB,EAAA,sEAE5CqB,EAAS,CACP3B,KAAMG,IAHoC,SAKZ0P,GAAchL,uBAC5CC,GAN0C,cAKtCkd,EALsC,gBAQtBnS,GAAclM,kBARQ,OAQtCuP,EARsC,OAS5CvR,EAAS,CACP3B,K9DdkC,2B8DelCa,KAAMqS,IAERvR,EAAS,CACP3B,K9DjBkC,2B8DkBlCa,KAAMmhB,IAfoC,kDAkB5ClgB,QAAQC,IAAR,MAlB4C,0DAAJ,wDDoGLnC,EA3GT,SAAC,GAKxB,IAJLoU,EAII,EAJJA,YACAhS,EAGI,EAHJA,MACAoU,EAEI,EAFJA,2BACA2L,EACI,EADJA,8BACI,EACgCnY,mBAAS,IAAIoF,MAD7C,mBACGiT,EADH,KACeC,EADf,KAGJhO,qBAAU,WACRkC,EAA2BtJ,KAAOmV,GAAYjV,OAAO,cAEpD,CAACiV,IAYJ,OAAgC,OAA5BjO,EAAYA,YAEZ,kBAACjC,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQhH,KAAK,UAAb,kBAMoB,IAAxBqG,EAAYG,QAEZ,kBAACpC,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQhH,KAAK,UAAb,iBAON,6BACE,kBAACvC,EAAA,EAAD,mCACA,kBAACE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,KACE,kBAAC,KAAD,CACEmH,SAAUsP,EACVrP,WAAW,YACX/G,SAAU,SAAAtI,GAAI,OAAI2e,EAAc3e,IAChC4e,qBAAmB,EACnB1P,OAAQC,QAGZ,kBAACpH,EAAA,EAAKE,MAAN,MACA,kBAACF,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQhM,MAAM,OAAO8K,QA7CL,WACtB,IAAMlG,EAAS,CACbqL,QAASnO,EAAMT,GACfwR,OAAQ,EACRqP,OAAQtV,KAAOmV,GAAYjV,OAAO,WAClC/H,SAAS,GAAD,OAAK6H,KAAO,IAAIkC,MAAQhC,OAAO,kBAA/B,SAEV+U,EAA8Bjd,KAsCxB,aE9BKud,GAvCgB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAIhC,OACE,kBAAC/O,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KAAa6O,EAAKC,YAClB,kBAAChP,GAAA,EAAME,KAAP,KACG6O,EAAKnY,WADR,IACqBmY,EAAKhY,WAE1B,kBAACiJ,GAAA,EAAME,KAAP,KAAa3G,KAAOwV,EAAKF,QAAQpV,OAAO,YACxC,kBAACuG,GAAA,EAAME,KAAP,KACE,4BACEzT,KAAK,SACLgW,UAAU,WACVhL,QAAS,kBAdQ/F,EAceqd,EAAKrd,cAb3CD,GAAeC,GADQ,IAAAA,IAgBhBqd,EAAKrd,aCyEVyQ,GAAqB,CACzB8M,uBFzF6B,yDAAM,WAAM7gB,GAAN,eAAArB,EAAA,sEAEjCqB,EAAS,CACP3B,KAAMG,IAHyB,SAKX0P,GAAclM,kBALH,OAK3BuP,EAL2B,OAOjCvR,EAAS,CACP3B,K9DIkC,2B8DHlCa,KAAMqS,IATyB,gDAYjCpR,QAAQC,IAAR,MAZiC,yDAAN,wDEiGhB0gB,GALqB7iB,aAXZ,SAAAC,GACtB,MAAO,CACLmU,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,SAUf0T,GAFkC9V,EA5FT,SAAC,GAAoD,IAAlDoU,EAAiD,EAAjDA,YAAahS,EAAoC,EAApCA,MAAOwgB,EAA6B,EAA7BA,uBAMhD,OALAtO,qBAAU,WACRsO,MAEC,CAACxO,EAAY0O,aAEuB,OAAnC1O,EAAY2O,mBAEZ,kBAAC5Q,EAAA,EAAD,KACE,kBAAC0C,GAAA,EAAD,CAAQC,QAAM,EAACrG,UAAQ,GACrB,kBAACsG,GAAA,EAAD,CAAQhH,KAAK,UAAb,iBAKY,IAAhB3L,EAAMiM,MAEN,kBAAC8D,EAAA,EAAD,KACE,+CACA,kBAAC,GAAD,MACA,kBAACwB,GAAA,EAAD,KACE,kBAACA,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,wCACA,kBAACF,GAAA,EAAME,KAAP,0BACA,kBAACF,GAAA,EAAME,KAAP,2BACA,kBAACF,GAAA,EAAME,KAAP,yBAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGN,EAAY2O,mBAAmBlR,KAAI,SAAA6Q,GAAI,OACtC,kBAAC,GAAD,CAAwBzU,IAAKyU,EAAK/gB,GAAI+gB,KAAMA,UAOjD,QCUIld,GAAsB,SAAAD,GAAK,8CAAI,WAAMxD,GAAN,iBAAArB,EAAA,+EAGlBia,GAAcnV,oBAAoBD,GAHhB,OAGlCwX,EAHkC,OAIxC7a,QAAQC,IAAI4a,EAAQA,QAAQ5V,QAE1B2W,EAD6B,IAA3Bf,EAAQA,QAAQ5V,OACV,gBAC8B,SAA7B4V,EAAQA,QAAQ,GAAGiG,MACpBjG,EAAQA,QAAQ,GAAGiG,MACW,SAA7BjG,EAAQA,QAAQ,GAAGiG,MACpBjG,EAAQA,QAAQ,GAAGiG,MACW,SAA7BjG,EAAQA,QAAQ,GAAGiG,MACpBjG,EAAQA,QAAQ,GAAGiG,MACW,SAA7BjG,EAAQA,QAAQ,GAAGiG,MACpBjG,EAAQA,QAAQ,GAAGiG,MACW,SAA7BjG,EAAQA,QAAQ,GAAGiG,MACpBjG,EAAQA,QAAQ,GAAGiG,MAEnB,gBAEV9gB,QAAQC,IAAI2b,GACZ/b,EAAS,CACP3B,KjE1B2B,oBiE2B3Ba,KAAM6c,IAvBgC,kDA0BxC5b,QAAQC,IAAR,MA1BwC,0DAAJ,uDA8B3B8gB,GAAoB,yDAAM,WAAMlhB,GAAN,SAAArB,EAAA,sDACrC,IACEqB,EAAS,CACP3B,KjEpC6B,wBiEsC/B,MAAO2J,GACP7H,QAAQC,IAAI4H,GANuB,2CAAN,uDCooBlBmZ,GAPcljB,aARL,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,OACd2H,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,MACbmQ,OAAQtS,EAAMsS,UAGoC,CACpD3I,uBAAwBN,GACxB6Z,oBlBrqB0B,SAAAlf,GAAU,6BAAI,4BAAAvD,EAAA,+EAElByd,GAAapV,aAAa9E,GAFR,OAEhCM,EAFgC,OAGtCrC,QAAQC,IAAIoC,GAH0B,gDAKtCrC,QAAQC,IAAR,MALsC,0DkBsqBxCihB,mBAAoBta,GACpBua,2BAA4B7d,IAJDxF,EAnsBT,SAAC,GAQd,IAPLuS,EAOI,EAPJA,OACAnQ,EAMI,EANJA,MACAqK,EAKI,EALJA,OACA7C,EAII,EAJJA,uBACAuZ,EAGI,EAHJA,oBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,2BACI,EAC8BrZ,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEwBF,mBAAS,IAFjC,mBAEGvE,EAFH,KAEWoW,EAFX,OAGsB7R,mBAAS,IAH/B,mBAGGtE,EAHH,KAGUga,EAHV,OAIsB1V,mBAAS,IAJ/B,mBAIGzF,EAJH,KAIU+e,EAJV,OAKkBtZ,mBAAS,IAL3B,mBAKG+V,EALH,KAKQC,EALR,OAMkBhW,mBAAS,IAN3B,mBAMGiW,EANH,KAMQC,EANR,OAO0BlW,mBAAS,IAPnC,mBAOG7B,EAPH,KAOYgY,EAPZ,OAQsCnW,mBAAS,IAR/C,mBAQGoW,EARH,KAQkBC,EARlB,OASwBrW,mBAAS,IATjC,mBASGsW,EATH,KASWC,EATX,OAUwBvW,mBAAS,IAVjC,oBAUGwW,GAVH,MAUWC,GAVX,SAW0BzW,mBAAS,IAXnC,qBAWG0W,GAXH,MAWYC,GAXZ,SAYoB3W,mBAAS,IAZ7B,qBAYGvB,GAZH,MAYSuV,GAZT,SAasBhU,mBAAS,IAb/B,qBAaG1B,GAbH,MAaUuV,GAbV,SAcsB7T,mBAAS,IAd/B,qBAcG8T,GAdH,MAcUC,GAdV,SAeoB/T,mBAAS,IAf7B,qBAeGhC,GAfH,MAeS4Y,GAfT,SAgB0B5W,mBAAS,IAhBnC,qBAgBG6W,GAhBH,MAgBYC,GAhBZ,MAiBJxM,qBAAU,WACoB,OAAxB/B,EAAOgR,aACTxF,GAAS,IAETA,GAASxL,EAAOgR,gBAEjB,CAAChR,EAAOgR,eAEX,IAGMxY,GAAc,WAClBb,GAAa,IAsDTsZ,GAAqB,WAEV,OAAX/d,GACFmE,EAAuB,8BAA+B,QAExD,IAAMzC,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GAC7C,GAAe,OAAXK,EAAiB,CACnB,IAAMrc,EAAa,CACjBwD,YAAahC,EACb+B,WAAY9B,EACZ6C,YAAahE,EACb4C,SACAgB,UACAF,eAAgBmY,EAChBE,SACA1Y,QAAS4Y,GACT1Y,SAAU4Y,GACVjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAnY,UAAW+D,EAAOC,cAAc/K,GAChC4O,QAASnO,EAAMT,GACf+C,cAAe+H,EAAOA,OAAOtF,OAAS,GAExCic,EAAmBnf,GACnB2F,EAAuB,GAAD,OACjB3F,EAAWsE,YADM,iDAC2CkE,EAAOC,cAAcO,aADhE,KAEpB,WAEFlC,SACK,CACL,IAAM9G,EAAa,CACjBwD,YAAahC,EACb+B,WAAY9B,EACZ6C,YAAahE,EACb4C,SACAgB,UACAF,eAAgBmY,EAChBE,OAAO,KAAD,OAAOA,EAAOS,QAAQ,MAAO,OAA7B,MACNnZ,QAAS4Y,GACT1Y,SAAU4Y,GACVjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAnY,UAAW+D,EAAOC,cAAc/K,GAChC4O,QAASnO,EAAMT,GACf+C,cAAe+H,EAAOA,OAAOtF,OAAS,GAExCic,EAAmBnf,GACnB2F,EAAuB,GAAD,OACjB3F,EAAWsE,YADM,iDAC2CkE,EAAOC,cAAcO,aADhE,KAEpB,WAEFlC,OAmTJ,OACE,kBAACC,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTJ,QACE,kBAACqB,EAAA,EAAD,CAAQhM,MAAM,OAAO8K,QA3aR,WACjBlB,GAAa,KA0aT,0BAIFqB,QAASR,IAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,2BAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SA5aQ,WAEH,OAAXlG,GACFmE,EAAuB,8BAA+B,QAExD,IAAMzC,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GAC7C,GAAe,OAAXK,EAAiB,CACnB,IAAMrc,EAAa,CACjBwD,YAAahC,EACb+B,WAAY9B,EACZ6C,YAAahE,EACb4C,SACAgB,UACAF,eAAgBmY,EAChBE,SACA1Y,QAASV,SAASsZ,IAClB1Y,SAAUZ,SAASwZ,IACnBjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAtQ,QAASnO,EAAMT,IAEjBwhB,EAAoBlf,GACpB2F,EAAuB,GAAD,OAAI3F,EAAWsE,YAAf,gBAAuC,WAC7DwC,SACK,CACL,IAAM9G,EAAa,CACjBwD,YAAahC,EACb+B,WAAY9B,EACZ6C,YAAahE,EACb4C,SACAgB,UACAF,eAAgBmY,EAChBE,OAAO,KAAD,OAAOA,EAAOS,QAAQ,MAAO,OAA7B,MACNnZ,QAAS4Y,GACT1Y,SAAU4Y,GACVjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAtQ,QAASnO,EAAMT,IAEjBwhB,EAAoBlf,GACpB2F,EAAuB,GAAD,OAAI3F,EAAWsE,YAAf,gBAAuC,WAC7DwC,QA8XI,kBAACW,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOnB,EACPrF,KAAK,OACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAI2P,EAAU3P,EAAEC,OAAOvF,QAClC0B,MAAM,YAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOlB,EACPtF,KAAK,OACL4L,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIwT,EAASxT,EAAEC,OAAOvF,QACjC0B,MAAM,WAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOrC,EACPnE,KAAK,OACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAIoX,EAASpX,EAAEC,OAAOvF,QACjC0B,MAAM,UAER,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACToV,UAAW,EACXta,MAAOmZ,EACP3f,KAAK,SACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI8T,EAAO9T,EAAEC,OAAOvF,QAC/B0B,MAAM,qBAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOqZ,EACPiB,UAAW,EACX9gB,KAAK,SACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAIgU,EAAOhU,EAAEC,OAAOvF,QAC/B0B,MAAM,sBAGV,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACToV,UAAW,EACXta,MAAO4Z,GACPpgB,KAAK,SACL4L,YAAY,8BACZC,SAAU,SAAAC,GAAC,OAAIuU,GAAUvU,EAAEC,OAAOvF,QAClC0B,MAAM,UAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAO8Z,GACPQ,UAAW,EACX9gB,KAAK,SACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIyU,GAAWzU,EAAEC,OAAOvF,QACnC0B,MAAM,YAGV,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASsV,KACTlV,SAAU,SAAAC,GAAC,OAAIqU,EAAUrU,EAAEC,OAAOvF,QAClCoF,YAAY,wBACZ1D,MAAM,2DAER,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASoD,IACTjD,YAAY,2BACZqG,aAAa,EACbzL,MAAOuB,EACPmK,WAAS,EACTtE,QAvXW,CACrB,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,MACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,YACNtH,MAAO,OA0WCqF,SAvWO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC3B4L,EAAMC,iBACN0N,EAAWvZ,IAsWD0B,MAAM,gCAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTjD,YAAY,0BACZqG,aAAa,EACbzL,MAAOwZ,EACP9N,WAAS,EACTC,QAAM,EACNvE,QA7WiB,CAC3B,CAAEE,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,mBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iCAAkCtH,MAAO,MACjD,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,wCAAyCtH,MAAO,MACxD,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,oCAAqCtH,MAAO,MACpD,CAAEsH,KAAM,gCAAiCtH,MAAO,MAChD,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yCAA0CtH,MAAO,MACzD,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,6CAA8CtH,MAAO,MAC7D,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,kBAAmBtH,MAAO,MAClC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,+CAAgDtH,MAAO,MAC/D,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,+BAAgCtH,MAAO,MAC/C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,uCAAwCtH,MAAO,MACvD,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,OA4HjBqF,SA1Ha,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACjC4L,EAAMC,iBACN4N,EAAiBzZ,IAyHP0B,MAAM,kBAGV,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAO0B,GACPlI,KAAK,OACL4L,YAAY,gBACZC,SAAU,SAAAC,GAAC,OAAI2R,GAAS3R,EAAEC,OAAOvF,QACjC0B,MAAM,eAER,kBAACoD,EAAA,EAAKE,MAAN,CAAY8J,UAAQ,GAClB,2BAAOrV,MAAO,CAAEsM,QAAS,WAAzB,aACA,kBAACL,EAAA,EAAD,CACElB,QAAS,SAAAc,GAAC,OAAeA,EAAEuG,sBAjIrC4Q,EAJc,CACZ5d,SACAC,WAoIQqI,KAAK,OACL0H,QAAQ,QACRpV,MAAO,CAAE0M,aAAc,WAJzB,6BAQA,kBAACjB,EAAA,EAAD,CACElF,MAAOkX,GACP1d,KAAK,OACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI6R,GAAS7R,EAAEC,OAAOvF,WAGrC,kBAAC8E,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTlF,MAAOoB,GACPkZ,UAAW,GACX9gB,KAAK,OACL4L,YAAY,UACZC,SAAU,SAAAC,GAAC,OAAI0U,GAAQ1U,EAAEC,OAAOvF,QAChC0B,MAAM,SAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAO6B,GACPyY,UAAW,EACX9gB,KAAK,SACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAI8R,GAAQ9R,EAAEC,OAAOvF,QAChC0B,MAAM,UAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASsV,KACTlV,SAAU,SAAAC,GAAC,OAAI4U,GAAW5U,EAAEC,OAAOvF,QACnCoF,YAAY,mBACZ1D,MAAM,kBAER,kBAACgE,EAAA,EAAD,CACEC,UACG9G,IACAC,IACAnB,IACAmc,KACAF,KACAT,IACAE,IACA3X,KACAwV,KACArV,GAEHnI,MAAM,OACNF,KAAK,UAdP,YAnduB,OAAzBqM,EAAOC,cACF,KAGP,kBAACJ,EAAA,EAAD,CACEC,UACG9G,IACAC,IACAnB,IACAmc,KACAF,KACAT,IACAE,IACA3X,KACAwV,KACArV,GAEH2C,QAASoY,GACTljB,MAAM,SAdR,4CC3FSmjB,GAJazjB,YAAQ,KAAM,CACxC0jB,sBFlD4B,SAAAzd,GAAY,8CAAI,WAAMlE,GAAN,eAAArB,EAAA,sEAE1CqB,EAAS,CACP3B,KjEkB4B,uBiErBY,SAKpBua,GAAc3U,eAAeC,GALT,OAKpC8W,EALoC,OAM1Chb,EAAS,CACP3B,KjEY0B,mBiEX1Ba,KAAM8b,IARkC,gDAW1C7a,QAAQC,IAAR,MAX0C,yDAAJ,wDEiDdnC,EAxET,SAAC,GAA+B,IAA7B0jB,EAA4B,EAA5BA,sBAA4B,EACR1Z,mBAAS,IADD,mBACzC2Z,EADyC,KAC3BC,EAD2B,OAER5Z,mBAAS,MAFD,mBAEzC6Z,EAFyC,KAE3BC,EAF2B,KAiChD,OACE,kBAAC7R,GAAA,EAAD,CAAMgD,QAAS,GACb,kBAAChD,GAAA,EAAKC,OAAN,KACE,kBAACxG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTE,YAAY,cACZ5L,KAAK,OACLwG,MAAO+c,EACP1X,SAAU,SAAAC,GAAC,OAAI0X,EAAgB1X,EAAEC,OAAOvF,QACxC0B,MAAM,aAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACToD,aAAW,EACXC,WAAS,EACTjG,aAAcwX,EACd7V,QA9CkB,CAC1B,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,EACLC,KAAM,UACNtH,MAAO,MAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,OAiCDqF,SA9Bc,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC5BsF,EAAEuG,iBACFqR,EAAgBld,IA6BR0B,MAAM,gDAER,kBAACgE,EAAA,EAAD,CAAQhM,MAAM,OAAO8K,QA5BR,WAKnBsY,EAJqB,CACnBne,MAAOoe,EACPzd,KAAM2d,MAyBF,SAKJ,kBAAC5R,GAAA,EAAKC,OAAN,KACE,0BAAM7R,MAAO,CAAEuM,MAAO,UACpB,kBAAC,GAAD,YCqEKmX,GANe/jB,aAPN,SAAAC,GAEtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAIqC,CACrDyR,2BzBvFiC,SAAAzgB,GAAW,8CAAI,WAAMxB,GAAN,iBAAArB,EAAA,sEAE9CqB,EAAS,CACP3B,KAAMG,IAHsC,SAKxCoa,GAAcxU,MAAM5C,GALoB,uBAMzBmY,EAAcnZ,aAAagB,EAAYuW,SANd,cAMxCrU,EANwC,OAO9C1D,EAAS,CACP3B,K3CoBwB,iB2CnBxBa,KAAMwE,IATsC,UAWtBiW,EAAclZ,kBACpCe,EAAYuW,SAZgC,QAWxCqB,EAXwC,OAc9CpZ,EAAS,CACP3B,K3CckC,2B2CblCa,KAAMka,IAhBsC,kDAmB9CjZ,QAAQC,IAAR,MAnB8C,0DAAJ,uDyBwF5C8hB,yBzBjE+B,SAAA1gB,GAAW,8CAAI,WAAMxB,GAAN,SAAArB,EAAA,sDAC9CqB,EAAS,CACP3B,K3CMyB,gB2CLzBa,KAAMsC,IAHsC,2CAAJ,uDyBkE1CqG,uBAAwBN,IAHItJ,EAxHT,SAAC,GAOf,IANLkd,EAMI,EANJA,UACAzV,EAKI,EALJA,YACA8K,EAII,EAJJA,OACAyR,EAGI,EAHJA,2BACAC,EAEI,EAFJA,yBACAra,EACI,EADJA,uBACI,EAE8BI,oBAAS,GAFvC,mBAEGC,EAFH,KAEcC,EAFd,OAGsCF,mBAAS,MAH/C,mBAGGka,EAHH,KAGkBC,EAHlB,KAIExK,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAEf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDuD,GAIP,IAiBMtD,EAAewK,MAAMC,KACzB,IAAIC,IAAI/R,EAAOgS,gBAAgB1S,KAAI,SAAA8C,GAAC,OAAIA,EAAEuI,eAC1CrL,KAAI,SAAAqL,GACJ,MAAO,CACLjP,IAAKiP,EACLhP,KAAK,GAAD,OAAKgP,EAAL,aACF3K,EAAOgS,gBAAgBC,MAAK,SAAA7P,GAAC,OAAIA,EAAEuI,YAAcA,KAAWzV,aAE9Db,MAAOsW,MAOX,OACE,kBAAClS,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDuD,IAIL,kBAAC1R,EAAA,EAAD,6BACqB0R,EADrB,MACmCzV,EADnC,WAGA,kBAACuD,EAAA,EAAMS,QAAP,KACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMC,SAhDK,WACf,IAAMpI,EAAc,CAClBnD,KAAM,SACN0Z,QAASoD,EACT/W,MAAO+d,EACPO,QAAShd,GAEPlE,EAAY4C,QAAU5C,EAAYuW,QACpClQ,EAAuB,mBAAoB,SAE3Coa,EAA2BzgB,GAC3B0gB,EAAyB1gB,GACzBqG,EAAuB,wBAAsB,WAC7CmB,OAoCI,kBAACW,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEhD,SAvBa,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC7BsF,EAAEuG,iBACF0R,EAAiBvd,IAsBP0L,WAAS,EACTC,QAAM,EACNvE,QAAS4L,KAGb,kBAAClO,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlM,KAAK,UAAb,qBC8CGskB,GANc1kB,aAPL,SAAAC,GAEtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAIoC,CACpDwI,2BAA4BL,GAC5BiK,wB/BlE8B,SAAAphB,GAAW,8CAAI,WAAMxB,GAAN,SAAArB,EAAA,sDAC7CqB,EAAS,CACP3B,KtCWwB,esCVxBa,KAAMsC,IAHqC,2CAAJ,uD+BmEzCqhB,sBAAuBtb,IAHItJ,EA1HT,SAAC,GAOd,IANLuS,EAMI,EANJA,OACAyI,EAKI,EALJA,SACAxT,EAII,EAJJA,WACAuT,EAGI,EAHJA,2BACA4J,EAEI,EAFJA,wBACAC,EACI,EADJA,sBACI,EAE8B5a,oBAAS,GAFvC,mBAEGC,EAFH,KAEcC,EAFd,OAGoCF,mBAAS,MAH7C,mBAGGiR,EAHH,KAGiBC,EAHjB,KAIEvB,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAEf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDqB,GAIP,IAiBMpB,EAAewK,MAAMC,KACzB,IAAIC,IAAI/R,EAAOgS,gBAAgB1S,KAAI,SAAA8C,GAAC,OAAIA,EAAEqG,cAC1CnJ,KAAI,SAAAmJ,GACJ,MAAO,CACL/M,IAAK+M,EACL9M,KAAK,GAAD,OAAK8M,EAAL,aACFzI,EAAOgS,gBAAgBC,MAAK,SAAA7P,GAAC,OAAIA,EAAEqG,WAAaA,KAAUxT,YAE5DZ,MAAOoU,MAQX,OACE,kBAAChQ,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjDqB,IAIL,kBAACxP,EAAA,EAAD,4BACoBwP,EADpB,MACiCxT,EADjC,WAGA,kBAACwD,EAAA,EAAMS,QAAP,KACE,kBAAC,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAMC,SAlDK,WACf,IAAMpI,EAAc,CAClBnD,KAAM,QACN+F,MAAO8U,EACPnB,QAASkB,EACTyJ,QAASjd,GAEPjE,EAAY4C,QAAU5C,EAAYuW,QACpC8K,EAAsB,kBAAmB,SAEzCD,EAAwBphB,GACxBwX,EAA2BxX,GAC3BqhB,EAAsB,wBAAsB,WAC5C7Z,OAsCI,kBAACW,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEhD,SAxBY,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC5BsF,EAAEuG,iBACFyI,EAAgBtU,IAuBN0L,WAAS,EACTC,QAAM,EACNvE,QAAS4L,KAGb,kBAAClO,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlM,KAAK,UAAb,qBCoCGykB,GANc7kB,aANL,SAAAC,GACtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAIoC,CACpDuS,0BAA2BzG,GAC3B0G,wBtBsC8B,SAAAxhB,GAAW,8CAAI,WAAMxB,GAAN,SAAArB,EAAA,sDAC7CqB,EAAS,CACP3B,KhDjGwB,egDkGxBa,KAAMsC,IAHqC,2CAAJ,uDsBrCzCqG,uBAAwBN,IAHGtJ,EAlHT,SAAC,GAOd,IANLye,EAMI,EANJA,SACAlW,EAKI,EALJA,YACAgK,EAII,EAJJA,OACA3I,EAGI,EAHJA,uBACAkb,EAEI,EAFJA,0BACAC,EACI,EADJA,wBACI,EAE8B/a,oBAAS,GAFvC,mBAEGC,EAFH,KAEcC,EAFd,OAGoCF,mBAAS,MAH7C,mBAGG0U,EAHH,KAGiBC,EAHjB,KAIEhF,EAAa,WACjBzP,GAAa,IAETa,EAAc,WAClBb,GAAa,IAEf,IAAKD,EACH,OACE,4BAAQ7J,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjD8E,GAIP,IAiBM7E,EAAerH,EAAOgS,gBAAgB1S,KAAI,SAAAtN,GAAK,MAAK,CACxD0J,IAAK1J,EAAMka,SACXvQ,KAAK,GAAD,OAAK3J,EAAMka,SAAX,cAAyBla,EAAMgE,aACnC3B,MAAOrC,EAAMka,aAMf,OACE,kBAACzT,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTE,QAASR,EACTE,QACE,4BAAQ7K,KAAK,SAASgW,UAAU,WAAWhL,QAASuO,GACjD8E,IAIL,kBAACjT,EAAA,EAAD,2BACmBiT,EADnB,MACgClW,EADhC,YAGA,kBAACyC,EAAA,EAAMS,QAAP,KACE,kBAAC,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAMC,SA3CK,WACf,IAAMpI,EAAc,CAClBnD,KAAM,QACN+F,MAAOuY,EACP5E,QAAS2E,EACTgG,QAASlc,GAEPhF,EAAY4C,QAAU5C,EAAYuW,QACpClQ,EAAuB,iBAAkB,SAEzCkb,EAA0BvhB,GAC1BwhB,EAAwBxhB,GACxBqG,EAAuB,wBAAsB,WAC7CmB,OA+BI,kBAACW,EAAA,EAAKE,MAAN,KACE,kBAACqD,EAAA,EAAD,CACEhD,SAxBY,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC5BsF,EAAEuG,iBACFkM,EAAgB/X,IAuBN0L,WAAS,EACTC,QAAM,EACNvE,QAAS4L,KAGb,kBAAClO,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQlM,KAAK,UAAb,qBChFNC,GAAQ,CACZyR,aAAc,EACdnF,QAAS,QACToF,QAAS,GACTC,QAAS,OA8GIgT,GALqBhlB,aALZ,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,UAG2C,CAC3D7C,uBAAwBN,GACxB2b,wBAAyBjhB,IAFShE,EAtGT,SAAC,GAOrB,IANLyM,EAMI,EANJA,OACAgS,EAKI,EALJA,SACAlW,EAII,EAJJA,YACApB,EAGI,EAHJA,OACA8d,EAEI,EAFJA,wBACArb,EACI,EADJA,uBACI,EAC4BI,oBAAS,GADrC,mBACGyH,EADH,KACaC,EADb,KAEJ,IAAKjF,EAAOC,cACV,OAAO,KAgBT,OAAI+E,EACK,kBAAC,IAAD,CAAUzE,GAAE,mBAAcP,EAAOC,cAAc/K,MAGtD,kBAAC,IAAMyK,SAAP,KACE,kBAACgG,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAE4d,OAAQ,WACjB3d,MAAM,QACN8K,QAxBI,WACZ,IAAM6V,EAAc,CAClBxC,WACA/V,UAAW+D,EAAOC,cAAc/K,GAChCwF,SACAzC,cAAe+H,EAAOA,OAAOtF,OAAS,GAExC8d,EAAwBhE,GACxBrX,EAAuB,GAAD,OACjBrB,EADiB,kCACiBkE,EAAOC,cAAcO,cAC1D,WAEFyE,GAAY,IAaJ5D,KAAK,QAGTzN,MAAOA,GACPoO,UAAQ,EACRyW,OAAK,EACL3b,QAAO,8BAAmBhB,EAAnB,uBAA6CkE,EAAOC,cAAcO,oBCMlEkY,GAvDU,SAAC,GAAgB,IAAdlI,EAAa,EAAbA,OAC1B,OAAe,OAAXA,EACK,KAGP,kBAACtJ,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,oBAAeiQ,EAAOC,YAAcD,EAAOxV,aACnD,kBAAC,GAAD,CACEyV,UAAWD,EAAOC,UAClBzV,YAAawV,EAAOxV,eAGxB,kBAACkM,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,mBAAciQ,EAAOjC,WAAaiC,EAAOzV,YACjD,kBAAC,GAAD,CACEwT,SAAUiC,EAAOjC,SACjBxT,WAAYyV,EAAOzV,cAGvB,kBAACmM,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,mBAAciQ,EAAOwB,WAAaxB,EAAO1U,aACjD,kBAAC,GAAD,CACEkW,SAAUxB,EAAOwB,SACjBlW,YAAa0U,EAAO1U,eAGxB,kBAACoL,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,qBAAgBiQ,EAAOvU,YAAcuU,EAAO9P,eAEtD,kBAACwG,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CACEtL,YAAa0U,EAAO1U,YACpBkW,SAAUxB,EAAOwB,SACjBtX,OAAQ8V,EAAO9V,YCcVie,GAJaplB,YAAQ,KAAM,CACxCqlB,2BRTiC,SAAAC,GAAM,8CAAI,WAAMvjB,GAAN,SAAArB,EAAA,sDAC3C,IACEqB,EAAS,CACP3B,KjEE+B,wBiED/Ba,KAAMqkB,IAER,MAAOvb,GACP7H,QAAQC,IAAI4H,GAP6B,2CAAJ,wDQQb/J,EA/CR,SAAC,GAAoC,IAAlCqlB,EAAiC,EAAjCA,2BAAiC,EAC1Brb,mBAAS,GADiB,mBAC/Csb,EAD+C,KACvCC,EADuC,KAGtDjR,qBAAU,WACR+Q,EAA2BC,KAE1B,CAACA,IAkBJ,OACE,kBAACrT,GAAA,EAAD,CAAMgD,QAAS,GACb,kBAAChD,GAAA,EAAKC,OAAN,KACE,kBAACxG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACT5C,aAAciZ,EACdjT,aAAW,EACXC,WAAS,EACTtE,QAzBU,CAClB,CACEC,IAAK,EACLC,KAAM,sBACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,wBACNtH,MAAO,IAiBDqF,SAda,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC3BsF,EAAEuG,iBACF8S,EAAU3e,IAaF0B,MAAM,kCCoDHkd,GAFgBxlB,aANP,SAAAC,GACtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAIsC,KAAzBvS,EApFT,SAAC,GAAgB,IAAduS,EAAa,EAAbA,OACvB,GAA+B,OAA3BA,EAAOgS,gBACT,OAAO,KAET,IAAuB,IAAnBhS,EAAOgC,QACT,OACE,kBAACM,GAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,GAAA,EAAD,qBAIN,IAAI0Q,EAAgBlT,EAAOgS,gBAwB3B,OAtBAkB,EACiC,IAA/BlT,EAAOmT,oBACHD,EACAA,EAAcE,MAAK,SAACjlB,EAAGklB,GAAJ,OACjBllB,EAAE6H,YAAcqd,EAAErd,YACd,EACAqd,EAAErd,YAAc7H,EAAE6H,aACjB,EACD,KAGZkd,EACiC,IAA/BlT,EAAOmT,oBACHD,EACAA,EAAcE,MAAK,SAACjlB,EAAGklB,GAAJ,OACjBllB,EAAE+G,YAAcme,EAAEne,YACd,EACAme,EAAEne,YAAc/G,EAAE+G,aACjB,EACD,KAIV,yBAAKpH,MAAO,CAAEwM,UAAW,SACvB,kBAAC,GAAD,MACA,kBAAC8G,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,uBACA,kBAACF,GAAA,EAAME,KAAP,eACA,kBAACF,GAAA,EAAME,KAAP,cACA,kBAACF,GAAA,EAAME,KAAP,wBACA,kBAACF,GAAA,EAAME,KAAP,QAGJ,kBAACF,GAAA,EAAMe,KAAP,KACG+Q,EAAc5T,KAAI,SAAAoL,GAAM,OACvB,kBAAC,GAAD,CAAkBhP,IAAKgP,EAAOwB,SAAUxB,OAAQA,aC1C7C4I,GAVA,WACb,OACE,kBAAC1T,EAAA,EAAD,KACE,oCACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCoFS2T,GAJmB9lB,YAAQ,KAAM,CAAE4F,UXMzB,SAAAL,GAAK,8CAAI,WAAMxD,GAAN,eAAArB,EAAA,sEAE9BqB,EAAS,CACP3B,KjEhD4B,uBiE6CA,SAKRua,GAAc/U,UAAUL,GALhB,OAKxBwX,EALwB,OAM9Bhb,EAAS,CACP3B,KjEjDiB,UiEkDjBa,KAAM8b,EACNxX,UAT4B,gDAY9BrD,QAAQC,IAAR,MAZ8B,yDAAJ,wDWNInC,EAjFT,SAAAoV,GAAU,IAAD,EACEpL,mBAASoF,KAAK2W,MAAQ,QADxB,mBACzBC,EADyB,KACdC,EADc,OAEFjc,mBAAS,IAAIoF,MAFX,mBAEzB8W,EAFyB,KAEhBC,EAFgB,OAGRnc,mBAAS,aAHD,mBAGzBnE,EAHyB,KAGnBugB,EAHmB,KAoChC,OACE,kBAAC1a,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACEtD,MAAM,MACNuD,QAASoD,IACToD,aAAW,EACXC,WAAS,EACTjG,aAAcxG,EACdmI,QA/BY,CAClB,CACEC,IAAK,EACLrH,MAAO,YACPsH,KAAM,YAER,CACED,IAAK,EACLrH,MAAO,WACPsH,KAAM,UAER,CACED,IAAK,EACLrH,MAAO,WACPsH,KAAM,YAkBFjC,SAde,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MAC3BsF,EAAEuG,iBACF2T,EAAQxf,MAcJ,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,SACNuD,QAAS+G,KACTG,SAAUiT,EACVK,4BAA0B,EAC1BrT,WAAW,aACX/G,SAAU,SAAAtI,GAAI,OAAIsiB,EAAatiB,IAC/BkP,OAAQC,OAEV,kBAACpH,EAAA,EAAKE,MAAN,CACEtD,MAAM,iBACNuD,QAAS+G,KACTG,SAAUmT,EACVG,4BAA0B,EAC1BrT,WAAW,aACX/G,SAAU,SAAAtI,GAAI,OAAIwiB,EAAWxiB,IAC7BkP,OAAQC,OAEV,kBAACpH,EAAA,EAAKE,MAAN,MACA,kBAACF,EAAA,EAAKE,MAAN,MACA,kBAACF,EAAA,EAAKE,MAAN,OAEF,kBAACU,EAAA,EAAD,CAAQhM,MAAM,OAAO8K,QAjEJ,WACnB,IAAM7F,EAAQ,CACZM,OACAC,WAAYoH,KAAO8Y,GAAW5Y,OAAO,cACrCrH,SAAUmH,KAAOgZ,GAAS9Y,OAAO,eAEnCgI,EAAMxP,UAAUL,KA2Dd,OAEU,QC8ED+gB,GAFatmB,aANJ,SAAAC,GACtB,MAAO,CACLsS,OAAQtS,EAAMsS,UAImC,KAAzBvS,EArJT,SAAC,GAAgB,IAAduS,EAAa,EAAbA,OACpB,OAA2B,OAAvBA,EAAOgU,YAEP,kBAACpU,EAAA,EAAD,KACE,uCACA,kBAAC,GAAD,OAIFI,EAAOgC,QAEP,kBAACpC,EAAA,EAAD,KACE,uCACA,kBAAC,GAAD,MACA,yCAI0B,cAA5BI,EAAOgU,YAAY1gB,KAEnB,kBAACsM,EAAA,EAAD,KACE,uCACA,uHAIA,kBAAC,GAAD,MACA,kBAACwB,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,gBACA,kBAACF,GAAA,EAAME,KAAP,uBAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGnC,EAAOiU,OAAO3U,KAAI,SAAA4U,GAAC,OAClB,kBAAC9S,GAAA,EAAMC,IAAP,CAAW3F,IAAKwY,EAAEhI,UAChB,kBAAC9K,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,kBAAayZ,EAAEvJ,YAAcuJ,EAAEhhB,SAEzC,kBAACkO,GAAA,EAAME,KAAP,KAAa4S,EAAEC,cAQG,aAA5BnU,EAAOgU,YAAY1gB,KAEnB,kBAACsM,EAAA,EAAD,KACE,uCACA,kBAAC,GAAD,MACA,kBAACwB,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,gBACA,kBAACF,GAAA,EAAME,KAAP,eACA,kBAACF,GAAA,EAAME,KAAP,uBAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGnC,EAAOiU,OAAO3U,KAAI,SAAA4U,GAAC,OAClB,kBAAC9S,GAAA,EAAMC,IAAP,CAAW3F,IAAKwY,EAAEhI,UAChB,kBAAC9K,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,kBAAayZ,EAAEvJ,YAAcuJ,EAAEhhB,SAEzC,kBAACkO,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,iBAAYyZ,EAAEzL,WAAayL,EAAE/gB,QAEvC,kBAACiO,GAAA,EAAME,KAAP,KAAa4S,EAAEC,cAQG,aAA5BnU,EAAOgU,YAAY1gB,KAEnB,kBAACsM,EAAA,EAAD,KACE,uCACA,kBAAC,GAAD,MACA,kBAACwB,GAAA,EAAD,CAAOc,SAAO,GACZ,kBAACd,GAAA,EAAMnI,OAAP,KACE,kBAACmI,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,gBACA,kBAACF,GAAA,EAAME,KAAP,eACA,kBAACF,GAAA,EAAME,KAAP,cACA,kBAACF,GAAA,EAAME,KAAP,qBACA,kBAACF,GAAA,EAAME,KAAP,QAGJ,kBAACF,GAAA,EAAMe,KAAP,KACGnC,EAAOiU,OAAO3U,KAAI,SAAA4U,GAAC,OAClB,kBAAC9S,GAAA,EAAMC,IAAP,CAAW3F,IAAKwY,EAAEhI,UAChB,kBAAC9K,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,kBAAayZ,EAAEvJ,YAAcuJ,EAAEhhB,SAEzC,kBAACkO,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,iBAAYyZ,EAAEzL,WAAayL,EAAE/gB,QAEvC,kBAACiO,GAAA,EAAME,KAAP,KACE,kBAAC,IAAD,CAAM7G,GAAE,iBAAYyZ,EAAEhI,WAAagI,EAAEle,cAEvC,kBAACoL,GAAA,EAAME,KAAP,KAAa4S,EAAEC,OACf,kBAAC/S,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CACEtL,YAAake,EAAEle,YACfkW,SAAUgI,EAAEhI,SACZtX,OAAQsf,EAAEtf,sBAhC5B,K,+BCkoBawf,GATiB3mB,aARR,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,OACd2H,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,MACbmQ,OAAQtS,EAAMsS,UAGuC,CACvD3I,uBAAwBN,GACxBH,eACAyd,mB9BzmBgC,yDAAM,WAAM7kB,GAAN,SAAArB,EAAA,sDACtCqB,EAAS,CACP3B,KhDxCgC,yBgDsCI,2CAAN,uD8B0mBhCqf,mBAAoBzW,GACpBqa,2BAA4B7d,GAC5BqhB,yBAA0B5D,IANIjjB,EAvrBT,SAAC,GAWjB,IAVLoC,EAUI,EAVJA,MACAmQ,EASI,EATJA,OACA9F,EAQI,EARJA,OACAlI,EAOI,EAPJA,MACAI,EAMI,EANJA,gBACAD,EAKI,EALJA,cACA2e,EAII,EAJJA,2BACAwD,EAGI,EAHJA,yBACApH,EAEI,EAFJA,mBACA7V,EACI,EADJA,uBACI,EAC8BI,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEwBF,mBAASzF,EAAMkD,aAFvC,mBAEGhC,EAFH,KAEWoW,EAFX,OAGsB7R,mBAASzF,EAAMiD,YAHrC,mBAGG9B,EAHH,KAGUga,EAHV,OAI4B1V,mBAASzF,EAAMgE,aAJ3C,mBAIGA,EAJH,KAIgB+a,EAJhB,OAKkBtZ,mBAAS6V,KAAKC,MAAMvb,EAAM4C,OAAS,KALrD,mBAKG4Y,EALH,KAKQC,EALR,OAMkBhW,mBAASzF,EAAM4C,OAAS,IAN1C,mBAMG8Y,EANH,KAMQC,EANR,OAO0BlW,mBAASzF,EAAM4D,SAPzC,mBAOGA,EAPH,KAOYgY,EAPZ,OAQsCnW,mBAASzF,EAAM0D,gBARrD,mBAQGmY,EARH,KAQkBC,EARlB,OASwBrW,mBAASzF,EAAM+b,QATvC,oBASGA,GATH,MASWC,GATX,SAUwBvW,mBAASzF,EAAMqD,SAVvC,qBAUG4Y,GAVH,MAUWC,GAVX,SAW0BzW,mBAASzF,EAAMuD,UAXzC,qBAWG4Y,GAXH,MAWYC,GAXZ,SAYoB3W,mBAAS9C,SAAS3C,EAAMkE,OAZ5C,qBAYGA,GAZH,MAYSuV,GAZT,SAasBhU,mBAASzF,EAAM+D,OAbrC,qBAaGA,GAbH,MAaUuV,GAbV,SAcsB7T,mBAASzF,EAAMmD,QAdrC,qBAcGoW,GAdH,MAcUC,GAdV,SAeoB/T,mBAASzF,EAAMyD,MAfnC,qBAeGA,GAfH,MAeS4Y,GAfT,SAgB0B5W,mBAASzF,EAAMsc,SAhBzC,qBAgBGA,GAhBH,MAgBYC,GAhBZ,MAiBJxM,qBAAU,WACW,OAAf/P,EAAMkE,KACRuV,GAAQ,MAERA,GAAQ9W,SAAS3C,EAAMkE,SAExB,CAAClE,EAAMkE,OAEV6L,qBAAU,WACa,OAAjB/P,EAAM+b,OACRC,GAAU,WACgBvD,IAAjBzY,EAAM+b,OACfC,GAAU,MAEVA,GACEhc,EAAM+b,OACHS,QAAQ,MAAO,IACfA,QAAQ,OAAQ,MAChBA,QAAQ,MAAO,OAGrB,CAACxc,EAAM+b,SAEVhM,qBAAU,WACoB,OAAxB/B,EAAOgR,aACTxF,GAASxZ,EAAMmD,QAEfqW,GAASxL,EAAOgR,gBAGjB,CAAChR,EAAOgR,eAEX,IAAM5J,GAAa,WAEjBzP,GAAa,IAGTa,GAAc,WAElB8b,IACA3c,GAAa,IAcf,GAAIuC,EAAO8H,UAAYtK,EACrB,OACE,kBAACe,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTJ,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAE4d,OAAQ,WACjB3d,MAAM,OACN8K,QAASuO,GACT7L,KAAK,SAGTvC,QAASR,IAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,2BAChB,kBAACyB,EAAA,EAAMS,QAAP,kBAiWN,OACE,kBAACT,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTJ,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAE4d,OAAQ,WACjB3d,MAAM,OACN8K,QAASuO,GACT7L,KAAK,SAGTvC,QAASR,IAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,2BAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SA7WQ,WAKlB,GAHe,OAAXlG,GACFmE,EAAuB,8BAA+B,QAEzC,OAAX0W,GAAiB,CACnB,IAAMnZ,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GACvC6G,EAAc,CAClBrf,YAAahC,EACb+B,WAAY9B,EACZ6C,cACApB,SACAgB,UACAF,eAAgBmY,EAChBE,UACA1Y,QAAS4Y,GACT1Y,SAAU4Y,GACVjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAtQ,QAASnO,EAAMT,GACfub,UAAW3Y,EAAM2Y,UACjBlC,SAAUzW,EAAMyW,SAChByD,SAAUla,EAAMka,SAChB/Z,gBACAC,mBAEF8a,EAAmBqH,GACnBld,EAAuB,UAAD,OACVkd,EAAYve,YADF,0BAEpB,WAEFwC,SACK,CACL,IAAM5D,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GACvC6G,EAAc,CAClBrf,YAAahC,EACb+B,WAAY9B,EACZ6C,cACApB,SACAgB,UACAF,eAAgBmY,EAChBE,OAAO,KAAD,OAAOA,GAAOS,QAAQ,MAAO,OAA7B,MACNnZ,QAASV,SAASsZ,IAClB1Y,SAAUZ,SAASwZ,IACnBjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAtQ,QAASnO,EAAMT,GACfub,UAAW3Y,EAAM2Y,UACjBlC,SAAUzW,EAAMyW,SAChByD,SAAUla,EAAMka,SAChB/Z,gBACAC,mBAEF8a,EAAmBqH,GACnBld,EAAuB,UAAD,OACVkd,EAAYve,YADF,0BAEpB,WAEFwC,QA8SI,kBAACW,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAc5G,EACdrF,KAAK,OACL4L,YAAavG,EACbwG,SAAU,SAAAC,GAAC,OAAI2P,EAAU3P,EAAEC,OAAOvF,QAClC0B,MAAM,YAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAc3G,EACdtF,KAAK,OACL4L,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIwT,EAASxT,EAAEC,OAAOvF,QACjC0B,MAAM,WAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAc9D,EACdnI,KAAK,OACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAIoX,EAASpX,EAAEC,OAAOvF,QACjC0B,MAAM,UAER,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACToV,UAAW,EACX7U,aAAc0T,EACd3f,KAAK,SACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI8T,EAAO9T,EAAEC,OAAOvF,QAC/B0B,MAAM,qBAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAc4T,EACdiB,UAAW,EACX9gB,KAAK,SACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAIgU,EAAOhU,EAAEC,OAAOvF,QAC/B0B,MAAM,sBAGV,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACToV,UAAW,EACX7U,aAAcmU,GACdpgB,KAAK,SACL4L,YAAY,8BACZC,SAAU,SAAAC,GAAC,OAAIuU,GAAUvU,EAAEC,OAAOvF,QAClC0B,MAAM,WAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAcqU,GACdQ,UAAW,EACX9gB,KAAK,SACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIyU,GAAWzU,EAAEC,OAAOvF,QACnC0B,MAAM,aAGV,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASsV,KACT9U,aAAciU,GACdrU,SAAU,SAAAC,GAAC,OAAIqU,GAAUrU,EAAEC,OAAOvF,QAClCoF,YAAY,wBACZ1D,MAAM,2DAER,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASoD,IACTjD,YAAY,2BACZqG,aAAa,EACbhG,aAAclE,EACdmK,WAAS,EACTtE,QAhYW,CACrB,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,MACNtH,MAAO,GAET,CACEqH,IAAK,KACLC,KAAM,YACNtH,MAAO,OAmXCqF,SAhXO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC3B4L,EAAMC,iBACN0N,EAAWvZ,IA+WD0B,MAAM,gCAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTjD,YAAY,0BACZqG,aAAa,EACbhG,aAAc+T,EACd9N,WAAS,EACTC,QAAM,EACNvE,QAtXiB,CAC3B,CAAEE,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,mBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iCAAkCtH,MAAO,MACjD,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,wCAAyCtH,MAAO,MACxD,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,oCAAqCtH,MAAO,MACpD,CAAEsH,KAAM,gCAAiCtH,MAAO,MAChD,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yCAA0CtH,MAAO,MACzD,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,6CAA8CtH,MAAO,MAC7D,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,kBAAmBtH,MAAO,MAClC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,+CAAgDtH,MAAO,MAC/D,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,+BAAgCtH,MAAO,MAC/C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,uCAAwCtH,MAAO,MACvD,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,OAqIjBqF,SAnIa,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACjC4L,EAAMC,iBACN4N,EAAiBzZ,IAkIP0B,MAAM,kBAGV,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAc/D,GACdlI,KAAK,OACL4L,YAAY,gBACZC,SAAU,SAAAC,GAAC,OAAI2R,GAAS3R,EAAEC,OAAOvF,QACjC0B,MAAM,eAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOkX,GACP1d,KAAK,OACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI6R,GAAS7R,EAAEC,OAAOvF,QACjC0B,MACE,kBAAC,IAAM8D,SAAP,KACE,0BAAM/L,MAAO,CAAEsM,QAAS,WAAxB,aACA,kBAACL,EAAA,EAAD,CACElB,QAAS,SAAAc,GAAC,OAAeA,EAAEuG,sBAjJzC4Q,EAJc,CACZ5d,SACAC,WAoJYqI,KAAK,OACL0H,QAAQ,QACRpV,MAAO,CAAE0M,aAAc,WAJzB,gCAWN,kBAACrB,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTO,aAAcrE,GACdkZ,UAAW,GACX9gB,KAAK,OACL4L,YAAY,UACZC,SAAU,SAAAC,GAAC,OAAI0U,GAAQ1U,EAAEC,OAAOvF,QAChC0B,MAAM,SAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTO,aAAc5D,GACdyY,UAAW,EACX9gB,KAAK,SACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAI8R,GAAQ9R,EAAEC,OAAOvF,QAChC0B,MAAM,UAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASsV,KACT9U,aAAcwU,GACd5U,SAAU,SAAAC,GAAC,OAAI4U,GAAW5U,EAAEC,OAAOvF,QACnCoF,YAAY,mBACZ1D,MAAM,kBAER,kBAACgE,EAAA,EAAD,CAaEhM,MAAM,QACNF,KAAK,UAdP,yBC1eK2mB,GANuB/mB,aANd,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,UAI6C,CAC7Dua,6B9DlGmC,SAAA9hB,GAAM,8CAAI,WAAMnD,GAAN,eAAArB,EAAA,sEAE3CqB,EAAS,CACP3B,KAAMG,IAHmC,SAKrC0P,GAAc/L,sBAAsBgB,EAAOP,iBALN,uBAMrCsL,GAAc7L,mBAAmBc,EAAOb,iBANH,uBAOtB4L,GAAchN,OAAOiC,EAAOwD,WAPN,OAOrC+D,EAPqC,OAQ3C1K,EAAS,CACP3B,KjBlDwB,iBiBmDxBa,KAAMwL,IAVmC,kDAa3CvK,QAAQC,IAAR,MAb2C,0DAAJ,uD8DmGzC8kB,sB9De4B,SAAAtlB,GAAE,8CAAI,WAAMI,GAAN,SAAArB,EAAA,sDAClC,IACEqB,EAAS,CACP3B,KjBhJ0B,mBiBiJ1Ba,KAAMU,IAER,MAAOoI,GACP7H,QAAQC,IAAI4H,GAPoB,2CAAJ,uD8Dd9Bmd,wB9DyB8B,SAAAvlB,GAAE,8CAAI,WAAMI,GAAN,SAAArB,EAAA,sDACpC,IACEqB,EAAS,CACP3B,KjB1J4B,qBiB2J5Ba,KAAMU,IAER,MAAOoI,GACP7H,QAAQC,IAAI4H,GAPsB,2CAAJ,wD8D5BI/J,EA/IT,SAAC,GAMvB,IALLyM,EAKI,EALJA,OACAlI,EAII,EAJJA,MACAyiB,EAGI,EAHJA,6BACAC,EAEI,EAFJA,sBACAC,EACI,EADJA,wBACI,EAC0Bld,oBAAS,GADnC,mBACG4L,EADH,KACYuR,EADZ,KAsBAC,EAAUvH,KAAKC,MAAMvb,EAAM4C,OAAS,IACxCigB,EAAUA,EAAQC,WAClB,IAAIhgB,EAAU9C,EAAM4C,OAAmB,GAAVigB,EAM7B,OALkC,IAA9B/f,EAAQggB,WAAWlgB,SACrBE,EAAO,WAAOA,EAAQggB,aAExBhgB,EAAUA,EAAQggB,WAGhB,kBAAC1T,GAAA,EAAMC,IAAP,KACE,kBAACD,GAAA,EAAME,KAAP,KACE,kBAAC8B,GAAA,EAAD,CAAU1J,SAnBK,WACnBkb,GAAYvR,IACI,IAAZA,EACFsR,EAAwB3iB,EAAMI,iBAE9BsiB,EAAsB1iB,EAAMI,kBAcQiR,QAASA,IAC3C,kBAAC/H,EAAA,EAAD,CACExN,MAAO,CAAEinB,WAAY,SAAUrJ,OAAQ,WACvCnQ,KAAK,sBAGT,kBAAC6F,GAAA,EAAME,KAAP,KAAatP,EAAMG,eACnB,kBAACiP,GAAA,EAAME,KAAP,KAAatP,EAAMkD,aACnB,kBAACkM,GAAA,EAAME,KAAP,KAAatP,EAAMgE,aACnB,kBAACoL,GAAA,EAAME,KAAP,KACGuT,EADH,IACa/f,GAEb,kBAACsM,GAAA,EAAME,KAAP,KACE,kBAAChG,EAAA,EAAD,CACExN,MAAO,CAAE4d,OAAQ,WACjB3d,MAAM,MACN8K,QA/CS,WACf,IAAM/G,EAAkBoI,EAAOA,OAAOkM,QACpC,SAAA8N,GAAC,OAAIA,EAAE9hB,kBAAoBJ,EAAMI,mBAE7BO,EAAS,CACbP,gBAAiBJ,EAAMI,gBACvB+D,UAAW+D,EAAOC,cAAc/K,GAChC0C,mBAEF2iB,EAA6B9hB,IAuCvB4I,KAAK,YAGT,kBAAC6F,GAAA,EAAME,KAAP,KACE,kBAAC,GAAD,CACElS,GAAI4C,EAAMka,SACV/Z,cAAeH,EAAMG,cACrBC,gBAAiBJ,EAAMI,gBACvBJ,MAAOA,S,UCtDXlE,GAAQ,CACZyR,aAAc,EACdnF,QAAS,QACToF,QAAS,GACTC,QAAS,OAopBIuV,GAPgBvnB,aARP,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,OACd2H,YAAanU,EAAMmU,YACnBhS,MAAOnC,EAAMmC,MACbmQ,OAAQtS,EAAMsS,UAGsC,CACtD3I,uBAAwBN,GACxB8Z,mBAAoBta,GACpBua,2BAA4B7d,GAC5Byd,sBAJ6BjjB,EA1oBT,SAAC,GAOhB,IANLuS,EAMI,EANJA,OACAnQ,EAKI,EALJA,MACAqK,EAII,EAJJA,OACA4W,EAGI,EAHJA,2BACAD,EAEI,EAFJA,mBACAxZ,EACI,EADJA,uBACI,EAC8BI,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAEwBF,mBAAS,IAFjC,mBAEGvE,EAFH,KAEWoW,EAFX,OAGsB7R,mBAAS,IAH/B,mBAGGtE,EAHH,KAGUga,EAHV,OAIsB1V,mBAAS,IAJ/B,mBAIGzF,EAJH,KAIU+e,EAJV,OAKkBtZ,mBAAS,IAL3B,mBAKG+V,EALH,KAKQC,EALR,OAMkBhW,mBAAS,IAN3B,mBAMGiW,EANH,KAMQC,EANR,OAO0BlW,mBAAS,IAPnC,mBAOG7B,EAPH,KAOYgY,EAPZ,OAQsCnW,mBAAS,IAR/C,mBAQGoW,EARH,KAQkBC,EARlB,OASwBrW,mBAAS,IATjC,mBASGsW,EATH,KASWC,EATX,OAUwBvW,mBAAS,IAVjC,oBAUGwW,GAVH,MAUWC,GAVX,SAW0BzW,mBAAS,IAXnC,qBAWG0W,GAXH,MAWYC,GAXZ,SAYoB3W,mBAAS,IAZ7B,qBAYGvB,GAZH,MAYSuV,GAZT,SAasBhU,mBAAS,IAb/B,qBAaG1B,GAbH,MAaUuV,GAbV,SAcsB7T,mBAAS,IAd/B,qBAcG8T,GAdH,MAcUC,GAdV,SAeoB/T,mBAAS,IAf7B,qBAeGhC,GAfH,MAeS4Y,GAfT,SAgB0B5W,mBAAS,IAhBnC,qBAgBG6W,GAhBH,MAgBYC,GAhBZ,MAiBJxM,qBAAU,WACoB,OAAxB/B,EAAOgR,aACTxF,GAAS,IAETA,GAASxL,EAAOgR,gBAEjB,CAAChR,EAAOgR,eAEX,IAGMxY,GAAc,WAClBb,GAAa,IA4Uf,OACE,kBAACc,EAAA,EAAD,CACEM,KAAMrB,EACNoB,WAAS,EACTJ,QACE,kBAACqB,EAAA,EAAD,CAAQhM,MAAM,OAAO8K,QArVR,WACjBlB,GAAa,KAoVT,0BAIFqB,QAASR,IAET,kBAACS,EAAA,EAAD,CAAQjC,QAAQ,2BAChB,kBAACyB,EAAA,EAAMS,QAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,SAtVQ,WAEH,OAAXlG,GACFmE,EAAuB,8BAA+B,QAExD,IAAMzC,EAAyB,GAAhBD,SAAS6Y,GAAY7Y,SAAS+Y,GAC7C,GAAe,OAAXK,EAAiB,CACnB,IAAMrc,EAAa,CACjBwD,YAAahC,EACb+B,WAAY9B,EACZ6C,YAAahE,EACb4C,SACAgB,UACAF,eAAgBmY,EAChBE,SACA1Y,QAASV,SAASsZ,IAClB1Y,SAAUZ,SAASwZ,IACnBjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAnY,UAAW+D,EAAOC,cAAc/K,GAChC4O,QAASnO,EAAMT,GACf+C,cAAe+H,EAAOA,OAAOtF,OAAS,GAExCic,EAAmBnf,GACnB8G,SACK,CACL,IAAM9G,EAAa,CACjBwD,YAAahC,EACb+B,WAAY9B,EACZ6C,YAAahE,EACb4C,SACAgB,UACAF,eAAgBmY,EAChBE,OAAO,KAAD,OAAOA,EAAOS,QAAQ,MAAO,OAA7B,MACNnZ,QAASV,SAASsZ,IAClB1Y,SAAUZ,SAASwZ,IACnBjY,QACAH,SACAZ,OAAQoW,GACR9V,QACA6Y,WACAnY,UAAW+D,EAAOC,cAAc/K,GAChC4O,QAASnO,EAAMT,GACf+C,cAAe+H,EAAOA,OAAOtF,OAAS,GAExCic,EAAmBnf,GACnB8G,QAsSI,kBAACW,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOnB,EACPrF,KAAK,OACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAI2P,EAAU3P,EAAEC,OAAOvF,QAClC0B,MAAM,YAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOlB,EACPtF,KAAK,OACL4L,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIwT,EAASxT,EAAEC,OAAOvF,QACjC0B,MAAM,WAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOrC,EACPnE,KAAK,OACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAIoX,EAASpX,EAAEC,OAAOvF,QACjC0B,MAAM,UAER,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACToV,UAAW,EACXta,MAAOmZ,EACP3f,KAAK,SACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI8T,EAAO9T,EAAEC,OAAOvF,QAC/B0B,MAAM,qBAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOqZ,EACPiB,UAAW,EACX9gB,KAAK,SACL4L,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAIgU,EAAOhU,EAAEC,OAAOvF,QAC/B0B,MAAM,sBAGV,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACToV,UAAW,EACXta,MAAO4Z,GACPpgB,KAAK,SACL4L,YAAY,8BACZC,SAAU,SAAAC,GAAC,OAAIuU,GAAUvU,EAAEC,OAAOvF,QAClC0B,MAAM,WAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAO8Z,GACPQ,UAAW,EACX9gB,KAAK,SACL4L,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIyU,GAAWzU,EAAEC,OAAOvF,QACnC0B,MAAM,aAGV,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASsV,KACTlV,SAAU,SAAAC,GAAC,OAAIqU,EAAUrU,EAAEC,OAAOvF,QAClCoF,YAAY,wBACZ1D,MAAM,2DAER,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASoD,IACTjD,YAAY,2BACZqG,aAAa,EACbzL,MAAOuB,EACPmK,WAAS,EACTtE,QAvXW,CACrB,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,MACNtH,MAAO,GAET,CACEqH,IAAK,EACLC,KAAM,YACNtH,MAAO,OA0WCqF,SAvWO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC3B4L,EAAMC,iBACN0N,EAAWvZ,IAsWD0B,MAAM,gCAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTjD,YAAY,0BACZqG,aAAa,EACbzL,MAAOwZ,EACP9N,WAAS,EACTC,QAAM,EACNvE,QA7WiB,CAC3B,CAAEE,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,mBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iCAAkCtH,MAAO,MACjD,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,wCAAyCtH,MAAO,MACxD,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,8BAA+BtH,MAAO,MAC9C,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,oCAAqCtH,MAAO,MACpD,CAAEsH,KAAM,gCAAiCtH,MAAO,MAChD,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yCAA0CtH,MAAO,MACzD,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,6CAA8CtH,MAAO,MAC7D,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,gBAAiBtH,MAAO,MAChC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,kCAAmCtH,MAAO,MAClD,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,mBAAoBtH,MAAO,MACnC,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,qBAAsBtH,MAAO,MACrC,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,mCAAoCtH,MAAO,MACnD,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,wBAAyBtH,MAAO,MACxC,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,kBAAmBtH,MAAO,MAClC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,+CAAgDtH,MAAO,MAC/D,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,yBAA0BtH,MAAO,MACzC,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,4BAA6BtH,MAAO,MAC5C,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,+BAAgCtH,MAAO,MAC/C,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,cAAetH,MAAO,MAC9B,CAAEsH,KAAM,OAAQtH,MAAO,MACvB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,sBAAuBtH,MAAO,MACtC,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,eAAgBtH,MAAO,MAC/B,CAAEsH,KAAM,2BAA4BtH,MAAO,MAC3C,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,uCAAwCtH,MAAO,MACvD,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,aAActH,MAAO,MAC7B,CAAEsH,KAAM,UAAWtH,MAAO,MAC1B,CAAEsH,KAAM,YAAatH,MAAO,MAC5B,CAAEsH,KAAM,WAAYtH,MAAO,MAC3B,CAAEsH,KAAM,0BAA2BtH,MAAO,MAC1C,CAAEsH,KAAM,uBAAwBtH,MAAO,MACvC,CAAEsH,KAAM,oBAAqBtH,MAAO,MACpC,CAAEsH,KAAM,iBAAkBtH,MAAO,MACjC,CAAEsH,KAAM,QAAStH,MAAO,MACxB,CAAEsH,KAAM,SAAUtH,MAAO,MACzB,CAAEsH,KAAM,WAAYtH,MAAO,OA4HjBqF,SA1Ha,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MACjC4L,EAAMC,iBACN4N,EAAiBzZ,IAyHP0B,MAAM,kBAGV,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAO0B,GACPlI,KAAK,OACL4L,YAAY,gBACZC,SAAU,SAAAC,GAAC,OAAI2R,GAAS3R,EAAEC,OAAOvF,QACjC0B,MACE,2CACa,IACX,kBAAC8J,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAEsM,QAAS,UAClBmB,KAAK,oBAGTvE,QAAQ,uDACRlJ,MAAOA,GACPoO,UAAQ,OAKhB,kBAAC/C,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAOkX,GACP1d,KAAK,OACL4L,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAI6R,GAAS7R,EAAEC,OAAOvF,QACjC0B,MACE,kBAAC,IAAM8D,SAAP,KACE,0BAAM/L,MAAO,CAAEsM,QAAS,WAAxB,YACY,IACV,kBAACyF,GAAA,EAAD,CACEnH,QACE,kBAAC4C,EAAA,EAAD,CACExN,MAAO,CAAEsM,QAAS,UAClBmB,KAAK,oBAGTvE,QAAQ,mDACRlJ,MAAOA,GACPoO,UAAQ,KAGZ,kBAACnC,EAAA,EAAD,CACElB,QAAS,SAAAc,GAAC,OAAeA,EAAEuG,sBArKzC4Q,EAJc,CACZ5d,SACAC,WAwKYqI,KAAK,OACL0H,QAAQ,QACRpV,MAAO,CAAE0M,aAAc,WAJzB,gCAWN,kBAACrB,EAAA,EAAKE,MAAN,CACEC,QAASC,IACTlF,MAAOoB,GACPkZ,UAAW,GACX9gB,KAAK,OACL4L,YAAY,UACZC,SAAU,SAAAC,GAAC,OAAI0U,GAAQ1U,EAAEC,OAAOvF,QAChC0B,MAAM,SAER,kBAACoD,EAAA,EAAKE,MAAN,CACE8J,UAAQ,EACR7J,QAASC,IACTlF,MAAO6B,GACPyY,UAAW,EACX9gB,KAAK,SACL4L,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAI8R,GAAQ9R,EAAEC,OAAOvF,QAChC0B,MAAM,UAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASsV,KACTlV,SAAU,SAAAC,GAAC,OAAI4U,GAAW5U,EAAEC,OAAOvF,QACnCoF,YAAY,mBACZ1D,MAAM,kBAER,kBAACgE,EAAA,EAAD,CACEC,UACG9G,IACAC,IACAnB,IACAmc,KACAF,KACAT,IACAE,IACA3X,KACAwV,KACArV,GAEHnI,MAAM,QACNF,KAAK,UAdP,4CCrdKonB,GANcxnB,aALL,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,UAGoC,CACpDgb,uBhBzGoC,SAAAliB,GAAK,8CAAI,WAAMxD,GAAN,eAAArB,EAAA,sEAE3CqB,EAAS,CACP3B,KjEiC4B,uBiEpCa,SAKrBua,GAAcrV,mBAAmBC,GALZ,OAKrCwX,EALqC,OAM3Chb,EAAS,CACP3B,KjE0B8B,uBiEzB9Ba,KAAM8b,IARmC,gDAW3C7a,QAAQC,IAAR,MAX2C,yDAAJ,uDgB0GzC8iB,wBAAyBjhB,GACzB4F,uBAAwBN,IAHGtJ,EA5GT,SAAC,GAId,IA4BD+c,EA/BJtQ,EAGI,EAHJA,OACAwY,EAEI,EAFJA,wBACArb,EACI,EADJA,uBACI,EACkCI,mBAAS,MAD3C,mBACGiX,EADH,KACgByG,EADhB,OAE4B1d,oBAAS,GAFrC,mBAEGyH,EAFH,KAEaC,EAFb,OCT6B,WAAO,IAAD,EACL1H,mBAAS,IADJ,mBAChCoS,EADgC,KACrBC,EADqB,KAIjCC,EAAuBC,cAAY,kBACvCC,aAAuB7B,GAAcrV,mBAAoB,QAErDiN,EAASkK,oBAAQ,sBACrB,sBAAA/b,EAAA,yDAC2B,IAArB0b,EAAUjV,OADhB,yCAEW,IAFX,gCAIWmV,EAAqBF,IAJhC,2CAQA,CAACA,IAEH,MAAO,CACLA,YACAC,eACA9J,UDT+BoV,GAAzBtL,EAHJ,EAGIA,aAAc9J,EAHlB,EAGkBA,OAEhB8K,EAAqB,SAACnR,EAAD,GAAoB,IAAd+Q,EAAa,EAAbA,OACzB2K,EAAmB,CACvBnJ,SAAUxB,EAAOrW,MACjB8B,UAAW+D,EAAOC,cAAc/K,GAChCwF,OAAQ8V,EAAO9V,OACfzC,cAAe+H,EAAOA,OAAOtF,OAAS,GAExCugB,EAAeE,IA8BjB,OAZE7K,OADoBC,IAAlBzK,EAAO0K,OACC,GAEA1K,EAAO0K,OAAOpL,KAAI,SAAAoL,GAAM,MAAK,CACrChP,IAAKgP,EAAOwB,SACZtB,MAAOF,EAAO1U,YACd6U,YAAY,GAAD,OAAKH,EAAOxX,OAAZ,kCACKwX,EAAOvX,OACvByB,OAAQ8V,EAAO9V,OACfP,MAAOqW,EAAOwB,aAIdhN,EACK,kBAAC,IAAD,CAAUzE,GAAG,YAIpB,yBAAK3M,MAAO,CAAEinB,WAAY,OAAQva,aAAc,SAC9C,kBAACkF,GAAA,EAAD,CAAM+C,QAAQ,cACZ,kBAAC/C,GAAA,EAAK2B,IAAN,CAAUqB,QAAQ,KAChB,kBAACvJ,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,YACA,kBAACE,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,KACE,kBAAC,KAAD,CACE2I,QAAShC,EAAOgC,QAChB+I,eAAgBD,EAChBE,eAAgB,SAAArR,GAAC,OAAImQ,EAAanQ,EAAEC,OAAOvF,QAC3C4W,kBAAmBH,EACnBN,QAASA,EACT1c,MAAO,CAAE4d,OAAQ,cAGrB,kBAACvS,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CAAQhM,MAAM,QAAQ8K,QAjDlB,WACX6V,GAGHgE,EAAwBhE,GACxByG,EAAe,OAHf9d,EAAuB,iBAAkB,UA+C/B,kCAKJ,kBAAC8B,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,KACG,IACD,kBAACU,EAAA,EAAD,CAAQlB,QAhDK,WACzBsG,GAAY,IA+CqCpR,MAAM,QAA3C,qBAIF,kBAACoL,EAAA,EAAKE,MAAN,KACG,IACD,kBAAC,GAAD,e,UEuUDic,GAJoB7nB,aANX,SAAAC,GACtB,MAAO,CACLwM,OAAQxM,EAAMwM,UAI0C,CAC1Dqb,yBnCjZ+B,SAAA7hB,GAAY,8CAAI,WAAMlE,GAAN,eAAArB,EAAA,sEAE7CqB,EAAS,CACP3B,KAAMG,IAHqC,SAKxB4d,GAAa7X,oBAAoBL,GALT,OAKvCO,EALuC,OAM7CzE,EAAS,CACP3B,KhDG6B,sBgDF7Ba,KAAMuF,IARqC,gDAW7CtE,QAAQC,IAAR,MAX6C,yDAAJ,wDmCgZVnC,EAtZT,SAAC,GAA0C,IAAxCyM,EAAuC,EAAvCA,OAAQqb,EAA+B,EAA/BA,yBAA+B,EAC1C9d,mBAAS+d,mBAAStb,EAAOC,cAAcS,eADG,mBAC3DxJ,EAD2D,KACrDqkB,EADqD,OAElChe,mBAAS,OAFyB,mBAE3DzD,EAF2D,KAEjD0hB,EAFiD,OAGhCje,mBAChCyC,EAAOC,cAAcW,mBAAmBC,MAAM,EAAG,IAJe,mBAG3DhG,EAH2D,KAGhD4gB,EAHgD,OAMpCle,mBAC5ByC,EAAOC,cAAca,iBAAiBD,MAAM,EAAG,IAPiB,mBAM3D/F,EAN2D,KAMlD4gB,EANkD,KAwSlE,OACE,yBAAK9nB,MAAO,CAAEinB,WAAY,OAAQva,aAAc,SAC9C,kBAACkF,GAAA,EAAD,CAAM+C,QAAQ,cACZ,kBAAC/C,GAAA,EAAK2B,IAAN,CAAUqB,QAAS,GACjB,kBAACvJ,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,+BACA,kBAACE,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACEC,QAAS+G,KACTG,SAAUpP,EACVqP,WAAW,aACXH,OAAQC,KACR7G,SAAU,SAAAtI,GAAI,OAAIqkB,EAAQrkB,IAC1B2E,MAAM,wBAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTjD,YAAY,WACZqG,aAAW,EACXC,WAAS,EACTtE,QA7SQ,CACpB,CACEC,IAAK,MACLC,KAAM,WACNtH,MAAO,OAET,CACEqH,IAAK,OACLC,KAAM,WACNtH,MAAO,SAqSGqF,SAnTM,SAACC,EAAD,GAAmB,IAAbtF,EAAY,EAAZA,MACxBsF,EAAEuG,iBACFwV,EAAYrhB,IAkTAyF,aAAc9F,EACd+B,MAAM,oBAGV,kBAACoD,EAAA,EAAKgH,MAAN,CAAYC,OAAO,SACjB,kBAACjH,EAAA,EAAKE,MAAN,CACEC,QAASoD,IACTjD,YAAY,eACZqG,aAAW,EACXC,WAAS,EACTC,QAAM,EACNvE,QA5SW,CACvB,CACEC,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,MAET,CACEqH,IAAK,QACLC,KAAM,QACNtH,MAAO,OAsLGqF,SAnLO,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC7B4L,EAAMC,iBACNyV,EAAathB,IAkLDyF,aAAc/E,EACdgB,MAAM,iBAER,kBAACoD,EAAA,EAAKE,MAAN,CACEC,QAA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AO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,aAkTKqF,SA/SK,SAACuG,EAAD,GAAuB,IAAb5L,EAAY,EAAZA,MAC7B4L,EAAMC,iBACNnB,EAAoB1K,MA+SR,kBAAC8E,EAAA,EAAKE,MAAN,CACEtD,MAAM,sBACNuD,QAASoD,IACTrI,MAAO2K,EACPc,aAAW,EACXC,WAAS,EACTC,QAAM,EACNvE,QAlTO,CACrB,CACEC,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,EACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,YAET,CACEqH,IAAK,GACLC,KAAM,QACNtH,MAAO,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","file":"static/js/main.f071a271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fa00af7b.png\";","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst ModalNotification = ({ notification }) => {\n  if (notification.message === null) {\n    return null;\n  }\n  if (notification.type === 'success') {\n    return <span style={{ color: 'green' }}>{notification.message}</span>;\n  }\n  if (notification.type === 'fail') {\n    return <span style={{ color: 'red' }}>{notification.message}</span>;\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    notification: state.notification\n  };\n};\n\nconst connectedModalNotification = connect(\n  mapStateToProps,\n  null\n)(ModalNotification);\n\nexport default connectedModalNotification;\n","// Login actions:\nexport const INIT_USER = 'INIT_USER';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\n\n// user actions\nexport const INIT_USERS_LIST = 'INIT_USERS_LIST';\nexport const USER_ERROR = 'USER_ERROR';\nexport const SET_CURRENT = 'SET_CURRENT';\nexport const CREATE_USER = 'CREATE_USER';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const UPDATE_CURRENT_USER = 'UPDATE_CURRENT_USER';\nexport const DELETE_USER = 'DELETE_USER';\n\n// report actions\nexport const GET_ONE_REPORT = 'GET_ONE_REPORT';\nexport const GET_REPORT_DETAILS = 'GET_REPORT_DETAILS';\nexport const GET_ALL_REPORTS_BY_DATE = 'GET_ALL_REPORTS_BY_DATE';\nexport const GET_ALL_IN_PROGRESS = 'GET_ALL_IN_PROGRESS';\nexport const GET_ALL_REPORT_TRANSFERS = 'GET_ALL_REPORT_TRANSFERS';\nexport const GENERATE_REPORT_TRANSFER = 'GENERATE_REPORT_TRANSFER';\nexport const CREATE_REPORT = 'CREATE_REPORT';\nexport const COPY_REPORT = 'COPY_REPORT';\nexport const UPDATE_REPORT = 'UPDATE_REPORT';\nexport const DELETE_REPORT = 'DELETE_REPORT';\nexport const GET_DJONLINE_TRACKS = 'GET_DJONLINE_TRACKS';\nexport const REPORT_ERROR = 'REPORT_ERROR';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const DELETE_TRACK_FROM_REPORT = 'DELETE_TRACK_FROM_REPORT';\nexport const CHECK_FOR_DELETE = 'CHECK_FOR_DELETE';\nexport const UNCHECK_FOR_DELETE = 'UNCHECK_FOR_DELETE';\nexport const DOWNLOAD_REPORT = 'DOWNLOAD_REPORT';\nexport const FILTER_BY_USER_ID = 'FILTER_BY_USER_ID';\nexport const FILTER_BY_STATUS = 'FILTER_BY_STATUS';\nexport const FILTER_BY_TEXT = 'FILTER_BY_TEXT';\nexport const SET_EDIT_TRACK_ID = 'SET_EDIT_TRACK_ID';\n\n// program actions\nexport const GET_ALL_PROGRAMS = 'GET_ALL_PROGRAMS';\nexport const GET_ALL_ACTIVE_PROGRAMS = 'GET_ALL_ACTIVE_PROGRAMS';\nexport const GET_ONE_PROGRAM = 'GET_ONE_PROGRAM';\nexport const CREATE_NEW_PROGRAM = 'CREATE_NEW_PROGRAM';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\nexport const UPDATE_PROGRAM = 'UPDATE_PROGRAM';\n\n// search actions\nexport const AUTOCOMPLETE_RESULTS = 'AUTOCOMPLETE_RESULTS';\nexport const ADVANCED_RESULTS = 'ADVANCED_RESULTS';\nexport const SORT_ADVANCED_RESULTS = 'SORT_ADVANCED_RESULTS';\nexport const SET_SEARCH_LOADING = 'SET_SEARCH_LOADING';\nexport const GET_DISCOGS_CATID = 'GET_DISCOGS_CATID';\nexport const CLEAR_DISCOGS_CATID = 'CLEAR_DISCOGS_CATID';\nexport const TOP_100 = 'TOP_100';\nexport const TOP_100_QUERY = 'TOP_100_QUERY';\nexport const GET_CHANGE_ALBUM_OPTIONS = 'GET_CHANGE_ALBUM_OPTIONS';\nexport const GET_CHANGE_ARTIST_OPTIONS = 'GET_CHANGE_ARTIST_OPTIONS';\nexport const RESET_CHANGE_ALBUM_OPTIONS = 'RESET_CHANGE_ALBUM_OPTIONS';\nexport const RESET_CHANGE_ARTIST_OPTIONS = 'RESET_CHANGE_ARTIST_OPTIONS';\n\n// track actions\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const GET_ONE_TRACK_HISTORY = 'GET_ONE_TRACK_HISTORY';\nexport const CLEAR_CURRENT_TRACK = 'CLEAR_CURRENT_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const CHANGE_ALBUM = 'CHANGE_ALBUM';\nexport const CHANGE_ARTIST = 'CHANGE_ARTIST';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\n\n// artist actions\nexport const GET_ONE_ARTIST = 'GET_ONE_ARTIST';\nexport const GET_ALBUM_LIST_BY_ARTIST = 'GET_ALBUM_LIST_BY_ARTIST';\nexport const CLEAR_CURRENT_ARTIST = 'CLEAR_CURRENT_ARTIST';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\n\n// album actions\nexport const GET_ONE_ALBUM = 'GET_ONE_ALBUM';\nexport const GET_TRACKLIST_OF_ALBUM = 'GET_TRACKLIST_OF_ALBUM';\nexport const CLEAR_CURRENT_ALBUM = 'CLEAR_CURRENT_ALBUM';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\nexport const CHANGE_ARTIST_OF_ALBUM = 'CHANGE_ARTIST_OF_ALBUM';\n\n// preloader actions\nexport const SET_LOADING = 'SET_LOADING';\n","import axios from 'axios';\n\nconst baseUrl = '/api/users';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const req = await axios.get(baseUrl, config);\n  return req.data;\n};\n\nconst createUser = async userToAdd => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.post(baseUrl, userToAdd, config);\n  return request.data;\n};\n\nconst updateUser = async userToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(\n    `${baseUrl}/${userToUpdate.id}`,\n    userToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst deleteUser = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.delete(`${baseUrl}/${id}`, config);\n  return response.data;\n};\n\nexport default { getAll, setToken, createUser, updateUser, deleteUser };\n","import {\n  INIT_USERS_LIST,\n  SET_LOADING,\n  SET_CURRENT,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER\n} from './types';\nimport userService from '../services/users';\n\nexport const initializeUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const users = await userService.getAll();\n    dispatch({\n      type: INIT_USERS_LIST,\n      data: users\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// Set current user for editing\nexport const setCurrent = user => {\n  return {\n    type: SET_CURRENT,\n    payload: user\n  };\n};\n\nexport const createUser = userToAdd => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const newUser = await userService.createUser(userToAdd);\n    dispatch({\n      type: CREATE_USER,\n      data: newUser\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateUser = userToUpdate => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await userService.updateUser(userToUpdate);\n    const users = await userService.getAll();\n    dispatch({\n      type: UPDATE_USER,\n      data: users\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteUser = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    dispatch({\n      type: DELETE_USER,\n      data: id\n    });\n    await userService.deleteUser(id);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import axios from 'axios';\n\nconst baseUrl = '/api/login';\n\nconst login = async credentials => {\n  const res = await axios.post(baseUrl, credentials);\n  return res.data;\n};\n\nexport default { login };\n","import axios from 'axios';\n\nconst baseUrl = '/api/artists';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\n// get artist details\nconst getOneArtist = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getAlbumsByArtist = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.get(`${baseUrl}/albumsby/${id}`, config);\n  return response.data;\n};\n\nconst updateArtist = async artistToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(\n    `${baseUrl}/details/${artistToUpdate.id}`,\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateArtist,\n  getOneArtist,\n  getAlbumsByArtist\n};\n","import axios from 'axios';\n\nconst baseUrl = '/api/albums';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\nconst getOneAlbum = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.get(`${baseUrl}/albumdetails/${id}`, config);\n  return response.data;\n};\n\nconst getTracklistOfAlbum = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.get(`${baseUrl}/tracklist/${id}`, config);\n  return response.data;\n};\n\nconst updateAlbum = async albumToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(\n    `${baseUrl}/albumdetails/${albumToUpdate.id}`,\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst changeArtistId = async artistToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(\n    '/api/albums/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateAlbum,\n  getOneAlbum,\n  getTracklistOfAlbum,\n  changeArtistId\n};\n","import axios from 'axios';\n\nconst baseUrl = '/api/programs';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAllActive = async () => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const req = await axios.get(`${baseUrl}/active`, config);\n  return req.data;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const req = await axios.get(`${baseUrl}/all`, config);\n  return req.data;\n};\n\nconst getOne = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`${baseUrl}/getone/${id}`, config);\n  return request.data;\n};\n\nconst createProgram = async newProgram => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.post(baseUrl, newProgram, config);\n  return request.data;\n};\n\nconst updateProgram = async updatedProgram => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.put(`${baseUrl}/update`, updatedProgram, config);\n  return request.data;\n};\n\nconst mergePrograms = async mergeParams => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.put(`${baseUrl}/merge`, mergeParams, config);\n  return request.data;\n};\n\nexport default {\n  getAllActive,\n  getAll,\n  getOne,\n  createProgram,\n  updateProgram,\n  mergePrograms,\n  setToken\n};\n","import axios from 'axios';\n\nconst download = require('downloadjs');\n\nconst baseUrl = '/api/reports';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\n// get a list of reports by date\nconst getAllByDate = async date => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`/api/reportslist/date/${date}`, config);\n  return request.data;\n};\n\n// get all by month and by user\nconst getAllByDateByUser = async (date, user) => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(\n    `/api/reportslist/all?date=${date}&user=${user}`,\n    config\n  );\n  return request.data;\n};\n\n// get all in progress reports of one user\nconst getAllInProgress = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`/api/reportslist/user/${id}`, config);\n  return request.data;\n};\n\n// get one report with tracks\nconst getOne = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst getAllTransfers = async () => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get('/api/reporttransfer', config);\n  return request.data;\n};\n\nconst addTrackToReport = async trackToAdd => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.post(`${baseUrl}`, trackToAdd, config);\n  return request.data;\n};\n\nconst deleteTrackFromReport = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.delete(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst deleteReport = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.put(`/api/reportslist/${id}`, {}, config);\n  return request.data;\n};\n\nconst updateSortableRank = async remainingTracks => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  if (remainingTracks === null) {\n    return;\n  }\n  remainingTracks.forEach(async (track, index) => {\n    const trackToUpdate = {\n      sortable_rank: index + 1\n    };\n    const request = await axios.put(\n      `${baseUrl}/${track.report_track_id}`,\n      trackToUpdate,\n      config\n    );\n    return request.data;\n  });\n};\n\nconst getReportDetails = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`/api/reportdetails/details/${id}`, config);\n  return request.data;\n};\n\n// create new report\nconst createReport = async newReport => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.post('/api/reportdetails', newReport, config);\n  return response.data;\n};\n\n// update existing report details\nconst updateReport = async updatedReport => {\n  const config = {\n    headers: { Authorization: token }\n  };\n\n  await axios.put(\n    `/api/reportdetails/update/${updatedReport.id}`,\n    updatedReport,\n    config\n  );\n  return updatedReport;\n};\n\n// generate text file for download\nconst generateReportDownload = async params => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' }\n    };\n    const request = await axios.post('/api/reporttransfer', params, config);\n    return request.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// download report\nexport const downloadReport = async filename => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' }\n    };\n    const response = await axios.get(`/api/reporttransfer/${filename}`, config);\n    download(response.data, filename);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default {\n  setToken,\n  addTrackToReport,\n  deleteTrackFromReport,\n  deleteReport,\n  updateSortableRank,\n  getOne,\n  getAllByDate,\n  getAllByDateByUser,\n  getAllInProgress,\n  getAllTransfers,\n  getReportDetails,\n  createReport,\n  updateReport,\n  generateReportDownload,\n  downloadReport\n};\n","import axios from 'axios';\n\nconst baseUrl = '/api/search';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\nconst getTracksForSearch = async query => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`${baseUrl}/autocomplete/${query}`, config);\n  return request.data;\n};\n\nconst getCatIdFromDiscogs = async query => {\n  const request = await axios.get(\n    `https://api.discogs.com/database/search?artist=${query.artist}&release_title=${query.album}&token=${process.env.REACT_APP_DISCOGS_TOKEN}`\n  );\n  return request.data;\n};\n\nconst getTop100 = async query => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(\n    `/api/top100?list=${query.list}&start_date=${query.start_date}&end_date=${query.end_date}`,\n    config\n  );\n  return request.data;\n};\n\nconst advancedSearch = async searchParams => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(\n    `${baseUrl}/advanced?kind=${searchParams.kind}&query=${searchParams.query}`,\n    config\n  );\n  return request.data;\n};\n\nconst merge = async mergeParams => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.put(`${baseUrl}/advanced`, mergeParams, config);\n  return request.data;\n};\n\nconst changeArtistOptions = async query => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`${baseUrl}/changeartist/${query}`, config);\n  return request.data;\n};\n\nconst changeAlbumOptions = async query => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const request = await axios.get(`${baseUrl}/changealbum/${query}`, config);\n  return request.data;\n};\n\nexport default {\n  setToken,\n  getTracksForSearch,\n  advancedSearch,\n  getCatIdFromDiscogs,\n  getTop100,\n  merge,\n  changeArtistOptions,\n  changeAlbumOptions\n};\n","import axios from 'axios';\n\nconst baseUrl = '/api/tracks';\nlet token = null;\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\nconst checkDjonlineTracks = async searchParams => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const tracks = await axios.get(\n    `${process.env.REACT_APP_PLAYLOG_URL}?id=${searchParams.studioId}&date=${searchParams.date}`\n  );\n\n  let arr = [];\n  const entries = Object.entries(tracks.data);\n  // eslint-disable-next-line no-unused-vars\n  entries.forEach(([key, value]) => {\n    arr.push(value);\n  });\n  arr = arr.reverse();\n\n  // old with for of\n  // let arr = [];\n  // for (const prop in tracks.data) {\n  //   arr.push(tracks.data[prop]);\n  // }\n  // console.log('arr', arr);\n  // arr = arr.reverse();\n  const newArr = [];\n  arr.forEach(track => {\n    let hours = track.date.charAt(11) + track.date.charAt(12);\n    hours = parseInt(hours);\n    const a = track.length.split(':');\n    const seconds = parseInt(a[0]) * 60 + parseInt(a[1]);\n    // make loop skip the songs not matching the start time - end time -window\n    if (\n      hours < parseInt(searchParams.startTime) ||\n      hours >= parseInt(searchParams.endTime)\n    ) {\n      return;\n    }\n    newArr.push({\n      album_name: track.album,\n      artist_name: track.artist,\n      cat_id: track.matrix,\n      disc_no: track.side,\n      track_no: track.tracknumber,\n      isrc: track.isrc,\n      record_country: track.recording_country,\n      country: null,\n      play_time: track.date,\n      djonline_id: track.id,\n      label: track.label,\n      length: seconds,\n      track_title: track.song,\n      year: track.year,\n      // sortable_rank: searchParams.sortable_rank_start + index + 1,\n      report_id: searchParams.report_id\n    });\n  });\n  const newerArr = [];\n  newArr.forEach((track, index) => {\n    newerArr.push({\n      ...track,\n      sortable_rank: searchParams.sortable_rank_start + index + 1\n    });\n  });\n  const returnArr = [];\n  newerArr.forEach(async track => {\n    const request = await axios.post(`${baseUrl}/djonline`, track, config);\n    returnArr.push(request.data);\n  });\n  return returnArr;\n};\n\n// add new track and save it to a report\nconst addNewTrack = async trackToAdd => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.post(\n    `${baseUrl}/addandreport`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\n// add new track without saving to report\nconst addTrackToDb = async trackToAdd => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.post(`${baseUrl}/addtodb`, trackToAdd, config);\n  return response.data;\n};\n\nconst updateTrack = async trackToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(baseUrl, trackToUpdate, config);\n  return response.data;\n};\n\nconst updateAlbumId = async albumToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(\n    '/api/tracks/updatealbum',\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst updateArtistId = async artistToUpdate => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.put(\n    '/api/tracks/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst getOneTrack = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getOneTrackHistory = async id => {\n  const config = {\n    headers: { Authorization: token }\n  };\n  const response = await axios.get(`${baseUrl}/history/${id}`, config);\n  return response.data;\n};\n\nexport default {\n  setToken,\n  checkDjonlineTracks,\n  addNewTrack,\n  updateTrack,\n  getOneTrack,\n  getOneTrackHistory,\n  updateAlbumId,\n  updateArtistId,\n  addTrackToDb\n};\n","const initialState = {\n  message: null,\n  type: null\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_NOTIFICATION':\n      return action.data;\n\n    case 'CLEAR_NOTIFICATION':\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  const content = {\n    message,\n    type\n  };\n  return async dispatch => {\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION'\n      });\n    }, 3000);\n  };\n};\n\nexport default notificationReducer;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Input } from 'semantic-ui-react';\nimport ModalNotification from '../layout/ModalNotification';\nimport { updateUser } from '../../actions/userActions';\nimport { updateCurrentUser } from '../../actions/loginActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst LoggedInUserModal = ({\n  login,\n  updateUserConnect,\n  updateCurrentUserConnect,\n  setNotificationConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [firstName, setFirstName] = useState(login.first_name);\n  const [lastName, setLastName] = useState(login.last_name);\n  const [email, setEmail] = useState(login.email);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const updateUserClick = () => {\n    if (password.length === 0 && confirmPassword.length === 0) {\n      const userToUpdate = {\n        id: login.id,\n        first_name: firstName,\n        last_name: lastName,\n        email\n      };\n      updateCurrentUserConnect(userToUpdate);\n      updateUserConnect(userToUpdate);\n      setNotificationConnect('Omat tiedot päivitetty!', 'success');\n      handleClose();\n    } else if (password !== confirmPassword || password.length <= 3) {\n      setNotificationConnect('Tarkasta salasanat!', 'fail');\n    } else {\n      const userToUpdate = {\n        id: login.id,\n        password,\n        first_name: firstName,\n        last_name: lastName,\n        email\n      };\n      handleClose();\n      updateCurrentUserConnect(userToUpdate);\n      updateUserConnect(userToUpdate);\n      setNotificationConnect('Omat tiedot päivitetty!', 'success');\n    }\n  };\n\n  return (\n    <Modal\n      trigger={\n        <span role='menuitem' tabIndex='-8' onClick={handleOpen}>\n          Omat tiedot\n        </span>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Muokkaa tietoja' />\n      <Modal.Content>\n        <Form onSubmit={updateUserClick}>\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Salasana...'\n            onChange={e => setPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana - syötä vaihtaaksesi</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Vahvista salasana...'\n            onChange={e => setConfirmPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana uudelleen</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={firstName}\n            type='text'\n            placeholder='Etunimi...'\n            onChange={e => setFirstName(e.target.value)}\n            label='Etunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={lastName}\n            type='text'\n            placeholder='Sukunimi...'\n            onChange={e => setLastName(e.target.value)}\n            label='Sukunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={email}\n            type='email'\n            placeholder='Email...'\n            onChange={e => setEmail(e.target.value)}\n            label='Email'\n          />\n          <Button\n            color='green'\n            type='submit'\n            disabled={!email || !firstName || !lastName}\n          >\n            Tallenna\n          </Button>\n          <ModalNotification />\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nLoggedInUserModal.propTypes = {\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  updateUserConnect: PropTypes.func,\n  updateCurrentUserConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    login: state.login\n  };\n};\n\nconst connectedLoggedInUserModal = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  updateUserConnect: updateUser,\n  updateCurrentUserConnect: updateCurrentUser\n})(LoggedInUserModal);\n\nexport default connectedLoggedInUserModal;\n","import loginService from '../services/login';\nimport artistService from '../services/artists';\nimport albumService from '../services/albums';\nimport programService from '../services/programs';\nimport reportService from '../services/reports';\nimport searchService from '../services/search';\nimport trackService from '../services/tracks';\nimport userService from '../services/users';\nimport {\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  LOGIN_ERROR,\n  UPDATE_CURRENT_USER,\n  SET_LOADING\n} from './types';\n\nexport const initializeUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      // set token for logged in user\n      userService.setToken(user.token);\n      reportService.setToken(user.token);\n      programService.setToken(user.token);\n      searchService.setToken(user.token);\n      trackService.setToken(user.token);\n      artistService.setToken(user.token);\n      albumService.setToken(user.token);\n      dispatch({\n        type: INIT_USER,\n        data: user\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\n\nexport const newLogin = user => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const newUser = await loginService.login(user);\n    window.localStorage.setItem('loggedUser', JSON.stringify(newUser));\n    // set token for logged in user\n    // blogService.setToken(newUser.token);\n    dispatch({\n      type: LOGIN,\n      data: newUser,\n      loading: false\n    });\n  } catch (exception) {\n    const content = {\n      message: 'wrong username or password',\n      type: 'fail'\n    };\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION'\n      });\n    }, 3000);\n  }\n};\n\nexport const updateCurrentUser = userToUpdate => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_CURRENT_USER,\n      data: userToUpdate\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const logout = () => async dispatch => {\n  window.localStorage.removeItem('loggedUser');\n  dispatch({\n    type: LOGOUT\n  });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\nconst CurrentReport = ({ report }) => {\n  if (!report.reportDetails) {\n    return null;\n  }\n  return (\n    <div\n      style={{\n        display: 'inline',\n        color: 'white',\n        float: 'right',\n        marginTop: 'auto',\n        // marginLeft: 'auto',\n        marginRight: '0.6rem',\n        marginBottom: '0.7rem'\n      }}\n    >\n      <Link to={`/reports/${report.reportDetails.id}`}>\n        {report.reportDetails.program_name} <br />\n        {moment(report.reportDetails.program_date).format('DD.MM.YYYY')}{' '}\n        {report.reportDetails.program_start_time.slice(0, -3)} -{' '}\n        {report.reportDetails.program_end_time.slice(0, -3)}\n      </Link>\n    </div>\n  );\n};\n\nCurrentReport.propTypes = {\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      id: PropTypes.number,\n      program_name: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string\n    })\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report\n  };\n};\n\nconst connectedCurrentReport = connect(mapStateToProps, null)(CurrentReport);\n\nexport default connectedCurrentReport;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport LoggedInUserInfo from '../user/LoggedInUserInfo';\nimport CurrentReport from '../report/CurrentReport';\nimport { logout } from '../../actions/loginActions';\n\nimport logo from '../../img/logo.png';\n\nconst Navbar = ({ first_name, last_name, login, logoutConnect }) => {\n  const getLoggedInUserInfo = () => {\n    return <LoggedInUserInfo />;\n  };\n  const handleLogoutClick = () => {\n    logoutConnect();\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {first_name} {last_name}\n    </span>\n  );\n  const options = [\n    {\n      key: 'user',\n      text: <LoggedInUserInfo />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo\n    },\n    {\n      key: 'sign-out',\n      text: 'Kirjaudu ulos',\n      icon: 'sign out',\n      onClick: handleLogoutClick\n    }\n  ];\n\n  if (login.level === 1) {\n    return (\n      <div style={{ marginBottom: '1.5rem' }}>\n        <Menu pointing stackable inverted>\n          <Menu.Item link>\n            <Link to='/'>\n              <Image alt='logo' src={logo} size='small' />\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/reports'>\n              <h4>RAPORTIT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/top100'>\n              <h4>TOP 100</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/search'>\n              <h4>HAKU</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item position='right'>\n            <Dropdown\n              trigger={trigger}\n              options={options}\n              pointing='top left'\n              icon={null}\n            />\n          </Menu.Item>\n          <Menu.Item>\n            <CurrentReport />\n          </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n\n  if (login.level === 2) {\n    return (\n      <div style={{ marginBottom: '1.5rem' }}>\n        <Menu pointing stackable inverted>\n          <Menu.Item link>\n            <Link to='/'>\n              <Image alt='logo' src={logo} size='small' />\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item link>\n            <Link to='/reports'>\n              <h4>RAPORTIT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/top100'>\n              <h4>TOP 100</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/search'>\n              <h4>HAKU</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/programs'>\n              <h4>OHJELMAT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item position='right'>\n            <Dropdown\n              trigger={trigger}\n              options={options}\n              pointing='top left'\n              icon={null}\n            />\n          </Menu.Item>\n          <Menu.Item>\n            <CurrentReport />\n          </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n  if (login.level === 3) {\n    return (\n      <div style={{ marginBottom: '1.5rem' }}>\n        <Menu pointing stackable inverted>\n          <Menu.Item link>\n            <Link to='/'>\n              <Image alt='logo' src={logo} size='small' />\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/reports'>\n              <h4>RAPORTIT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/top100'>\n              <h4>TOP 100</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/search'>\n              <h4>HAKU</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/transfer'>\n              <h4>SIIRTOTIEDOSTOT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/users'>\n              <h4>KÄYTTÄJÄT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item link>\n            <Link to='/programs'>\n              <h4>OHJELMAT</h4>\n            </Link>\n          </Menu.Item>\n          <Menu.Item position='right'>\n            <Dropdown\n              trigger={trigger}\n              options={options}\n              pointing='top left'\n              icon={null}\n            />\n          </Menu.Item>\n          <Menu.Item>\n            <CurrentReport />\n          </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n};\n\nNavbar.propTypes = {\n  first_name: PropTypes.string,\n  last_name: PropTypes.string,\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  logoutConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    login: state.login\n  };\n};\n\nconst connectedNavbar = connect(mapStateToProps, { logoutConnect: logout })(\n  Navbar\n);\n\nexport default connectedNavbar;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div\n      style={{ marginTop: '5rem', marginBottom: '2rem', textAlign: 'center' }}\n    >\n      <br />\n      <em>\n        {' '}\n        &copy; {new Date().getFullYear()}{' '}\n        <a\n          href='https://www.radiohelsinki.fi'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          {' '}\n          Radio Helsinki{' '}\n        </a>{' '}\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nconst Togglable = ({ size, style, color, buttonLabel, children }) => {\n  const [visible, setVisible] = useState(false);\n\n  const hideWhenVisible = { display: visible ? 'none' : '' };\n  const showWhenVisible = { display: visible ? '' : 'none' };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <Button\n          size={size}\n          style={style}\n          color={color}\n          onClick={toggleVisibility}\n        >\n          {buttonLabel}\n        </Button>\n      </div>\n      <div style={showWhenVisible}>\n        {children}\n        <Button\n          size={size}\n          style={style}\n          color={color}\n          onClick={toggleVisibility}\n        >\n          Piilota\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nTogglable.propTypes = {\n  size: PropTypes.string,\n  color: PropTypes.string,\n  buttonLabel: PropTypes.string,\n  style: PropTypes.shape({\n    marginTop: PropTypes.string,\n    float: PropTypes.string\n  }),\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.object\n};\n\nexport default Togglable;\n","import {\n  GET_ONE_REPORT,\n  GET_REPORT_DETAILS,\n  SET_EDIT_TRACK_ID,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  SET_LOADING\n} from './types';\nimport reportService from '../services/reports';\nimport programService from '../services/programs';\n\n// get one report with tracks by report id\nexport const getOneReport = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const report = await reportService.getOne(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const setEditTrackId = id => async dispatch => {\n  dispatch({\n    type: SET_EDIT_TRACK_ID,\n    data: id\n  });\n};\n\n// add track to a report\nexport const addTrackToReport = trackToAdd => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const track = await reportService.addTrackToReport(trackToAdd);\n    const report = await reportService.getOne(track.report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// delete track from report\nexport const deleteTrackFromReport = params => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await reportService.deleteTrackFromReport(params.report_track_id);\n    await reportService.updateSortableRank(params.remainingTracks);\n    const report = await reportService.getOne(params.report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// get report details by report id\nexport const getReportDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const reportArray = await reportService.getReportDetails(id);\n    const report = reportArray[0];\n    dispatch({\n      type: GET_REPORT_DETAILS,\n      data: report,\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createReport = newReport => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    if (newReport.program_id === '' && newReport.new_program_name !== '') {\n      const newProgram = {\n        name: newReport.new_program_name,\n        user_id: newReport.user_id\n      };\n      const program = await programService.createProgram(newProgram);\n      dispatch({\n        type: CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n        data: program\n      });\n      const newReportWithNewProgram = {\n        ...newReport,\n        program_id: program.id,\n        display: 1\n      };\n      const report = await reportService.createReport(newReportWithNewProgram);\n      dispatch({\n        type: CREATE_REPORT,\n        data: report\n      });\n    } else {\n      const report = await reportService.createReport(newReport);\n      dispatch({\n        type: CREATE_REPORT,\n        data: report\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const copyReport = (\n  reportDetailsToCopy,\n  reportTracksToCopy\n) => async dispatch => {\n  dispatch({\n    type: SET_LOADING\n  });\n  const report = await reportService.createReport(reportDetailsToCopy);\n  dispatch({\n    type: CREATE_REPORT,\n    data: report\n  });\n  reportTracksToCopy.forEach(async track => {\n    const trackToAdd = {\n      ...track,\n      report_id: report.id,\n      report_track_id: null\n    };\n    await reportService.addTrackToReport(trackToAdd);\n  });\n  const newReport = await reportService.getOne(report.id);\n  dispatch({\n    type: GET_ONE_REPORT,\n    data: newReport\n  });\n};\n\nexport const updateReport = updatedReport => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await reportService.updateReport(updatedReport);\n    dispatch({\n      type: UPDATE_REPORT,\n      data: updatedReport\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const checkForDelete = id => async dispatch => {\n  try {\n    dispatch({\n      type: CHECK_FOR_DELETE,\n      data: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const unCheckForDelete = id => async dispatch => {\n  try {\n    dispatch({\n      type: UNCHECK_FOR_DELETE,\n      data: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteChecked = (\n  idsToDelete,\n  // eslint-disable-next-line camelcase\n  report_id,\n  remainingTracks\n) => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    idsToDelete.forEach(async id => {\n      await reportService.deleteTrackFromReport(id);\n    });\n    await reportService.updateSortableRank(remainingTracks);\n    const report = await reportService.getOne(report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// eslint-disable-next-line camelcase\nexport const updateSortableRank = (newOrder, report_id) => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await reportService.updateSortableRank(newOrder);\n    const report = await reportService.getOne(report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport {\n  Form,\n  Button,\n  Input,\n  Dropdown,\n  Container,\n  Grid,\n  Popup,\n  Icon\n} from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport fi from 'date-fns/locale/fi';\nimport moment from 'moment';\nimport Togglable from '../layout/Togglable';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { createReport } from '../../actions/reportActions';\n\nconst CreateNewReportForm = ({\n  login,\n  programs,\n  report,\n  setNotificationConnect,\n  createReportConnect\n}) => {\n  const [programId, setProgramId] = useState('');\n  const [programNumber, setProgramNumber] = useState(null);\n  const [dj, setDj] = useState(`${login.first_name} ${login.last_name}`);\n  const [newProgramName, setNewProgramName] = useState('');\n  const [programDate, setProgramDate] = useState(new Date());\n  const [programStartTime, setProgramStartTime] = useState('');\n  const [programEndTime, setProgramEndTime] = useState('');\n  const [redirect, setRedirect] = useState(false);\n\n  // list of programoptions for select\n  const programOptions = programs.activePrograms.map(program => ({\n    key: program.id,\n    text: program.name,\n    value: program.id\n  }));\n  const getProgram = (event, { value }) => {\n    event.preventDefault();\n    setProgramId(value);\n  };\n\n  // list of program start time options\n  const startTimeOptions = [\n    {\n      key: 0,\n      text: '00:00',\n      value: '00:00:00'\n    },\n    {\n      key: 1,\n      text: '01:00',\n      value: '01:00:00'\n    },\n    {\n      key: 2,\n      text: '02:00',\n      value: '02:00:00'\n    },\n    {\n      key: 3,\n      text: '03:00',\n      value: '03:00:00'\n    },\n    {\n      key: 4,\n      text: '04:00',\n      value: '04:00:00'\n    },\n    {\n      key: 5,\n      text: '05:00',\n      value: '05:00:00'\n    },\n    {\n      key: 6,\n      text: '06:00',\n      value: '06:00:00'\n    },\n    {\n      key: 7,\n      text: '07:00',\n      value: '07:00:00'\n    },\n    {\n      key: 8,\n      text: '08:00',\n      value: '08:00:00'\n    },\n    {\n      key: 9,\n      text: '09:00',\n      value: '09:00:00'\n    },\n    {\n      key: 10,\n      text: '10:00',\n      value: '10:00:00'\n    },\n    {\n      key: 11,\n      text: '11:00',\n      value: '11:00:00'\n    },\n    {\n      key: 12,\n      text: '12:00',\n      value: '12:00:00'\n    },\n    {\n      key: 13,\n      text: '13:00',\n      value: '13:00:00'\n    },\n    {\n      key: 14,\n      text: '14:00',\n      value: '14:00:00'\n    },\n    {\n      key: 15,\n      text: '15:00',\n      value: '15:00:00'\n    },\n    {\n      key: 16,\n      text: '16:00',\n      value: '16:00:00'\n    },\n    {\n      key: 17,\n      text: '17:00',\n      value: '17:00:00'\n    },\n    {\n      key: 18,\n      text: '18:00',\n      value: '18:00:00'\n    },\n    {\n      key: 19,\n      text: '19:00',\n      value: '19:00:00'\n    },\n    {\n      key: 20,\n      text: '20:00',\n      value: '20:00:00'\n    },\n    {\n      key: 21,\n      text: '21:00',\n      value: '21:00:00'\n    },\n    {\n      key: 22,\n      text: '22:00',\n      value: '22:00:00'\n    },\n    {\n      key: 23,\n      text: '23:00',\n      value: '23:00:00'\n    }\n  ];\n  const getStartTime = (event, { value }) => {\n    event.preventDefault();\n    setProgramStartTime(value);\n  };\n\n  // list of program end time options\n  const endTimeOptions = [\n    {\n      key: 0,\n      text: '01:00',\n      value: '01:00:00'\n    },\n    {\n      key: 1,\n      text: '02:00',\n      value: '02:00:00'\n    },\n    {\n      key: 2,\n      text: '03:00',\n      value: '03:00:00'\n    },\n    {\n      key: 3,\n      text: '04:00',\n      value: '04:00:00'\n    },\n    {\n      key: 4,\n      text: '05:00',\n      value: '05:00:00'\n    },\n    {\n      key: 5,\n      text: '06:00',\n      value: '06:00:00'\n    },\n    {\n      key: 6,\n      text: '07:00',\n      value: '07:00:00'\n    },\n    {\n      key: 7,\n      text: '08:00',\n      value: '08:00:00'\n    },\n    {\n      key: 8,\n      text: '09:00',\n      value: '09:00:00'\n    },\n    {\n      key: 9,\n      text: '10:00',\n      value: '10:00:00'\n    },\n    {\n      key: 10,\n      text: '11:00',\n      value: '11:00:00'\n    },\n    {\n      key: 11,\n      text: '12:00',\n      value: '12:00:00'\n    },\n    {\n      key: 12,\n      text: '13:00',\n      value: '13:00:00'\n    },\n    {\n      key: 13,\n      text: '14:00',\n      value: '14:00:00'\n    },\n    {\n      key: 14,\n      text: '15:00',\n      value: '15:00:00'\n    },\n    {\n      key: 15,\n      text: '16:00',\n      value: '16:00:00'\n    },\n    {\n      key: 16,\n      text: '17:00',\n      value: '17:00:00'\n    },\n    {\n      key: 17,\n      text: '18:00',\n      value: '18:00:00'\n    },\n    {\n      key: 18,\n      text: '19:00',\n      value: '19:00:00'\n    },\n    {\n      key: 19,\n      text: '20:00',\n      value: '20:00:00'\n    },\n    {\n      key: 20,\n      text: '21:00',\n      value: '21:00:00'\n    },\n    {\n      key: 21,\n      text: '22:00',\n      value: '22:00:00'\n    },\n    {\n      key: 22,\n      text: '23:00',\n      value: '23:00:00'\n    },\n    {\n      key: 23,\n      text: '23:59',\n      value: '23:59:59'\n    }\n  ];\n  const getEndTime = (event, { value }) => {\n    event.preventDefault();\n    setProgramEndTime(value);\n  };\n\n  const handleCreateReportClick = () => {\n    const newReport = {\n      user_id: login.id,\n      program_id: programId,\n      new_program_name: newProgramName,\n      program_date: moment(programDate).format('YYYY-MM-DD'),\n      program_start_time: programStartTime,\n      program_end_time: programEndTime,\n      program_no: parseInt(programNumber),\n      program_dj: dj,\n      status: 0,\n      rerun: null\n    };\n    if (\n      parseInt(newReport.program_end_time) <=\n      parseInt(newReport.program_start_time)\n    ) {\n      setNotificationConnect('Tarkista ohjelman alku- ja loppuaika!', 'fail');\n    } else {\n      createReportConnect(newReport);\n      setRedirect(true);\n    }\n  };\n\n  const style = {\n    borderRadius: 0,\n    display: 'block',\n    opacity: 0.9,\n    padding: '2em'\n  };\n\n  if (redirect && report.newReport !== null) {\n    return <Redirect to={`reports/${report.newReport.id}`} />;\n  }\n\n  let disabled;\n  if (!programDate || !programStartTime || !programEndTime || !dj) {\n    disabled = true;\n  } else if (!programId && newProgramName === '') {\n    disabled = true;\n  } else {\n    disabled = false;\n  }\n\n  return (\n    <React.Fragment>\n      <Grid.Column>\n        <Container>\n          <h3>Luo uusi raportti</h3>\n          <Form>\n            <Form.Field>\n              <label>\n                Ohjelma{' '}\n                <Popup\n                  trigger={\n                    <Icon\n                      style={{ display: 'inline' }}\n                      name='question circle'\n                    />\n                  }\n                  content='Valitse ohjelma listalta. Jos ohjelmaasi ei löydy listalta niin klikkaa Luo uusi ohjelma, kirjoita ohjelmasi nimi ja jatka'\n                  style={style}\n                  inverted\n                />\n              </label>\n              <Dropdown\n                placeholder='Valitse ohjelma'\n                openOnFocus\n                selection\n                search\n                options={programOptions}\n                onChange={getProgram}\n              />{' '}\n              <Togglable\n                style={{ marginTop: '0.5rem', float: 'right' }}\n                size='tiny'\n                buttonLabel='Luo uusi ohjelma'\n              >\n                <Form.Field\n                  label='Uusi ohjelma'\n                  control={Input}\n                  type='text'\n                  value={newProgramName}\n                  onChange={e => setNewProgramName(e.target.value)}\n                />\n              </Togglable>\n            </Form.Field>\n            <Form.Field\n              control={Input}\n              type='number'\n              onChange={e => setProgramNumber(e.target.value)}\n              label={\n                <span>\n                  Ohjelmanumero{' '}\n                  <Popup\n                    trigger={\n                      <Icon\n                        style={{ display: 'inline' }}\n                        name='question circle'\n                      />\n                    }\n                    content='Tsekkaa ohjelmasi numero viikon ohjelmakartasta.'\n                    style={style}\n                    inverted\n                  />\n                </span>\n              }\n            />\n            <Form.Field\n              control={Input}\n              type='text'\n              value={dj}\n              onChange={e => setDj(e.target.value)}\n              label='DJ'\n            />\n            <Form.Group widths='equal'>\n              <Form.Field\n                control={DatePicker}\n                locale={fi}\n                selected={programDate}\n                dateFormat='dd.MM.yyyy'\n                onChange={date => setProgramDate(date)}\n                label='Ohjelman päivä'\n              />\n              <Form.Field\n                control={Dropdown}\n                placeholder='hh:mm'\n                openOnFocus\n                selection\n                search\n                options={startTimeOptions}\n                onChange={getStartTime}\n                label='Alkaa kello'\n              />\n              <Form.Field\n                control={Dropdown}\n                placeholder='hh:mm'\n                openOnFocus\n                selection\n                search\n                options={endTimeOptions}\n                onChange={getEndTime}\n                label='Päättyy kello'\n              />\n            </Form.Group>\n            <Form.Group widths='equal'>\n              <Button\n                disabled={disabled}\n                color='green'\n                onClick={handleCreateReportClick}\n              >\n                Jatka\n              </Button>\n            </Form.Group>\n          </Form>\n        </Container>\n      </Grid.Column>\n    </React.Fragment>\n  );\n};\n\nCreateNewReportForm.propTypes = {\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  programs: PropTypes.shape({\n    activePrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    ),\n    allPrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    ),\n    loading: PropTypes.bool\n  }),\n  report: PropTypes.shape({\n    newReport: PropTypes.shape({\n      id: PropTypes.number\n    })\n  }),\n  setNotificationConnect: PropTypes.func,\n  createReportConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    programs: state.programs,\n    login: state.login\n  };\n};\n\nconst connectedCreateNewReportForm = connect(mapStateToProps, {\n  createReportConnect: createReport,\n  setNotificationConnect: setNotification\n})(CreateNewReportForm);\n\nexport default connectedCreateNewReportForm;\n","import {\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  SET_LOADING,\n  CLEAR_CURRENT_REPORT,\n  DELETE_REPORT,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT\n} from './types';\nimport reportService from '../services/reports';\n// get a list of reports by user_id, date\n\n// get a list of reports by date\nexport const getAllReportsByDate = date => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT\n    });\n    const reports = await reportService.getAllByDate(date);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// get a list of reports by date\nexport const getAllReportsByDateByUser = (date, user) => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT\n    });\n    const reports = await reportService.getAllByDateByUser(date, user);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// get all in progress by current user for front page\nexport const getAllInProgress = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT\n    });\n    const reports = await reportService.getAllInProgress(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteInProgressReport = params => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await reportService.deleteReport(params.report_id);\n    const reports = await reportService.getAllInProgress(params.user_id);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteReport = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await reportService.deleteReport(id);\n    dispatch({\n      type: DELETE_REPORT,\n      data: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const filterByUserId = id => dispatch => {\n  dispatch({\n    type: FILTER_BY_USER_ID,\n    data: id\n  });\n};\n\nexport const filterByStatus = status => dispatch => {\n  dispatch({\n    type: FILTER_BY_STATUS,\n    data: status\n  });\n};\n\nexport const filterByText = text => async dispatch => {\n  dispatch({\n    type: FILTER_BY_TEXT,\n    data: text\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\nimport { deleteInProgressReport } from '../../actions/reportsListActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst InProgressReportListItem = ({\n  report,\n  login,\n  deleteInProgressReportConnect,\n  setNotificationConnect\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n\n  const confirmDelete = () => {\n    setOpen(false);\n    const params = {\n      report_id: report.id,\n      user_id: login.id\n    };\n    deleteInProgressReportConnect(params);\n    setNotificationConnect(\n      `${report.name} ${report.program_date} poistettu!`,\n      'success'\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Table.Row>\n        <Table.Cell>\n          <Link to={`reports/${report.id}`}>{report.name}</Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>{report.program_no}</Table.Cell>\n        <Table.Cell>\n          {' '}\n          <Icon color='red' onClick={() => setOpen(true)} name='delete' />\n          <Confirm\n            content={`Haluatko varmasti poistaa raportin ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n            cancelButton='En sittenkään'\n            confirmButton='Joo kyl'\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nInProgressReportListItem.propTypes = {\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  report: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    program_date: PropTypes.string,\n    program_no: PropTypes.number\n  }),\n  deleteInProgressReportConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    login: state.login\n  };\n};\n\nconst connectedInProgressReportListItem = connect(mapStateToProps, {\n  deleteInProgressReportConnect: deleteInProgressReport,\n  setNotificationConnect: setNotification\n})(InProgressReportListItem);\n\nexport default connectedInProgressReportListItem;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Table, Grid, Container, Header } from 'semantic-ui-react';\nimport InProgressReportListItem from './InProgressReportListItem';\nimport { getAllInProgress } from '../../actions/reportsListActions';\n\nconst InProgressReportsList = ({\n  reportsList,\n  login,\n  getAllInProgressConnect\n}) => {\n  useEffect(() => {\n    getAllInProgressConnect(login.id);\n    // eslint-disable-next-line\n  }, []);\n\n  if (reportsList.loading === true) {\n    return (\n      <div>\n        <h3>Omat keskeneräiset raportit</h3>\n        <div>ladataan...</div>\n      </div>\n    );\n  }\n\n  if (reportsList.inProgress === null) {\n    return null;\n  }\n  if (reportsList.inProgress.length === 0) {\n    return (\n      <Grid.Column>\n        <Container>\n          <h3>Omat keskeneräiset raportit</h3>\n          ei keskeneräisiä raportteja\n        </Container>\n      </Grid.Column>\n    );\n  }\n  return (\n    <React.Fragment>\n      <Grid.Column>\n        <Container>\n          <Header>Omat keskeneräiset raportit</Header>\n          <Table striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.Cell>Ohjelma</Table.Cell>\n                <Table.Cell>Aika</Table.Cell>\n                <Table.Cell>Nro</Table.Cell>\n                <Table.Cell></Table.Cell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {reportsList.inProgress.map(r => (\n                <InProgressReportListItem key={r.id} report={r} />\n              ))}\n            </Table.Body>\n          </Table>\n        </Container>\n      </Grid.Column>\n    </React.Fragment>\n  );\n};\n\nInProgressReportsList.propTypes = {\n  reportsList: PropTypes.shape({\n    inProgress: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        program_date: PropTypes.string,\n        program_dj: PropTypes.string,\n        program_end_time: PropTypes.string,\n        program_no: PropTypes.number,\n        program_start_time: PropTypes.string,\n        rerun: PropTypes.number,\n        status: PropTypes.number,\n        user_id: PropTypes.number\n      })\n    ),\n    loading: PropTypes.bool\n  }),\n  login: PropTypes.shape({\n    id: PropTypes.number\n  }),\n  getAllInProgressConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    reportsList: state.reportsList,\n    login: state.login\n  };\n};\n\nconst connectedInProgressReportsList = connect(mapStateToProps, {\n  getAllInProgressConnect: getAllInProgress\n})(InProgressReportsList);\n\nexport default connectedInProgressReportsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport CreateNewReportForm from '../report/CreateNewReportForm';\nimport InProgressReportsList from '../report/InProgressReportsList';\n\nconst Home = ({ programs }) => {\n  if (programs.activePrograms === null) {\n    return (\n      <Container>\n        <h2>Radio Helsinki teostoraportointi</h2>\n        <Dimmer active>\n          <Loader>Loading</Loader>\n        </Dimmer>{' '}\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      <h2>Radio Helsinki teostoraportointi</h2>\n      <Grid divided='vertically'>\n        <Grid.Row columns={2}>\n          <CreateNewReportForm />\n          <InProgressReportsList />\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nHome.propTypes = {\n  programs: PropTypes.shape({\n    activePrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    )\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    programs: state.programs\n  };\n};\n\nconst connectedHome = connect(mapStateToProps, null)(Home);\n\nexport default connectedHome;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  Icon,\n  Dropdown\n} from 'semantic-ui-react';\nimport { createUser } from '../../actions/userActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst AddUserModal = props => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [level, setLevel] = useState(1);\n  const [status, setStatus] = useState(null);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const createUserButtonClick = () => {\n    if (password !== confirmPassword) {\n      props.setNotification('Salasanat eivät täsmää!', 'fail');\n    }\n    const userToAdd = {\n      username,\n      password,\n      first_name: firstName,\n      last_name: lastName,\n      email,\n      level,\n      status\n    };\n    props.createUser(userToAdd);\n    props.setNotification(`${userToAdd.username} lisätty!`, 'success');\n    handleClose();\n  };\n\n  const levelOptions = [\n    {\n      key: 1,\n      text: 'DJ',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Toimitus',\n      value: 2\n    },\n    {\n      key: 3,\n      text: 'Admin',\n      value: 3\n    }\n  ];\n  const getLevel = (event, { value }) => {\n    event.preventDefault();\n    setLevel(value);\n  };\n\n  const getStatus = () => {\n    if (status === null) {\n      setStatus(1);\n    } else {\n      setStatus(null);\n    }\n  };\n\n  return (\n    <Modal\n      trigger={\n        <Button\n          style={{ marginBottom: '0.5rem' }}\n          onClick={handleOpen}\n          floated='right'\n          color='green'\n        >\n          <Icon name='add' />\n          LUO UUSI KÄYTTÄJÄ\n        </Button>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Luo uusi käyttäjä' />\n      <Modal.Content>\n        <Form onSubmit={createUserButtonClick}>\n          <Form.Field\n            required\n            control={Input}\n            type='text'\n            placeholder='Käyttäjätunnus...'\n            onChange={e => setUsername(e.target.value)}\n            label='Käyttäjätunnus'\n          />\n          <Form.Field\n            required\n            control={Input}\n            focus\n            type='password'\n            placeholder='Salasana...'\n            onChange={e => setPassword(e.target.value)}\n            label='Salasana'\n          />\n          <Form.Field\n            required\n            control={Input}\n            focus\n            type='password'\n            placeholder='Vahvista salasana...'\n            onChange={e => setConfirmPassword(e.target.value)}\n            label='Salasana uudelleen'\n          />\n          <Form.Field\n            required\n            control={Input}\n            focus\n            type='text'\n            placeholder='Etunimi...'\n            onChange={e => setFirstName(e.target.value)}\n            label='Etunimi'\n          />\n          <Form.Field\n            required\n            control={Input}\n            focus\n            type='text'\n            placeholder='Sukunimi...'\n            onChange={e => setLastName(e.target.value)}\n            label='Sukunimi'\n          />\n          <Form.Field\n            required\n            control={Input}\n            focus\n            type='email'\n            placeholder='Email...'\n            onChange={e => setEmail(e.target.value)}\n            label='Email'\n          />\n          <Form.Field\n            required\n            control={Dropdown}\n            selection\n            defaultValue={level}\n            options={levelOptions}\n            onChange={getLevel}\n            label='Taso'\n          />\n          <Form.Field\n            control={Form.Checkbox}\n            name='active'\n            onChange={getStatus}\n            checked={!!status}\n            label='Tunnus käytössä'\n          />\n          <Button\n            color='green'\n            type='submit'\n            disabled={\n              !username ||\n              !password ||\n              !confirmPassword ||\n              !email ||\n              !firstName ||\n              !lastName\n            }\n          >\n            Tallenna\n          </Button>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nAddUserModal.propTypes = {\n  setNotification: PropTypes.func,\n  createUser: PropTypes.func\n};\n\nconst connectedAddUserModal = connect(null, { setNotification, createUser })(\n  AddUserModal\n);\n\nexport default connectedAddUserModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  Dropdown\n} from 'semantic-ui-react';\nimport { updateUser } from '../../actions/userActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport ModalNotification from '../layout/ModalNotification';\n\nconst EditUserModal = ({ user, setNotificationConnect, updateUserConnect }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [firstName, setFirstName] = useState(user.first_name);\n  const [lastName, setLastName] = useState(user.last_name);\n  const [email, setEmail] = useState(user.email);\n  const [level, setLevel] = useState(user.level);\n  const [status, setStatus] = useState(user.status);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const updateUserClick = () => {\n    if (password.length === 0 && confirmPassword.length === 0) {\n      const userToUpdate = {\n        id: user.id,\n        first_name: firstName,\n        last_name: lastName,\n        email,\n        level,\n        status\n      };\n      setNotificationConnect(\n        `Käyttäjän ${userToUpdate.first_name} ${userToUpdate.last_name} tiedot päivitetty!`,\n        'success'\n      );\n      updateUserConnect(userToUpdate);\n      handleClose();\n    } else if (password !== confirmPassword || password.length <= 3) {\n      setNotificationConnect('Tarkasta salasanat!', 'fail');\n    } else {\n      const userToUpdate = {\n        id: user.id,\n        password,\n        first_name: firstName,\n        last_name: lastName,\n        email,\n        level,\n        status\n      };\n      updateUserConnect(userToUpdate);\n      setNotificationConnect(\n        `Käyttäjän ${userToUpdate.first_name} ${userToUpdate.last_name} tiedot päivitetty!`,\n        'success'\n      );\n      handleClose();\n    }\n  };\n\n  const levelOptions = [\n    {\n      key: 1,\n      text: 'DJ',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Toimitus',\n      value: 2\n    },\n    {\n      key: 3,\n      text: 'Admin',\n      value: 3\n    }\n  ];\n  const getLevel = (event, { value }) => {\n    event.preventDefault();\n    setLevel(value);\n  };\n\n  const getStatus = () => {\n    if (status === null) {\n      setStatus(1);\n    } else {\n      setStatus(null);\n    }\n  };\n\n  return (\n    <Modal\n      trigger={\n        <a href='#!' onClick={handleOpen}>\n          {user.username}\n        </a>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Muokkaa käyttäjän tietoja' />\n      <Modal.Content>\n        <Form onSubmit={updateUserClick}>\n          <Form.Field\n            control={Input}\n            defaultValue={user.username}\n            type='text'\n            placeholder='Käyttäjätunnus...'\n            disabled\n            label='Käyttäjätunnus'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Salasana...'\n            onChange={e => setPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana - syötä vaihtaaksesi</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Vahvista salasana...'\n            onChange={e => setConfirmPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana uudelleen</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={firstName}\n            type='text'\n            placeholder='Etunimi...'\n            onChange={e => setFirstName(e.target.value)}\n            label='Etunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={lastName}\n            type='text'\n            placeholder='Sukunimi...'\n            onChange={e => setLastName(e.target.value)}\n            label='Sukunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={email}\n            type='email'\n            placeholder='Email...'\n            onChange={e => setEmail(e.target.value)}\n            label='Email'\n          />\n          <Form.Field\n            control={Dropdown}\n            selection\n            defaultValue={user.level}\n            options={levelOptions}\n            onChange={getLevel}\n            label='Taso'\n          />\n          <Form.Field\n            control={Form.Checkbox}\n            name='active'\n            onChange={getStatus}\n            checked={!!status}\n            label='Tunnus käytössä'\n          />\n          <Button\n            color='green'\n            type='submit'\n            disabled={!email || !firstName || !lastName}\n          >\n            Tallenna\n          </Button>\n          <ModalNotification />\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nEditUserModal.propTypes = {\n  user: PropTypes.shape({\n    address: PropTypes.string,\n    city: PropTypes.string,\n    country: PropTypes.string,\n    created_at: PropTypes.string,\n    email: PropTypes.string,\n    first_name: PropTypes.string,\n    id: PropTypes.number,\n    last_name: PropTypes.string,\n    last_seen: PropTypes.string,\n    level: PropTypes.number,\n    old_id: PropTypes.number,\n    phone: PropTypes.string,\n    reset_key: PropTypes.string,\n    status: PropTypes.number,\n    updated_at: PropTypes.string,\n    username: PropTypes.string,\n    zip: PropTypes.string\n  }),\n  updateUserConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst connectedEditUserModal = connect(null, {\n  setNotificationConnect: setNotification,\n  updateUserConnect: updateUser\n})(EditUserModal);\n\nexport default connectedEditUserModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport { connect } from 'react-redux';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\nimport EditUserModal from './EditUserModal';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { setCurrent, updateUser, deleteUser } from '../../actions/userActions';\n\nconst UserListItem = ({ user, deleteUserConnect, setNotificationConnect }) => {\n  const [open, setOpen] = useState(false);\n\n  let userLevelOutPrint;\n  if (user.level === 1) {\n    userLevelOutPrint = 'DJ';\n  } else if (user.level === 2) {\n    userLevelOutPrint = 'Toimitus';\n  } else {\n    userLevelOutPrint = 'Admin';\n  }\n\n  let className;\n  let userStatusOutPrint;\n  if (user.status === null) {\n    userStatusOutPrint = 'Hyllyllä';\n    className = 'inactive-user';\n  } else if (user.status === 1) {\n    userStatusOutPrint = 'Käytössä';\n    className = 'active-user';\n  }\n\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n  const confirmDelete = () => {\n    setOpen(false);\n    deleteUserConnect(user.id);\n    setNotificationConnect(`Käyttäjä ${user.username} poistettu!`, 'success');\n  };\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <EditUserModal user={user} />\n      </Table.Cell>\n      <Table.Cell>\n        {user.first_name} {user.last_name}\n      </Table.Cell>\n      <Table.Cell>\n        <Moment format='MMMM Do YYYY, h:mm:ss a'>{user.last_seen}</Moment>\n      </Table.Cell>\n      <Table.Cell className={className}>{userStatusOutPrint}</Table.Cell>\n      <Table.Cell>{userLevelOutPrint}</Table.Cell>\n      <Table.Cell>\n        <Icon color='red' onClick={() => setOpen(true)} name='delete' />\n        <Confirm\n          content={`Haluatko varmasti poistaa käyttäjän ${user.username}?`}\n          open={open}\n          onCancel={cancelDelete}\n          onConfirm={confirmDelete}\n          cancelButton='En sittenkään'\n          confirmButton='Joo kyl'\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nUserListItem.propTypes = {\n  user: PropTypes.shape({\n    address: PropTypes.string,\n    city: PropTypes.string,\n    country: PropTypes.string,\n    created_at: PropTypes.string,\n    email: PropTypes.string,\n    first_name: PropTypes.string,\n    id: PropTypes.number,\n    last_name: PropTypes.string,\n    last_seen: PropTypes.string,\n    level: PropTypes.number,\n    old_id: PropTypes.number,\n    phone: PropTypes.string,\n    reset_key: PropTypes.string,\n    status: PropTypes.number,\n    updated_at: PropTypes.string,\n    username: PropTypes.string,\n    zip: PropTypes.string\n  }),\n  deleteUserConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapDispatchToProps = {\n  setCurrent,\n  setNotificationConnect: setNotification,\n  updateUser,\n  deleteUserConnect: deleteUser\n};\n\nconst connectedUser = connect(null, mapDispatchToProps)(UserListItem);\n\nexport default connectedUser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container, Dimmer, Loader, Table } from 'semantic-ui-react';\nimport AddUserModal from './AddUserModal';\nimport User from './UserListItem';\n\nconst UserList = ({ users, login }) => {\n  if (users.users === null || users.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Haetaan käyttäjiä...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  if (login.level === 3) {\n    return (\n      <Container>\n        <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n          <h3 style={{ display: 'inline' }}>Käyttäjät</h3>\n          <AddUserModal />\n        </div>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>Käyttäjätunnus</Table.Cell>\n              <Table.Cell>Nimi</Table.Cell>\n              <Table.Cell>Viimeisin kirjautuminen</Table.Cell>\n              <Table.Cell>Tila</Table.Cell>\n              <Table.Cell>Taso</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {users.users.map(user => (\n              <User user={user} key={user.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nUserList.propTypes = {\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  users: PropTypes.shape({\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        address: PropTypes.string,\n        city: PropTypes.string,\n        country: PropTypes.string,\n        created_at: PropTypes.string,\n        email: PropTypes.string,\n        first_name: PropTypes.string,\n        id: PropTypes.number,\n        last_name: PropTypes.string,\n        last_seen: PropTypes.string,\n        level: PropTypes.number,\n        old_id: PropTypes.number,\n        phone: PropTypes.string,\n        reset_key: PropTypes.string,\n        status: PropTypes.number,\n        updated_at: PropTypes.string,\n        username: PropTypes.string,\n        zip: PropTypes.string\n      })\n    ),\n    loading: PropTypes.bool\n  })\n};\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  login: state.login\n});\n\nconst connectedUserList = connect(mapStateToProps, null)(UserList);\n\nexport default connectedUserList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, Button, Form, Dimmer, Loader } from 'semantic-ui-react';\nimport { getOneReport } from '../../actions/reportActions';\nimport {\n  getAllReportsByDate,\n  getAllReportsByDateByUser\n} from '../../actions/reportsListActions';\n\nconst ReportFilterForm = ({\n  users,\n  login,\n  getAllReportsByDateConnect,\n  getAllReportsByDateByUserConnect\n}) => {\n  const [reportMonth, setReportMonth] = useState('');\n  const [reportYear, setReportYear] = useState('');\n\n  if (users.users === null) {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted content='Ladataan...' />\n      </Dimmer>\n    );\n  }\n\n  // month options\n  const monthOptions = [\n    {\n      key: '01',\n      text: 'Tammikuu',\n      value: '01'\n    },\n    {\n      key: '02',\n      text: 'Helmikuu',\n      value: '02'\n    },\n    {\n      key: '03',\n      text: 'Maaliskuu',\n      value: '03'\n    },\n    {\n      key: '04',\n      text: 'Huhtikuu',\n      value: '04'\n    },\n    {\n      key: '05',\n      text: 'Toukokuu',\n      value: '05'\n    },\n    {\n      key: '06',\n      text: 'Kesäkuu',\n      value: '06'\n    },\n    {\n      key: '07',\n      text: 'Heinäkuu',\n      value: '07'\n    },\n    {\n      key: '08',\n      text: 'Elokuu',\n      value: '08'\n    },\n    {\n      key: '09',\n      text: 'Syyskuu',\n      value: '09'\n    },\n    {\n      key: '10',\n      text: 'Lokakuu',\n      value: '10'\n    },\n    {\n      key: '11',\n      text: 'Marraskuu',\n      value: '11'\n    },\n    {\n      key: '12',\n      text: 'Joulukuu',\n      value: '12'\n    }\n  ];\n  // year options\n  const dateNow = new Date().getFullYear() + 1;\n  const years = [];\n  // eslint-disable-next-line no-plusplus\n  for (let i = 2001; i <= dateNow; i++) {\n    years.push(i);\n  }\n  let yearOptions = years.map(option => ({\n    key: option,\n    text: option,\n    value: option\n  }));\n  yearOptions = yearOptions.reverse();\n\n  const getReportsByMonth = () => {\n    const date = `${reportYear}-${reportMonth}`;\n\n    if (login.level === 1) {\n      getAllReportsByDateByUserConnect(date, login.id);\n    } else {\n      getAllReportsByDateConnect(date);\n    }\n  };\n\n  const getMonth = (event, { value }) => {\n    event.preventDefault();\n    setReportMonth(value);\n  };\n\n  const getYear = (event, { value }) => {\n    event.preventDefault();\n    setReportYear(value);\n  };\n\n  return (\n    <React.Fragment>\n      <Form>\n        <h2>Hae raportit ajalta:</h2>\n        <Form.Group widths='equal'>\n          <Form.Field>\n            <Dropdown\n              placeholder='Kuukausi'\n              openOnFocus={false}\n              selection\n              options={monthOptions}\n              onChange={getMonth}\n              value={reportMonth}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Dropdown\n              placeholder='Vuosi'\n              openOnFocus\n              selection\n              options={yearOptions}\n              onChange={getYear}\n              value={reportYear}\n            />{' '}\n          </Form.Field>\n          <Form.Field>\n            <Button color='blue' onClick={() => getReportsByMonth()}>\n              HAE\n            </Button>\n          </Form.Field>\n          <Form.Field></Form.Field>\n        </Form.Group>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nReportFilterForm.propTypes = {\n  users: PropTypes.shape({\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number\n      })\n    )\n  }),\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  getAllReportsByDateConnect: PropTypes.func,\n  getAllReportsByDateByUserConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    notification: state.notification,\n    users: state.users,\n    login: state.login\n  };\n};\n\nconst mapDispatchToProps = {\n  getOneReport,\n  getAllReportsByDateConnect: getAllReportsByDate,\n  getAllReportsByDateByUserConnect: getAllReportsByDateByUser\n};\n\nconst connectedReportFilterForm = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReportFilterForm);\n\nexport default connectedReportFilterForm;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, Form, Input } from 'semantic-ui-react';\nimport {\n  filterByUserId,\n  filterByStatus,\n  filterByText\n} from '../../actions/reportsListActions';\n\nconst FilterReportList = ({\n  users,\n  login,\n  filterByUserIdConnect,\n  filterByStatusConnect,\n  filterByTextConnect\n}) => {\n  const [userId, setUserId] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [filterText, setFilterText] = useState('');\n\n  useEffect(() => {\n    filterByUserIdConnect(userId);\n    filterByStatusConnect(status);\n    filterByTextConnect(filterText);\n    // eslint-disable-next-line\n  }, [userId, status, filterText]);\n\n  if (users.users === null) {\n    return (\n      <div>\n        <span>Ladataan...</span>\n      </div>\n    );\n  }\n\n  const userOptions = users.users.map(user => ({\n    key: user.id,\n    text: `${user.first_name} ${user.last_name}`,\n    value: user.id\n  }));\n\n  const addAllToUserOptions = [\n    {\n      key: 0,\n      text: 'Kaikki',\n      value: null\n    },\n    ...userOptions\n  ];\n\n  const statusOptions = [\n    {\n      key: '2',\n      text: 'Kaikki',\n      value: null\n    },\n    {\n      key: '0',\n      text: 'Keskeneräinen',\n      value: 0\n    },\n    {\n      key: '1',\n      text: 'Valmis',\n      value: 1\n    }\n  ];\n\n  const getUser = (e, { value }) => {\n    e.preventDefault();\n    setUserId(value);\n  };\n  const getStatus = (event, { value }) => {\n    event.preventDefault();\n    setStatus(value);\n    filterByStatusConnect(status);\n  };\n  const getFilteredByText = (event, { value }) => {\n    event.preventDefault();\n    setFilterText(value);\n    filterByTextConnect(filterText);\n  };\n\n  const filterByUser = () => {\n    if (login.level === 1) {\n      return null;\n    }\n    return (\n      <Form.Field>\n        <Dropdown\n          placeholder='Käyttäjä'\n          openOnFocus\n          selection\n          search\n          options={addAllToUserOptions}\n          onChange={getUser}\n        />\n      </Form.Field>\n    );\n  };\n\n  return (\n    <Form>\n      <Form.Group widths='equal'>\n        <Form.Field>\n          <Input\n            type='text'\n            placeholder='Tekstisuodatus'\n            onChange={getFilteredByText}\n          />\n        </Form.Field>\n        {filterByUser()}\n        <Form.Field>\n          <Dropdown\n            placeholder='Tila'\n            openOnFocus\n            selection\n            options={statusOptions}\n            onChange={getStatus}\n          />{' '}\n        </Form.Field>\n        <Form.Field></Form.Field>\n      </Form.Group>\n    </Form>\n  );\n};\n\nFilterReportList.propTypes = {\n  filterByStatusConnect: PropTypes.func,\n  filterByTextConnect: PropTypes.func,\n  filterByUserIdConnect: PropTypes.func,\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  users: PropTypes.shape({\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string\n      })\n    )\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    users: state.users,\n    login: state.login\n  };\n};\n\nconst mapDispatchToProps = {\n  filterByUserIdConnect: filterByUserId,\n  filterByStatusConnect: filterByStatus,\n  filterByTextConnect: filterByText\n};\n\nconst connectedFilterReportList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterReportList);\n\nexport default connectedFilterReportList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Table, Icon, Confirm, Responsive } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { deleteReport } from '../../actions/reportsListActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst ReportListItem = ({\n  deleteReportConnect,\n  setNotificationConnect,\n  login,\n  report\n}) => {\n  const [open, setOpen] = useState(false);\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n  const confirmDelete = () => {\n    setOpen(false);\n    deleteReportConnect(report.id);\n    setNotificationConnect(\n      `${report.name} ${report.program_date} poistettu!`,\n      'success'\n    );\n  };\n  let reportStatusOutPrint;\n  let className;\n\n  if (report.status === 1) {\n    reportStatusOutPrint = 'Valmis';\n  } else if (report.status === 0) {\n    reportStatusOutPrint = 'Keskeneräinen';\n  } else if (report.status === 9) {\n    reportStatusOutPrint = 'Poistettu';\n    return null;\n  }\n  if (report.rerun === 1) {\n    className = 'rerun';\n  }\n\n  if (login.level === 1 && report.rerun === 1) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <Table.Row className={className}>\n        <Responsive as={Table.Cell} minWidth={768}>\n          {report.program_no}\n        </Responsive>\n        <Table.Cell>\n          <Link className={className} to={`reports/${report.id}`}>\n            {report.name}\n          </Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>\n          {report.program_start_time.slice(0, -3)} -{' '}\n          {report.program_end_time.slice(0, -3)}\n        </Table.Cell>\n        <Table.Cell>{reportStatusOutPrint}</Table.Cell>\n        <Table.Cell>\n          <Icon\n            style={{ color: 'red' }}\n            name='delete'\n            onClick={() => setOpen(true)}\n          />\n          <Confirm\n            content={`Haluatko varmasti poistaa raportin ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nReportListItem.propTypes = {\n  report: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    program_date: PropTypes.string,\n    program_dj: PropTypes.string,\n    program_end_time: PropTypes.string,\n    program_no: PropTypes.number,\n    program_start_time: PropTypes.string,\n    rerun: PropTypes.number,\n    status: PropTypes.number,\n    user_id: PropTypes.number\n  }).isRequired,\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }).isRequired,\n  deleteReportConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  login: state.login\n});\n\nconst connectedReportListItem = connect(mapStateToProps, {\n  deleteReportConnect: deleteReport,\n  setNotificationConnect: setNotification\n})(ReportListItem);\n\nexport default connectedReportListItem;\n","/* eslint-disable indent */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Container,\n  Table,\n  Dimmer,\n  Loader,\n  Responsive\n} from 'semantic-ui-react';\nimport moment from 'moment';\nimport ReportFilterForm from './ReportFilterForm';\nimport FilterReportList from './FilterReportList';\nimport ReportListItem from './ReportListItem';\nimport {\n  getAllReportsByDate,\n  getAllReportsByDateByUser\n} from '../../actions/reportsListActions';\n\nmoment.locale('fi');\n\nconst ReportList = ({\n  login,\n  reportsList,\n  getAllReportsByDateConnect,\n  getAllReportsByDateByUserConnect\n}) => {\n  // initial reports list\n  useEffect(() => {\n    if (login.level === 1) {\n      if (reportsList.reportListDate === null) {\n        getAllReportsByDateByUserConnect(moment().format('YYYY-MM'), login.id);\n      } else {\n        getAllReportsByDateByUserConnect(reportsList.reportListDate, login.id);\n      }\n    } else if (reportsList.reportListDate === null) {\n      getAllReportsByDateConnect(moment().format('YYYY-MM'));\n    } else {\n      getAllReportsByDateConnect(reportsList.reportListDate);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  if (reportsList.reportsList === null || reportsList.loading) {\n    return (\n      <Dimmer active>\n        <Loader content='Ladataan...' />\n      </Dimmer>\n    );\n  }\n\n  if (reportsList.reportsList.length === 0) {\n    return (\n      <Container>\n        <h2>Ei raportteja valittuna ajankohtana. Valitse vuosi ja kuukausi</h2>\n        <ReportFilterForm />\n      </Container>\n    );\n  }\n\n  let reportListTimeDate;\n  if (reportsList.reportListDate === null) {\n    reportListTimeDate = moment().format('MMMM YYYY');\n  } else {\n    reportListTimeDate = moment(reportsList.reportListDate).format('MMMM YYYY');\n  }\n\n  let reportsToShow = reportsList.reportsList;\n\n  reportsToShow =\n    reportsList.filterByText === 0\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(report =>\n          report.name\n            .toLowerCase()\n            .includes(reportsList.filterByText.toLowerCase())\n        ));\n  reportsToShow =\n    reportsList.filterUserValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          report => report.user_id === reportsList.filterUserValue\n        ));\n  reportsToShow =\n    reportsList.filterStatusValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          report => report.status === reportsList.filterStatusValue\n        ));\n\n  return (\n    <Container>\n      <ReportFilterForm />\n      <h3>Raportit {reportListTimeDate}</h3>\n      <FilterReportList />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Responsive as={Table.Cell} minWidth={768}>\n              Ohjelmanro\n            </Responsive>\n            <Table.Cell>Nimi</Table.Cell>\n            <Table.Cell>Aika</Table.Cell>\n            <Table.Cell>Kello</Table.Cell>\n            <Table.Cell>Tila</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {reportsToShow.map(r => (\n            <ReportListItem key={r.id} report={r} />\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n};\n\nReportList.propTypes = {\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }).isRequired,\n  reportsList: PropTypes.shape({\n    reportsList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        program_date: PropTypes.string,\n        program_dj: PropTypes.string,\n        program_start_time: PropTypes.string,\n        program_end_time: PropTypes.string,\n        program_no: PropTypes.number,\n        rerun: PropTypes.number,\n        status: PropTypes.number,\n        user_id: PropTypes.number\n      })\n    ),\n    reportListDate: PropTypes.string,\n    loading: PropTypes.bool,\n    filterByText: PropTypes.string,\n    filterUserValue: PropTypes.number,\n    filterStatusValue: PropTypes.number\n  }),\n  getAllReportsByDateConnect: PropTypes.func,\n  getAllReportsByDateByUserConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    login: state.login\n  };\n};\n\nconst mapDispatchToProps = {\n  getAllReportsByDateConnect: getAllReportsByDate,\n  getAllReportsByDateByUserConnect: getAllReportsByDateByUser\n};\n\nconst connectedReportList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReportList);\n\nexport default connectedReportList;\n","import {\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  GET_ONE_PROGRAM,\n  CREATE_NEW_PROGRAM,\n  UPDATE_PROGRAM,\n  SET_LOADING\n} from './types';\nimport programService from '../services/programs';\n\nexport const getAllPrograms = () => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// get all active programs\nexport const initializePrograms = () => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const programs = await programService.getAllActive();\n    dispatch({\n      type: GET_ALL_ACTIVE_PROGRAMS,\n      data: programs\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getOneProgram = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const program = await programService.getOne(id);\n    dispatch({\n      type: GET_ONE_PROGRAM,\n      data: program,\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createNewProgram = programToAdd => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const program = await programService.createProgram(programToAdd);\n    dispatch({\n      type: CREATE_NEW_PROGRAM,\n      data: program\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateProgram = updatedProgram => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await programService.updateProgram(updatedProgram);\n    dispatch({\n      type: UPDATE_PROGRAM,\n      data: updatedProgram\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const mergePrograms = mergeParams => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await programService.mergePrograms(mergeParams);\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  Popup,\n  Icon\n} from 'semantic-ui-react';\nimport { updateProgram } from '../../actions/programActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst style = {\n  borderRadius: 0,\n  display: 'block',\n  opacity: 0.9,\n  padding: '2em'\n};\n\nconst EditProgramModal = ({\n  program,\n  updateProgramConnect,\n  setNotificationConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [name, setName] = useState(program.name);\n  const [identifier, setIdentifier] = useState(program.identifier);\n  const [display, setDisplay] = useState(program.display);\n  const [site, setSite] = useState(program.site);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleUpdateClick = () => {\n    const updatedProgram = {\n      id: program.id,\n      display,\n      identifier,\n      name,\n      site,\n      user_id: program.user_id\n    };\n    updateProgramConnect(updatedProgram);\n    setNotificationConnect(`${updatedProgram.name} päivitetty!`, 'success');\n    handleClose();\n  };\n\n  const getDisplay = () => {\n    if (display === null) {\n      setDisplay(1);\n    } else {\n      setDisplay(null);\n    }\n  };\n\n  const getSite = () => {\n    if (site === null) {\n      setSite(1);\n    } else {\n      setSite(null);\n    }\n  };\n\n  return (\n    <Modal\n      trigger={\n        <a href='#!' onClick={handleOpen}>\n          {program.name}\n        </a>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Muokkaa ohjelman tietoja' />\n      <Modal.Content>\n        <Form onSubmit={handleUpdateClick}>\n          <Form.Field\n            label='Ohjelman nimi'\n            control={Input}\n            focus\n            type='text'\n            defaultValue={name}\n            onChange={e => setName(e.target.value)}\n          />\n\n          <Form.Field\n            label='Ohjelman lisätieto'\n            control={Input}\n            focus\n            type='text'\n            defaultValue={identifier}\n            onChange={e => setIdentifier(e.target.value)}\n          />\n\n          <Form.Field\n            control={Form.Checkbox}\n            name='active'\n            onChange={getDisplay}\n            checked={!!display}\n            label={\n              <span>\n                Aktiivinen{' '}\n                <Popup\n                  trigger={\n                    <Icon\n                      style={{ display: 'inline' }}\n                      name='question circle'\n                    />\n                  }\n                  content='Aktiiviset ohjelmat näkyy Luo uusi raportti -sivun ohjelmalistalla'\n                  style={style}\n                  inverted\n                />\n              </span>\n            }\n          />\n          <Form.Field\n            control={Form.Checkbox}\n            name='active'\n            onChange={getSite}\n            checked={!!site}\n            label={\n              <span>\n                Näytä saitin hakulistassa{' '}\n                <Popup\n                  trigger={\n                    <Icon\n                      style={{ display: 'inline' }}\n                      name='question circle'\n                    />\n                  }\n                  content='Liittyy vanhaan saittiin jossa pääsi selaamaan raportteja per ohjelma'\n                  style={style}\n                  inverted\n                />\n              </span>\n            }\n          />\n          <Button color='green' type='submit' disabled={!name}>\n            Tallenna\n          </Button>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nEditProgramModal.propTypes = {\n  program: PropTypes.shape({\n    created_at: PropTypes.string,\n    display: PropTypes.number,\n    id: PropTypes.number,\n    identifier: PropTypes.string,\n    name: PropTypes.string,\n    site: PropTypes.number,\n    updated_at: PropTypes.string,\n    user_id: PropTypes.number\n  }).isRequired,\n  updateProgramConnect: PropTypes.func.isRequired,\n  setNotificationConnect: PropTypes.func\n};\n\nconst connectedEditProgramModal = connect(null, {\n  setNotificationConnect: setNotification,\n  updateProgramConnect: updateProgram\n})(EditProgramModal);\n\nexport default connectedEditProgramModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Dropdown } from 'semantic-ui-react';\nimport { mergePrograms } from '../../actions/programActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst MergePrograms = ({\n  program_id,\n  program_name,\n  programs,\n  setNotificationConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [programToMerge, setProgramToMerge] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {program_id}\n      </button>\n    );\n  }\n  const onSubmit = () => {\n    const mergeParams = {\n      type: 'program',\n      merge: programToMerge,\n      mergeTo: program_id\n    };\n    mergePrograms(mergeParams);\n    setNotificationConnect(\n      `Ohjelma #${mergeParams.merge} yhdistetty!`,\n      'success'\n    );\n    handleClose();\n  };\n  const mergeOptions = programs.allPrograms.map(program => ({\n    id: program.id,\n    text: `${program.id} - ${program.name}`,\n    value: program.id\n  }));\n  const getProgramToMerge = (e, { value }) => {\n    e.preventDefault();\n    setProgramToMerge(value);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {program_id}\n        </button>\n      }\n    >\n      <Header>\n        Yhdistä albumiin {program_id} - {program_name} tiedot\n      </Header>\n      <Modal.Content>\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getProgramToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nMergePrograms.propTypes = {\n  program_id: PropTypes.number.isRequired,\n  program_name: PropTypes.string.isRequired,\n  programs: PropTypes.shape({\n    activePrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    ),\n    allPrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    ),\n    loading: PropTypes.bool\n  }),\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  // console.log('MergeAlbums state', state);\n  return {\n    programs: state.programs\n  };\n};\n\nconst connectedMergePrograms = connect(mapStateToProps, {\n  mergePrograms,\n  setNotificationConnect: setNotification\n})(MergePrograms);\n\nexport default connectedMergePrograms;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Container, Dimmer, Loader } from 'semantic-ui-react';\nimport EditProgramModal from './EditProgramModal';\nimport MergePrograms from './MergePrograms';\n\nconst ProgramListItem = ({ program }) => {\n  if (program === null) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Haetaan Ohjelmia...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  let className;\n  if (program.display === 1) {\n    className = 'active-program';\n  }\n\n  return (\n    <Table.Row className={className}>\n      <Table.Cell>\n        <MergePrograms program_id={program.id} program_name={program.name} />\n      </Table.Cell>\n      {/* <Table.Cell>{program.name}</Table.Cell> */}\n      <Table.Cell>\n        <EditProgramModal program={program} />\n      </Table.Cell>\n      <Table.Cell>{program.identifier}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nProgramListItem.propTypes = {\n  program: PropTypes.shape({\n    created_at: PropTypes.string,\n    display: PropTypes.number,\n    id: PropTypes.number,\n    identifier: PropTypes.string,\n    name: PropTypes.string,\n    site: PropTypes.number,\n    updated_at: PropTypes.string,\n    user_id: PropTypes.number\n  })\n};\n\nexport default ProgramListItem;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  Popup,\n  Icon\n} from 'semantic-ui-react';\nimport { createNewProgram } from '../../actions/programActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst style = {\n  borderRadius: 0,\n  display: 'block',\n  opacity: 0.9,\n  padding: '2em'\n};\n\nconst AddProgramModal = ({\n  login,\n  createNewProgramConnect,\n  setNotificationConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [name, setName] = useState('');\n  const [identifier, setIdentifier] = useState('');\n  const [display, setDisplay] = useState(false);\n  const [site, setSite] = useState(false);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const addProgram = () => {\n    const programToAdd = {\n      display,\n      identifier,\n      name,\n      site,\n      user_id: login.id\n    };\n    createNewProgramConnect(programToAdd);\n    setNotificationConnect(`${programToAdd.name} lisätty!`, 'success');\n    handleClose();\n  };\n\n  return (\n    <Modal\n      trigger={\n        <Button onClick={handleOpen} floated='right' color='green'>\n          Luo uusi ohjelma\n        </Button>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Lisää ohjelma' />\n      <Modal.Content>\n        <Form onSubmit={addProgram}>\n          <Form.Field\n            label='Ohjelman nimi'\n            control={Input}\n            focus\n            type='text'\n            placeholder='Ohjelman nimi...'\n            onChange={e => setName(e.target.value)}\n          />\n          <Form.Field\n            label='Ohjelman tarkenne'\n            control={Input}\n            focus\n            type='text'\n            placeholder='Ohjelman tarkenne...'\n            onChange={e => setIdentifier(e.target.value)}\n          />\n\n          <Form.Field\n            control={Form.Checkbox}\n            name='active'\n            onChange={() => setDisplay(!display)}\n            checked={!!display}\n            label={\n              <span>\n                Aktiivinen{' '}\n                <Popup\n                  trigger={\n                    <Icon\n                      style={{ display: 'inline' }}\n                      name='question circle'\n                    />\n                  }\n                  content='Aktiiviset ohjelmat näkyy Luo uusi raportti -sivun ohjelmalistalla'\n                  style={style}\n                  inverted\n                />\n              </span>\n            }\n          />\n          <Form.Field\n            control={Form.Checkbox}\n            name='site'\n            onChange={() => setSite(!site)}\n            checked={!!site}\n            label={\n              <span>\n                Näytä saitin hakulistassa{' '}\n                <Popup\n                  trigger={\n                    <Icon\n                      style={{ display: 'inline' }}\n                      name='question circle'\n                    />\n                  }\n                  content='Liittyy vanhaan saittiin jossa pääsi selaamaan raportteja per ohjelma'\n                  style={style}\n                  inverted\n                />\n              </span>\n            }\n          />\n          <Button color='green' type='submit' disabled={!name}>\n            Tallenna\n          </Button>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nAddProgramModal.propTypes = {\n  createNewProgramConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func,\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    login: state.login\n  };\n};\nconst connectedAddProgramModal = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  createNewProgramConnect: createNewProgram\n})(AddProgramModal);\n\nexport default connectedAddProgramModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Message } from 'semantic-ui-react';\n\nconst Notification = ({ notification }) => {\n  if (notification.message === null) {\n    return null;\n  }\n\n  if (notification.type === 'success') {\n    return (\n      <div className='fixedTop'>\n        <Message floating success header={notification.message} />\n      </div>\n    );\n  }\n\n  if (notification.type === 'fail') {\n    return (\n      <div className='fixedTop'>\n        <Message floating negative header={notification.message} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nNotification.propTypes = {\n  notification: PropTypes.shape({\n    message: PropTypes.string,\n    type: PropTypes.string\n  }).isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    notification: state.notification\n  };\n};\n\nexport default connect(mapStateToProps)(Notification);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container, Dimmer, Loader, Table } from 'semantic-ui-react';\nimport ProgramListItem from './ProgramListItem';\nimport AddProgramModal from './AddProgramModal';\nimport Notification from '../layout/Notification';\nimport { getAllPrograms } from '../../actions/programActions';\n\nconst ProgramList = ({ getAllProgramsConnect, programs, login }) => {\n  useEffect(() => {\n    getAllProgramsConnect();\n    // eslint-disable-next-line\n  }, []);\n  if (programs.allPrograms === null || programs.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Haetaan ohjelmia...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  if (login.level === 3 || login.level === 2) {\n    return (\n      <Container>\n        <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n          <h3 style={{ display: 'inline' }}>Ohjelmat</h3>\n          <AddProgramModal />\n        </div>\n\n        <Notification />\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>ID</Table.Cell>\n              <Table.Cell>Nimi</Table.Cell>\n              <Table.Cell>Tarkenne</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {programs.allPrograms.map(program => (\n              <ProgramListItem program={program} key={program.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nProgramList.propTypes = {\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  programs: PropTypes.shape({\n    activePrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    ),\n    allPrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        display: PropTypes.number,\n        id: PropTypes.number,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        site: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number\n      })\n    ),\n    loading: PropTypes.bool\n  }),\n  getAllProgramsConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  programs: state.programs,\n  login: state.login\n});\n\nconst connectedProgramList = connect(mapStateToProps, {\n  getAllProgramsConnect: getAllPrograms\n})(ProgramList);\n\nexport default connectedProgramList;\n","import {\n  GET_ONE_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  MERGE_ALBUMS,\n  CHANGE_ARTIST_OF_ALBUM,\n  SET_LOADING\n} from './types';\nimport albumService from '../services/albums';\nimport searchService from '../services/search';\n\nexport const getOneAlbum = id => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_ALBUM\n    });\n    dispatch({\n      type: SET_LOADING\n    });\n    const album = await albumService.getOneAlbum(id);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: album\n    });\n    const tracklist = await albumService.getTracklistOfAlbum(id);\n    dispatch({\n      type: GET_TRACKLIST_OF_ALBUM,\n      data: tracklist\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateAlbum = albumToUpdate => async dispatch => {\n  dispatch({\n    type: SET_LOADING\n  });\n  await albumService.updateAlbum(albumToUpdate);\n  const updatedAlbum = await albumService.getOneAlbum(albumToUpdate.id);\n  dispatch({\n    type: GET_ONE_ALBUM,\n    data: updatedAlbum\n  });\n};\n\nexport const mergeAlbumFunction = mergeParams => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await searchService.merge(mergeParams);\n    const album = await albumService.getOneAlbum(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: album\n    });\n    const tracklist = await albumService.getTracklistOfAlbum(\n      mergeParams.mergeTo\n    );\n    dispatch({\n      type: GET_TRACKLIST_OF_ALBUM,\n      data: tracklist\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateAlbumState = mergeParams => async dispatch => {\n  dispatch({\n    type: MERGE_ALBUMS,\n    data: mergeParams\n  });\n};\n\nexport const updateArtistId = artistToUpdate => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await albumService.changeArtistId(artistToUpdate);\n    dispatch({\n      type: CHANGE_ARTIST_OF_ALBUM,\n      data: artistToUpdate\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Dropdown } from 'semantic-ui-react';\nimport { mergeAlbumFunction } from '../../actions/albumActions';\n\nconst MergeAlbumsModal = ({\n  album_id,\n  album_name,\n  artist,\n  mergeAlbumsFunctionConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [albumToMerge, setAlbumToMerge] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {album_id}\n      </button>\n    );\n  }\n  const onSubmit = () => {\n    const mergeParams = {\n      type: 'album',\n      merge: albumToMerge,\n      mergeTo: album_id\n    };\n    mergeAlbumsFunctionConnect(mergeParams);\n    handleClose();\n  };\n\n  const mergeOptions = artist.albumList.map(album => ({\n    key: album.album_id,\n    text: `${album.album_id} - ${album.name}`,\n    value: album.album_id\n  }));\n  const getAlbumToMerge = (e, { value }) => {\n    e.preventDefault();\n    setAlbumToMerge(value);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {album_id}\n        </button>\n      }\n    >\n      <Header>\n        Yhdistä albumiin {album_id} - {album_name} tiedot\n      </Header>\n      <Modal.Content>\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getAlbumToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nMergeAlbumsModal.propTypes = {\n  album_id: PropTypes.number.isRequired,\n  album_name: PropTypes.string.isRequired,\n  artist: PropTypes.shape({\n    albumList: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        artist_id: PropTypes.number,\n        name: PropTypes.string,\n        identifier: PropTypes.string,\n        artist_name: PropTypes.string,\n        artist_spotify_id: PropTypes.string,\n        track_count: PropTypes.number,\n        report_occurrence: PropTypes.number\n      })\n    ),\n    currentArtist: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      spotify_id: PropTypes.string,\n      user_id: PropTypes.number,\n      created_at: PropTypes.string,\n      updated_at: PropTypes.string\n    }),\n    loading: PropTypes.bool\n  }),\n  mergeAlbumsFunctionConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    artist: state.artist\n  };\n};\n\nconst connectedMergeAlbumsModal = connect(mapStateToProps, {\n  mergeAlbumsFunctionConnect: mergeAlbumFunction\n})(MergeAlbumsModal);\n\nexport default connectedMergeAlbumsModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\nimport MergeAlbumsModal from './MergeAlbumsModal';\n\nconst AlbumsByArtistItem = ({ album }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <MergeAlbumsModal album_name={album.name} album_id={album.album_id} />\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`/album/${album.album_id}`}>{album.name}</Link>\n      </Table.Cell>\n      <Table.Cell>{album.identifier}</Table.Cell>\n      <Table.Cell>{album.track_count}</Table.Cell>\n      <Table.Cell>{album.report_occurrence}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nAlbumsByArtistItem.propTypes = {\n  album: PropTypes.shape({\n    album_id: PropTypes.number,\n    artist_id: PropTypes.number,\n    name: PropTypes.string,\n    identifier: PropTypes.string,\n    artist_name: PropTypes.string,\n    artist_spotify_id: PropTypes.string,\n    track_count: PropTypes.number,\n    report_occurrence: PropTypes.number\n  }).isRequired\n};\n\nexport default AlbumsByArtistItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport AlbumsByArtistItem from './AlbumsByArtistItem';\n\nconst AlbumsByArtist = ({ albumList }) => {\n  if (albumList === null) {\n    return <span>loading</span>;\n  }\n  return (\n    <React.Fragment>\n      <h4>Albumit</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>ID#</Table.Cell>\n            <Table.Cell>Nimi</Table.Cell>\n            <Table.Cell>Levykoodi</Table.Cell>\n            <Table.Cell>Biisejä</Table.Cell>\n            <Table.Cell>Raportit</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {albumList.map(album => (\n            <AlbumsByArtistItem key={album.album_id} album={album} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nAlbumsByArtist.propTypes = {\n  albumList: PropTypes.arrayOf(\n    PropTypes.shape({\n      album_id: PropTypes.number,\n      artist_id: PropTypes.number,\n      name: PropTypes.string,\n      identifier: PropTypes.string,\n      artist_name: PropTypes.string,\n      artist_spotify_id: PropTypes.string,\n      track_count: PropTypes.number,\n      report_occurrence: PropTypes.number\n    })\n  )\n};\n\nexport default AlbumsByArtist;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport { updateArtist } from '../../actions/artistActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst ArtistDetailsForm = ({\n  currentArtist,\n  setNotificationConnect,\n  updateArtistConnect\n}) => {\n  const [artist, setArtist] = useState(currentArtist.name);\n  const [spotifyId, setSpotifyId] = useState(currentArtist.spotify_id);\n  if (currentArtist === null) {\n    return (\n      <Dimmer>\n        <Loader>Ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n\n  const saveChanges = () => {\n    const artistToUpdate = {\n      id: currentArtist.id,\n      name: artist,\n      spotify_id: spotifyId\n    };\n    updateArtistConnect(artistToUpdate);\n    setNotificationConnect(\n      `Artistin ${artistToUpdate.name} tiedot päivitetty!`,\n      'success'\n    );\n  };\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <h2>Artistin tiedot</h2>\n        <Form>\n          <Form.Field\n            label='Artistin nimi'\n            control={Input}\n            type='text'\n            defaultValue={artist}\n            onChange={e => setArtist(e.target.value)}\n          />\n          <Form.Field\n            label='Spotify ID'\n            control={Input}\n            type='text'\n            defaultValue={spotifyId}\n            onChange={e => setSpotifyId(e.target.value)}\n          />\n          <Form.Field>\n            <Button onClick={saveChanges} color='green'>\n              Tallenna muutokset\n            </Button>\n          </Form.Field>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nArtistDetailsForm.propTypes = {\n  currentArtist: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    spotify_id: PropTypes.string,\n    user_id: PropTypes.number,\n    created_at: PropTypes.string,\n    updated_at: PropTypes.string\n  }),\n  updateArtistConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst connectedArtistDetailsForm = connect(null, {\n  updateArtistConnect: updateArtist,\n  setNotificationConnect: setNotification\n})(ArtistDetailsForm);\n\nexport default connectedArtistDetailsForm;\n","import {\n  GET_ONE_ARTIST,\n  SET_LOADING,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  MERGE_ARTISTS\n} from './types';\nimport artistService from '../services/artists';\nimport searchService from '../services/search';\n\nexport const getOneArtist = id => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_ARTIST\n    });\n    dispatch({\n      type: SET_LOADING\n    });\n    const artist = await artistService.getOneArtist(id);\n    dispatch({\n      type: GET_ONE_ARTIST,\n      data: artist\n    });\n    const albumList = await artistService.getAlbumsByArtist(id);\n    dispatch({\n      type: GET_ALBUM_LIST_BY_ARTIST,\n      data: albumList\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateArtist = artistToUpdate => async dispatch => {\n  dispatch({\n    type: SET_LOADING\n  });\n  await artistService.updateArtist(artistToUpdate);\n  const updatedArtist = await artistService.getOneArtist(artistToUpdate.id);\n  dispatch({\n    type: GET_ONE_ARTIST,\n    data: updatedArtist\n  });\n};\n\nexport const mergeArtistFunction = mergeParams => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    await searchService.merge(mergeParams);\n    const artist = await artistService.getOneArtist(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_ARTIST,\n      data: artist\n    });\n    const albumList = await artistService.getAlbumsByArtist(\n      mergeParams.mergeTo\n    );\n    dispatch({\n      type: GET_ALBUM_LIST_BY_ARTIST,\n      data: albumList\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateArtistState = mergeParams => async dispatch => {\n  dispatch({\n    type: MERGE_ARTISTS,\n    data: mergeParams\n  });\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { getOneArtist } from '../../actions/artistActions';\nimport AlbumsByArtist from './AlbumsByArtist';\nimport ArtistDetailsForm from './ArtistDetailsForm';\n\nconst ArtistDetails = ({ id, getOneArtistConnect, artist }) => {\n  useEffect(() => {\n    getOneArtistConnect(parseInt(id));\n    // eslint-disable-next-line\n  }, [id]);\n\n  if (artist.currentArtist === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <ArtistDetailsForm currentArtist={artist.currentArtist} />\n      <AlbumsByArtist albumList={artist.albumList} />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    artist: state.artist\n  };\n};\n\nArtistDetails.propTypes = {\n  id: PropTypes.string.isRequired,\n  artist: PropTypes.shape({\n    albumList: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        artist_spotify_id: PropTypes.string,\n        identifier: PropTypes.string,\n        name: PropTypes.string,\n        report_occurrence: PropTypes.number,\n        track_count: PropTypes.number\n      })\n    ),\n    currentArtist: PropTypes.shape({\n      created_at: PropTypes.string,\n      id: PropTypes.number,\n      name: PropTypes.string,\n      old_id: PropTypes.number,\n      spotify_id: PropTypes.string,\n      updated_at: PropTypes.string,\n      user_id: PropTypes.number\n    }),\n    loading: PropTypes.bool\n  }),\n  getOneArtistConnect: PropTypes.func.isRequired\n};\n\nconst connectedArtistDetails = connect(mapStateToProps, {\n  getOneArtistConnect: getOneArtist\n})(ArtistDetails);\n\nexport default connectedArtistDetails;\n","import { useState } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\nimport searchService from '../services/search';\n\nexport const useChangeArtistOptionsHook = () => {\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchTrack = useConstant(() =>\n    AwesomeDebouncePromise(searchService.changeArtistOptions, 400)\n  );\n  const search = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchTrack(inputText);\n      }\n    },\n    // Ensure a new request is made everytime the text changes (even if it's debounced)\n    [inputText]\n  );\n  return {\n    inputText,\n    setInputText,\n    search\n  };\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Search } from 'semantic-ui-react';\nimport { updateArtistId } from '../../actions/albumActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { useChangeArtistOptionsHook } from '../../hooks/changeArtistOptionsHook';\n\nconst ChangeArtistModal = ({\n  currentAlbum,\n  updateArtistIdConnect,\n  setNotificationConnect\n}) => {\n  const { setInputText, search } = useChangeArtistOptionsHook();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [artistToChange, setArtistToChange] = useState(null);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        Vaihda artisti\n      </button>\n    );\n  }\n\n  let results = [];\n  if (search.result === undefined) {\n    results = [];\n  } else {\n    results = search.result.map(result => ({\n      key: result.artist_id,\n      title: `#${result.artist_id}: ${result.artist_name}`,\n      description: result.artist_name,\n      value: result.artist_id,\n      artist_name: result.artist_name\n    }));\n  }\n\n  const onSubmit = () => {\n    const changedArtist = {\n      album_id: currentAlbum[0].album_id,\n      artist_id: artistToChange.value,\n      artist_name: artistToChange.artist_name\n    };\n    updateArtistIdConnect(changedArtist);\n    setNotificationConnect(\n      `${currentAlbum[0].album_name} -albumin artisti vaihdettu!`,\n      'success'\n    );\n    handleClose();\n  };\n\n  const handleResultSelect = (e, { result }) => {\n    e.preventDefault();\n    setArtistToChange(result);\n  };\n\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          Vaihda artisti\n        </button>\n      }\n    >\n      <Header>Vaihda biisin {currentAlbum.album_name} artistiksi:</Header>\n      <Modal.Content>\n        <Form.Field>\n          <div className='searchResults'>\n            <Search\n              loading={search.loading}\n              onResultSelect={handleResultSelect}\n              onSearchChange={e => setInputText(e.target.value)}\n              onSelectionChange={handleResultSelect}\n              results={results}\n            />\n          </div>\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={onSubmit}>Vaihda</Button>\n        </Form.Field>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nChangeArtistModal.propTypes = {\n  currentAlbum: PropTypes.arrayOf(\n    PropTypes.shape({\n      album_name: PropTypes.string,\n      album_id: PropTypes.number,\n      artist: PropTypes.string,\n      artist_id: PropTypes.number,\n      cat_id: PropTypes.string,\n      comment: PropTypes.string,\n      country: PropTypes.number,\n      disc_no: PropTypes.number,\n      isrc: PropTypes.string,\n      label: PropTypes.string,\n      length: PropTypes.number,\n      people: PropTypes.string,\n      record_country: PropTypes.string,\n      track_id: PropTypes.number,\n      track_no: PropTypes.number,\n      track_title: PropTypes.string,\n      year: PropTypes.string\n    })\n  ),\n  updateArtistIdConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst connectedChangeArtistModal = connect(mapStateToProps, {\n  updateArtistIdConnect: updateArtistId,\n  setNotificationConnect: setNotification\n})(ChangeArtistModal);\n\nexport default connectedChangeArtistModal;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { updateAlbum } from '../../actions/albumActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport ChangeArtistModal from './ChangeArtistModal';\n\nconst AlbumDetailsForm = ({\n  album_id,\n  currentAlbum,\n  updateAlbumConnect,\n  setNotificationConnect\n}) => {\n  const [name, setName] = useState(currentAlbum[0].album_name);\n  const [label, setLabel] = useState(currentAlbum[0].label);\n  const [catId, setCatId] = useState(currentAlbum[0].cat_id);\n  const [year, setYear] = useState(null);\n  const [spotifyId, setSpotifyId] = useState(currentAlbum[0].spotify_id);\n  useEffect(() => {\n    if (currentAlbum[0].year === null) {\n      setYear(null);\n    } else {\n      setYear(parseInt(currentAlbum[0].year));\n    }\n    // eslint-disable-next-line\n  }, [currentAlbum[0].year]);\n  if (currentAlbum === null) {\n    return (\n      <Dimmer>\n        <Loader>Ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n\n  const saveChanges = () => {\n    const albumToUpdate = {\n      id: album_id,\n      name,\n      label,\n      cat_id: catId,\n      year,\n      spotify_id: spotifyId\n    };\n    updateAlbumConnect(albumToUpdate);\n    setNotificationConnect(\n      `Albumin ${albumToUpdate.name} tiedot päivitetty!`,\n      'success'\n    );\n  };\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <h2>Albumin tiedot</h2>\n        <Form>\n          <Form.Field>\n            <label>Artistin nimi</label>\n            <Input disabled type='text' value={currentAlbum[0].artist_name} />\n            <span>\n              <Link\n                style={{\n                  cursor: 'pointer',\n                  fontSize: '0.8rem',\n                  color: 'teal',\n                  marginRight: '1rem'\n                }}\n                to={`../artist/${currentAlbum[0].artist_id}`}\n              >\n                Muokkaa esittäjän tietoja\n              </Link>\n            </span>\n            <span>\n              <ChangeArtistModal currentAlbum={currentAlbum} />\n            </span>\n          </Form.Field>\n          <Form.Field\n            label='Albumi'\n            control={Input}\n            type='text'\n            defaultValue={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <Form.Field\n            label='Levymerkki'\n            control={Input}\n            type='text'\n            defaultValue={label}\n            onChange={e => setLabel(e.target.value)}\n          />\n          <Form.Field\n            label='Levykoodi'\n            control={Input}\n            type='text'\n            defaultValue={catId}\n            onChange={e => setCatId(e.target.value)}\n          />\n          <Form.Field\n            label='Vuosi'\n            control={Input}\n            type='number'\n            defaultValue={year}\n            onChange={e => setYear(e.target.value)}\n          />\n          <Form.Field\n            label='Spotify ID'\n            control={Input}\n            type='text'\n            defaultValue={spotifyId}\n            onChange={e => setSpotifyId(e.target.value)}\n          />\n          <Form.Field>\n            <Button onClick={saveChanges} color='green'>\n              Tallenna muutokset\n            </Button>\n          </Form.Field>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nAlbumDetailsForm.propTypes = {\n  album_id: PropTypes.string,\n  currentAlbum: PropTypes.arrayOf(\n    PropTypes.shape({\n      album_name: PropTypes.string,\n      album_id: PropTypes.number,\n      label: PropTypes.string,\n      cat_id: PropTypes.string,\n      spotify_id: PropTypes.string,\n      year: PropTypes.string,\n      artist_name: PropTypes.string,\n      artist_id: PropTypes.number\n    })\n  ),\n  updateAlbumConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst connectedAlbumDetailsForm = connect(null, {\n  updateAlbumConnect: updateAlbum,\n  setNotificationConnect: setNotification\n})(AlbumDetailsForm);\n\nexport default connectedAlbumDetailsForm;\n","import {\n  GET_DJONLINE_TRACKS,\n  ADD_NEW_TRACK,\n  UPDATE_TRACK,\n  SET_LOADING,\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  REMOVE_CURRENT_TRACK,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST,\n  MERGE_TRACKS\n} from './types';\nimport trackService from '../services/tracks';\nimport searchService from '../services/search';\n\nexport const getDjonlineTracks = searchParams => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const tracks = await trackService.checkDjonlineTracks(searchParams);\n    dispatch({\n      type: GET_DJONLINE_TRACKS,\n      data: tracks\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// add a new track and save it to current report\nexport const addNewTrack = trackToAdd => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const track = await trackService.addNewTrack(trackToAdd);\n    dispatch({\n      type: ADD_NEW_TRACK,\n      data: track\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// add a new track to db - not in a report\nexport const addTrackToDb = trackToAdd => async () => {\n  try {\n    const track = await trackService.addTrackToDb(trackToAdd);\n    console.log(track);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateTrack = trackToUpdate => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const updatedTrack = await trackService.updateTrack(trackToUpdate);\n    dispatch({\n      type: UPDATE_TRACK,\n      data: updatedTrack\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getOneTrack = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const track = await trackService.getOneTrack(id);\n    dispatch({\n      type: GET_ONE_TRACK,\n      data: track\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getOneTrackHistory = id => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_TRACK\n    });\n    dispatch({\n      type: SET_LOADING\n    });\n    const history = await trackService.getOneTrackHistory(id);\n    dispatch({\n      type: GET_ONE_TRACK_HISTORY,\n      data: history\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const removeCurrentTrack = () => async dispatch => {\n  dispatch({\n    type: REMOVE_CURRENT_TRACK\n  });\n};\n\nexport const mergeTrackFunction = mergeParams => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const mergeAction = await searchService.merge(mergeParams);\n    console.log(mergeAction);\n    const track = await trackService.getOneTrack(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_TRACK,\n      data: track\n    });\n    const history = await trackService.getOneTrackHistory(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_TRACK_HISTORY,\n      data: history\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const changeAlbumId = albumToUpdate => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const updateAlbum = await trackService.updateAlbumId(albumToUpdate);\n    console.log(updateAlbum);\n    dispatch({\n      type: CHANGE_ALBUM,\n      data: albumToUpdate\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const changeArtistId = artistToUpdate => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const updateArtist = await trackService.updateArtistId(artistToUpdate);\n    console.log(updateArtist);\n    dispatch({\n      type: CHANGE_ARTIST,\n      data: artistToUpdate\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateTrackState = mergeParams => async dispatch => {\n  dispatch({\n    type: MERGE_TRACKS,\n    data: mergeParams\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Dropdown } from 'semantic-ui-react';\nimport { mergeTrackFunction } from '../../actions/trackActions';\n\nconst MergeAlbumTracksModal = ({ track_id, track_title, album }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [trackToMerge, setTrackToMerge] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {track_id}\n      </button>\n    );\n  }\n  const onSubmit = () => {\n    const mergeParams = {\n      type: 'track',\n      merge: trackToMerge,\n      mergeTo: track_id\n    };\n    mergeTrackFunction(mergeParams);\n  };\n\n  const mergeOptions = album.tracklist.map(track => ({\n    key: track.track_id,\n    text: `${track.track_id} - ${track.track_title}`,\n    value: track.track_id\n  }));\n  const getTrackToMerge = (e, { value }) => {\n    e.preventDefault();\n    setTrackToMerge(value);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {track_id}\n        </button>\n      }\n    >\n      <Header>\n        Yhdistä biisiin {track_id} - {track_title} tiedot\n      </Header>\n      <Modal.Content>\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getTrackToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nMergeAlbumTracksModal.propTypes = {\n  track_id: PropTypes.number.isRequired,\n  track_title: PropTypes.string.isRequired,\n  album: PropTypes.shape({\n    currentAlbum: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_name: PropTypes.string,\n        album_id: PropTypes.number.isRequired,\n        label: PropTypes.string,\n        cat_id: PropTypes.string,\n        spotify_id: PropTypes.string,\n        year: PropTypes.string,\n        artist_name: PropTypes.string,\n        artist_id: PropTypes.number\n      })\n    ),\n    tracklist: PropTypes.arrayOf(\n      PropTypes.shape({\n        track_id: PropTypes.number,\n        isrc: PropTypes.string,\n        disc_no: PropTypes.number,\n        track_no: PropTypes.number,\n        track_title: PropTypes.string,\n        artist_name: PropTypes.string,\n        report_occurrence: PropTypes.number\n      })\n    )\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    album: state.album\n  };\n};\n\nconst connectedMergeAlbumTracksModal = connect(mapStateToProps, {\n  mergeTrackFunction\n})(MergeAlbumTracksModal);\n\nexport default connectedMergeAlbumTracksModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\nimport MergeAlbumTracksModal from './MergeAlbumTracksModal';\n\nconst TracksInAnAlbumItem = ({ track }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <MergeAlbumTracksModal\n          track_id={track.track_id}\n          track_title={track.track_title}\n        />\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`/track/${track.track_id}`}>\n          {track.artist_name} - {track.track_title}{' '}\n        </Link>\n      </Table.Cell>\n      <Table.Cell>\n        {track.track_no} / {track.disc_no}\n      </Table.Cell>\n      <Table.Cell>{track.isrc}</Table.Cell>\n      <Table.Cell>{track.report_occurrence}</Table.Cell>\n      <Table.Cell></Table.Cell>\n    </Table.Row>\n  );\n};\n\nTracksInAnAlbumItem.propTypes = {\n  track: PropTypes.shape({\n    track_id: PropTypes.number,\n    track_title: PropTypes.string,\n    artist_name: PropTypes.string,\n    track_no: PropTypes.number,\n    disc_no: PropTypes.number,\n    isrc: PropTypes.string,\n    report_occurrence: PropTypes.number\n  }).isRequired\n};\n\nexport default TracksInAnAlbumItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport TracksInAnAlbumItem from './TracksInAnAlbumItem';\n\nconst TracksInAnAlbum = ({ tracklist }) => {\n  if (tracklist === null) {\n    return <span>loading</span>;\n  }\n  return (\n    <React.Fragment>\n      <h4>Biisit</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>ID#</Table.Cell>\n            <Table.Cell>ESITTÄJÄ - Biisi</Table.Cell>\n            <Table.Cell>Biisi# / Levy#</Table.Cell>\n            <Table.Cell>ISRC</Table.Cell>\n            <Table.Cell>Raportit</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {tracklist.map(track => (\n            <TracksInAnAlbumItem key={track.track_id} track={track} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nTracksInAnAlbum.propTypes = {\n  tracklist: PropTypes.arrayOf(\n    PropTypes.shape({\n      track_id: PropTypes.number,\n      track_title: PropTypes.string,\n      artist_name: PropTypes.string,\n      track_no: PropTypes.number,\n      disc_no: PropTypes.number,\n      isrc: PropTypes.string,\n      report_occurrence: PropTypes.number\n    })\n  )\n};\n\nexport default TracksInAnAlbum;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport AlbumDetailsForm from './AlbumDetailsForm';\nimport { getOneAlbum } from '../../actions/albumActions';\nimport TracksInAnAlbum from './TracksInAnAlbum';\n\nconst AlbumDetails = ({ id, album, getOneAlbumConnect }) => {\n  useEffect(() => {\n    getOneAlbumConnect(id);\n    // eslint-disable-next-line\n  }, [id]);\n\n  if (album.currentAlbum === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <AlbumDetailsForm album_id={id} currentAlbum={album.currentAlbum} />\n      <TracksInAnAlbum tracklist={album.tracklist} />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => ({\n  album: state.album\n});\n\nAlbumDetails.propTypes = {\n  id: PropTypes.string.isRequired,\n  album: PropTypes.shape({\n    currentAlbum: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_name: PropTypes.string,\n        album_id: PropTypes.number,\n        label: PropTypes.string,\n        cat_id: PropTypes.string,\n        spotify_id: PropTypes.string,\n        year: PropTypes.string,\n        artist_name: PropTypes.string,\n        artist_id: PropTypes.number\n      })\n    ),\n    tracklist: PropTypes.arrayOf(\n      PropTypes.shape({\n        track_id: PropTypes.number,\n        isrc: PropTypes.string,\n        disc_no: PropTypes.number,\n        track_no: PropTypes.number,\n        track_title: PropTypes.string,\n        artist_name: PropTypes.string,\n        report_occurrence: PropTypes.number\n      })\n    ),\n    loading: PropTypes.bool\n  }),\n  getOneAlbumConnect: PropTypes.func\n};\n\nconst connectedAlbumDetails = connect(mapStateToProps, {\n  getOneAlbumConnect: getOneAlbum\n})(AlbumDetails);\nexport default connectedAlbumDetails;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Search } from 'semantic-ui-react';\nimport { changeAlbumId } from '../../actions/trackActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { useChangeAlbumOptionsHook } from '../../hooks/changeAlbumOptionsHook';\n\nconst ChangeAlbumModal = ({\n  currentTrack,\n  changeAlbumIdConnect,\n  setNotificationConnect\n}) => {\n  const { setInputText, search } = useChangeAlbumOptionsHook();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [albumToChange, setAlbumToChange] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        Vaihda albumi\n      </button>\n    );\n  }\n  let results = [];\n  if (search.result === undefined) {\n    results = [];\n  } else {\n    results = search.result.map(result => ({\n      key: result.album_id,\n      title: `#${result.album_id}: ${result.album_name}`,\n      description: result.artist_name,\n      length: result.length,\n      value: result.album_id,\n      album_name: result.album_name\n    }));\n  }\n  const onSubmit = () => {\n    const changedAlbum = {\n      track_id: currentTrack.track_id,\n      album_id: albumToChange.value,\n      album_name: albumToChange.album_name\n    };\n    changeAlbumIdConnect(changedAlbum);\n    setNotificationConnect(\n      `${currentTrack.track_title} -biisin albumi vaihdettu!`,\n      'success'\n    );\n    handleClose();\n  };\n\n  const handleResultSelect = (e, { result }) => {\n    e.preventDefault();\n    setAlbumToChange(result);\n  };\n\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          Vaihda albumi\n        </button>\n      }\n    >\n      <Header>Vaihda biisin {currentTrack.track_title} albumiksi:</Header>\n      <Modal.Content>\n        <Form.Field>\n          <div className='searchResults'>\n            <Search\n              loading={search.loading}\n              onResultSelect={handleResultSelect}\n              onSearchChange={e => setInputText(e.target.value)}\n              onSelectionChange={handleResultSelect}\n              results={results}\n\n              // value={value}\n            />\n          </div>\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={onSubmit}>Vaihda</Button>\n        </Form.Field>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nChangeAlbumModal.propTypes = {\n  currentTrack: PropTypes.shape({\n    album: PropTypes.string,\n    album_id: PropTypes.number,\n    artist: PropTypes.string,\n    artist_id: PropTypes.number,\n    cat_id: PropTypes.string,\n    comment: PropTypes.string,\n    country: PropTypes.number,\n    disc_no: PropTypes.number,\n    isrc: PropTypes.string,\n    label: PropTypes.string,\n    length: PropTypes.number,\n    people: PropTypes.string,\n    record_country: PropTypes.string,\n    track_id: PropTypes.number,\n    track_no: PropTypes.number,\n    track_title: PropTypes.string,\n    year: PropTypes.string\n  }),\n  changeAlbumIdConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst connectedChangeAlbumModal = connect(mapStateToProps, {\n  changeAlbumIdConnect: changeAlbumId,\n  setNotificationConnect: setNotification\n})(ChangeAlbumModal);\n\nexport default connectedChangeAlbumModal;\n","import { useState } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\nimport searchService from '../services/search';\n\nexport const useChangeAlbumOptionsHook = () => {\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchTrack = useConstant(() =>\n    AwesomeDebouncePromise(searchService.changeAlbumOptions, 400)\n  );\n  const search = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchTrack(inputText);\n      }\n    },\n    // Ensure a new request is made everytime the text changes (even if it's debounced)\n    [inputText]\n  );\n  return {\n    inputText,\n    setInputText,\n    search\n  };\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Search } from 'semantic-ui-react';\nimport { changeArtistId } from '../../actions/trackActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { useChangeArtistOptionsHook } from '../../hooks/changeArtistOptionsHook';\n\nconst ChangeArtistModal = ({\n  currentTrack,\n  changeArtistIdConnect,\n  setNotificationConnect\n}) => {\n  const { setInputText, search } = useChangeArtistOptionsHook();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [artistToChange, setArtistToChange] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        Vaihda artisti\n      </button>\n    );\n  }\n  let results = [];\n  if (search.result === undefined) {\n    results = [];\n  } else {\n    results = search.result.map(result => ({\n      key: result.artist_id,\n      title: `#${result.artist_id}: ${result.artist_name}`,\n      description: result.artist_name,\n      value: result.artist_id,\n      artist_name: result.artist_name\n    }));\n  }\n\n  const onSubmit = () => {\n    const changedArtist = {\n      track_id: currentTrack.track_id,\n      artist_id: artistToChange.value,\n      artist_name: artistToChange.artist_name\n    };\n    changeArtistIdConnect(changedArtist);\n    setNotificationConnect(\n      `${currentTrack.track_title} -biisin artisti vaihdettu!`,\n      'success'\n    );\n    handleClose();\n  };\n\n  const handleResultSelect = (e, { result }) => {\n    e.preventDefault();\n    setArtistToChange(result);\n  };\n\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          Vaihda artisti\n        </button>\n      }\n    >\n      <Header>Vaihda biisin {currentTrack.track_title} artistiksi:</Header>\n      <Modal.Content>\n        <Form.Field>\n          <div className='searchResults'>\n            <Search\n              loading={search.loading}\n              onResultSelect={handleResultSelect}\n              onSearchChange={e => setInputText(e.target.value)}\n              onSelectionChange={handleResultSelect}\n              results={results}\n            />\n          </div>\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={onSubmit}>Vaihda</Button>\n        </Form.Field>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nChangeArtistModal.propTypes = {\n  currentTrack: PropTypes.shape({\n    album: PropTypes.string,\n    album_id: PropTypes.number,\n    artist: PropTypes.string,\n    artist_id: PropTypes.number,\n    cat_id: PropTypes.string,\n    comment: PropTypes.string,\n    country: PropTypes.number,\n    disc_no: PropTypes.number,\n    isrc: PropTypes.string,\n    label: PropTypes.string,\n    length: PropTypes.number,\n    people: PropTypes.string,\n    record_country: PropTypes.string,\n    track_id: PropTypes.number,\n    track_no: PropTypes.number,\n    track_title: PropTypes.string,\n    year: PropTypes.string\n  }),\n  changeArtistIdConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst connectedChangeArtistModal = connect(mapStateToProps, {\n  changeArtistIdConnect: changeArtistId,\n  setNotificationConnect: setNotification\n})(ChangeArtistModal);\n\nexport default connectedChangeArtistModal;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  Input,\n  Button,\n  Grid,\n  Dimmer,\n  Loader,\n  TextArea,\n  Dropdown\n} from 'semantic-ui-react';\nimport { updateTrack } from '../../actions/trackActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { addTrackToReport } from '../../actions/reportActions';\nimport ChangeAlbumModal from './ChangeAlbumModal';\nimport ChangeArtistModal from './ChangeArtistModal';\n\nconst TrackDetailsForm = ({\n  currentTrack,\n  track,\n  report,\n  updateTrackConnect,\n  setNotificationConnect\n}) => {\n  const [redirect, setRedirect] = useState(false);\n  const [artist, setArtist] = useState(currentTrack.artist);\n  const [album, setAlbum] = useState(currentTrack.album);\n  const [trackTitle, setTrackTitle] = useState(currentTrack.track_title);\n  const [min, setMin] = useState(Math.floor(currentTrack.length / 60));\n  const [sec, setSec] = useState(currentTrack.length % 60);\n  const [country, setCountry] = useState(currentTrack.country);\n  const [recordCountry, setRecordCountry] = useState(\n    currentTrack.record_country\n  );\n  const [people, setPeople] = useState(null);\n  const [discNo, setDiscNo] = useState(currentTrack.disc_no);\n  const [trackNo, setTrackNo] = useState(currentTrack.track_no);\n  const [year, setYear] = useState(null);\n  const [isrc, setIsrc] = useState(currentTrack.isrc);\n  const [comment, setComment] = useState(currentTrack.comment);\n\n  useEffect(() => {\n    if (currentTrack.year === null) {\n      setYear(null);\n    } else {\n      setYear(parseInt(currentTrack.year));\n    }\n  }, [currentTrack.year]);\n\n  useEffect(() => {\n    if (currentTrack.people === null) {\n      setPeople(null);\n    } else {\n      setPeople(\n        currentTrack.people\n          .replace(/\\| /, '')\n          .replace(/\\| /g, '\\n')\n          .replace(/ \\|/, '')\n      );\n    }\n  }, [currentTrack.people]);\n\n  const countryOptions = [\n    {\n      key: 1,\n      text: 'Suomi',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Muu',\n      value: 2\n    },\n    {\n      key: 0,\n      text: 'Ei tietoa',\n      value: null\n    }\n  ];\n  const getCountry = (event, { value }) => {\n    event.preventDefault();\n    setCountry(value);\n  };\n  const recordCountryOptions = [\n    { text: 'Finland', value: 'FI' },\n    { text: 'United Kingdom', value: 'GB' },\n    { text: 'United States', value: 'US' },\n    { text: 'Afghanistan', value: 'AF' },\n    { text: 'Åland Islands', value: 'AX' },\n    { text: 'Albania', value: 'AL' },\n    { text: 'Algeria', value: 'DZ' },\n    { text: 'American Samoa', value: 'AS' },\n    { text: 'AndorrA', value: 'AD' },\n    { text: 'Angola', value: 'AO' },\n    { text: 'Anguilla', value: 'AI' },\n    { text: 'Antarctica', value: 'AQ' },\n    { text: 'Antigua and Barbuda', value: 'AG' },\n    { text: 'Argentina', value: 'AR' },\n    { text: 'Armenia', value: 'AM' },\n    { text: 'Aruba', value: 'AW' },\n    { text: 'Australia', value: 'AU' },\n    { text: 'Austria', value: 'AT' },\n    { text: 'Azerbaijan', value: 'AZ' },\n    { text: 'Bahamas', value: 'BS' },\n    { text: 'Bahrain', value: 'BH' },\n    { text: 'Bangladesh', value: 'BD' },\n    { text: 'Barbados', value: 'BB' },\n    { text: 'Belarus', value: 'BY' },\n    { text: 'Belgium', value: 'BE' },\n    { text: 'Belize', value: 'BZ' },\n    { text: 'Benin', value: 'BJ' },\n    { text: 'Bermuda', value: 'BM' },\n    { text: 'Bhutan', value: 'BT' },\n    { text: 'Bolivia', value: 'BO' },\n    { text: 'Bosnia and Herzegovina', value: 'BA' },\n    { text: 'Botswana', value: 'BW' },\n    { text: 'Bouvet Island', value: 'BV' },\n    { text: 'Brazil', value: 'BR' },\n    { text: 'British Indian Ocean Territory', value: 'IO' },\n    { text: 'Brunei Darussalam', value: 'BN' },\n    { text: 'Bulgaria', value: 'BG' },\n    { text: 'Burkina Faso', value: 'BF' },\n    { text: 'Burundi', value: 'BI' },\n    { text: 'Cambodia', value: 'KH' },\n    { text: 'Cameroon', value: 'CM' },\n    { text: 'Canada', value: 'CA' },\n    { text: 'Cape Verde', value: 'CV' },\n    { text: 'Cayman Islands', value: 'KY' },\n    { text: 'Central African Republic', value: 'CF' },\n    { text: 'Chad', value: 'TD' },\n    { text: 'Chile', value: 'CL' },\n    { text: 'China', value: 'CN' },\n    { text: 'Christmas Island', value: 'CX' },\n    { text: 'Cocos (Keeling) Islands', value: 'CC' },\n    { text: 'Colombia', value: 'CO' },\n    { text: 'Comoros', value: 'KM' },\n    { text: 'Congo', value: 'CG' },\n    { text: 'Congo, The Democratic Republic of the', value: 'CD' },\n    { text: 'Cook Islands', value: 'CK' },\n    { text: 'Costa Rica', value: 'CR' },\n    { text: \"Cote D'Ivoire\", value: 'CI' },\n    { text: 'Croatia', value: 'HR' },\n    { text: 'Cuba', value: 'CU' },\n    { text: 'Cyprus', value: 'CY' },\n    { text: 'Czech Republic', value: 'CZ' },\n    { text: 'Denmark', value: 'DK' },\n    { text: 'Djibouti', value: 'DJ' },\n    { text: 'Dominica', value: 'DM' },\n    { text: 'Dominican Republic', value: 'DO' },\n    { text: 'Ecuador', value: 'EC' },\n    { text: 'Egypt', value: 'EG' },\n    { text: 'El Salvador', value: 'SV' },\n    { text: 'Equatorial Guinea', value: 'GQ' },\n    { text: 'Eritrea', value: 'ER' },\n    { text: 'Estonia', value: 'EE' },\n    { text: 'Ethiopia', value: 'ET' },\n    { text: 'Falkland Islands (Malvinas)', value: 'FK' },\n    { text: 'Faroe Islands', value: 'FO' },\n    { text: 'Fiji', value: 'FJ' },\n    { text: 'France', value: 'FR' },\n    { text: 'French Guiana', value: 'GF' },\n    { text: 'French Polynesia', value: 'PF' },\n    { text: 'French Southern Territories', value: 'TF' },\n    { text: 'Gabon', value: 'GA' },\n    { text: 'Gambia', value: 'GM' },\n    { text: 'Georgia', value: 'GE' },\n    { text: 'Germany', value: 'DE' },\n    { text: 'Ghana', value: 'GH' },\n    { text: 'Gibraltar', value: 'GI' },\n    { text: 'Greece', value: 'GR' },\n    { text: 'Greenland', value: 'GL' },\n    { text: 'Grenada', value: 'GD' },\n    { text: 'Guadeloupe', value: 'GP' },\n    { text: 'Guam', value: 'GU' },\n    { text: 'Guatemala', value: 'GT' },\n    { text: 'Guernsey', value: 'GG' },\n    { text: 'Guinea', value: 'GN' },\n    { text: 'Guinea-Bissau', value: 'GW' },\n    { text: 'Guyana', value: 'GY' },\n    { text: 'Haiti', value: 'HT' },\n    { text: 'Heard Island and Mcdonald Islands', value: 'HM' },\n    { text: 'Holy See (Vatican City State)', value: 'VA' },\n    { text: 'Honduras', value: 'HN' },\n    { text: 'Hong Kong', value: 'HK' },\n    { text: 'Hungary', value: 'HU' },\n    { text: 'Iceland', value: 'IS' },\n    { text: 'India', value: 'IN' },\n    { text: 'Indonesia', value: 'ID' },\n    { text: 'Iran, Islamic Republic Of', value: 'IR' },\n    { text: 'Iraq', value: 'IQ' },\n    { text: 'Ireland', value: 'IE' },\n    { text: 'Isle of Man', value: 'IM' },\n    { text: 'Israel', value: 'IL' },\n    { text: 'Italy', value: 'IT' },\n    { text: 'Jamaica', value: 'JM' },\n    { text: 'Japan', value: 'JP' },\n    { text: 'Jersey', value: 'JE' },\n    { text: 'Jordan', value: 'JO' },\n    { text: 'Kazakhstan', value: 'KZ' },\n    { text: 'Kenya', value: 'KE' },\n    { text: 'Kiribati', value: 'KI' },\n    { text: \"Korea, Democratic People's Republic of\", value: 'KP' },\n    { text: 'Korea, Republic of', value: 'KR' },\n    { text: 'Kuwait', value: 'KW' },\n    { text: 'Kyrgyzstan', value: 'KG' },\n    { text: \"Lao People's Democratic Republic\", value: 'LA' },\n    { text: 'Latvia', value: 'LV' },\n    { text: 'Lebanon', value: 'LB' },\n    { text: 'Lesotho', value: 'LS' },\n    { text: 'Liberia', value: 'LR' },\n    { text: 'Libyan Arab Jamahiriya', value: 'LY' },\n    { text: 'Liechtenstein', value: 'LI' },\n    { text: 'Lithuania', value: 'LT' },\n    { text: 'Luxembourg', value: 'LU' },\n    { text: 'Macao', value: 'MO' },\n    { text: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n    { text: 'Madagascar', value: 'MG' },\n    { text: 'Malawi', value: 'MW' },\n    { text: 'Malaysia', value: 'MY' },\n    { text: 'Maldives', value: 'MV' },\n    { text: 'Mali', value: 'ML' },\n    { text: 'Malta', value: 'MT' },\n    { text: 'Marshall Islands', value: 'MH' },\n    { text: 'Martinique', value: 'MQ' },\n    { text: 'Mauritania', value: 'MR' },\n    { text: 'Mauritius', value: 'MU' },\n    { text: 'Mayotte', value: 'YT' },\n    { text: 'Mexico', value: 'MX' },\n    { text: 'Micronesia, Federated States of', value: 'FM' },\n    { text: 'Moldova, Republic of', value: 'MD' },\n    { text: 'Monaco', value: 'MC' },\n    { text: 'Mongolia', value: 'MN' },\n    { text: 'Montenegro', value: 'ME' },\n    { text: 'Montserrat', value: 'MS' },\n    { text: 'Morocco', value: 'MA' },\n    { text: 'Mozambique', value: 'MZ' },\n    { text: 'Myanmar', value: 'MM' },\n    { text: 'Namibia', value: 'NA' },\n    { text: 'Nauru', value: 'NR' },\n    { text: 'Nepal', value: 'NP' },\n    { text: 'Netherlands', value: 'NL' },\n    { text: 'Netherlands Antilles', value: 'AN' },\n    { text: 'New Caledonia', value: 'NC' },\n    { text: 'New Zealand', value: 'NZ' },\n    { text: 'Nicaragua', value: 'NI' },\n    { text: 'Niger', value: 'NE' },\n    { text: 'Nigeria', value: 'NG' },\n    { text: 'Niue', value: 'NU' },\n    { text: 'Norfolk Island', value: 'NF' },\n    { text: 'Northern Mariana Islands', value: 'MP' },\n    { text: 'Norway', value: 'NO' },\n    { text: 'Oman', value: 'OM' },\n    { text: 'Pakistan', value: 'PK' },\n    { text: 'Palau', value: 'PW' },\n    { text: 'Palestinian Territory, Occupied', value: 'PS' },\n    { text: 'Panama', value: 'PA' },\n    { text: 'Papua New Guinea', value: 'PG' },\n    { text: 'Paraguay', value: 'PY' },\n    { text: 'Peru', value: 'PE' },\n    { text: 'Philippines', value: 'PH' },\n    { text: 'Poland', value: 'PL' },\n    { text: 'Portugal', value: 'PT' },\n    { text: 'Puerto Rico', value: 'PR' },\n    { text: 'Qatar', value: 'QA' },\n    { text: 'Romania', value: 'RO' },\n    { text: 'Russian Federation', value: 'RU' },\n    { text: 'RWANDA', value: 'RW' },\n    { text: 'Saint Helena', value: 'SH' },\n    { text: 'Saint Kitts and Nevis', value: 'KN' },\n    { text: 'Saint Lucia', value: 'LC' },\n    { text: 'Saint Pierre and Miquelon', value: 'PM' },\n    { text: 'Saint Vincent and the Grenadines', value: 'VC' },\n    { text: 'Samoa', value: 'WS' },\n    { text: 'San Marino', value: 'SM' },\n    { text: 'Sao Tome and Principe', value: 'ST' },\n    { text: 'Saudi Arabia', value: 'SA' },\n    { text: 'Senegal', value: 'SN' },\n    { text: 'Serbia', value: 'RS' },\n    { text: 'Seychelles', value: 'SC' },\n    { text: 'Sierra Leone', value: 'SL' },\n    { text: 'Singapore', value: 'SG' },\n    { text: 'Slovakia', value: 'SK' },\n    { text: 'Slovenia', value: 'SI' },\n    { text: 'Solomon Islands', value: 'SB' },\n    { text: 'Somalia', value: 'SO' },\n    { text: 'South Africa', value: 'ZA' },\n    { text: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n    { text: 'Spain', value: 'ES' },\n    { text: 'Sri Lanka', value: 'LK' },\n    { text: 'Sudan', value: 'SD' },\n    { text: 'Suriname', value: 'SR' },\n    { text: 'Svalbard and Jan Mayen', value: 'SJ' },\n    { text: 'Swaziland', value: 'SZ' },\n    { text: 'Sweden', value: 'SE' },\n    { text: 'Switzerland', value: 'CH' },\n    { text: 'Syrian Arab Republic', value: 'SY' },\n    { text: 'Taiwan, Province of China', value: 'TW' },\n    { text: 'Tajikistan', value: 'TJ' },\n    { text: 'Tanzania, United Republic of', value: 'TZ' },\n    { text: 'Thailand', value: 'TH' },\n    { text: 'Timor-Leste', value: 'TL' },\n    { text: 'Togo', value: 'TG' },\n    { text: 'Tokelau', value: 'TK' },\n    { text: 'Tonga', value: 'TO' },\n    { text: 'Trinidad and Tobago', value: 'TT' },\n    { text: 'Tunisia', value: 'TN' },\n    { text: 'Turkey', value: 'TR' },\n    { text: 'Turkmenistan', value: 'TM' },\n    { text: 'Turks and Caicos Islands', value: 'TC' },\n    { text: 'Tuvalu', value: 'TV' },\n    { text: 'Uganda', value: 'UG' },\n    { text: 'Ukraine', value: 'UA' },\n    { text: 'United Arab Emirates', value: 'AE' },\n    { text: 'United States Minor Outlying Islands', value: 'UM' },\n    { text: 'Uruguay', value: 'UY' },\n    { text: 'Uzbekistan', value: 'UZ' },\n    { text: 'Vanuatu', value: 'VU' },\n    { text: 'Venezuela', value: 'VE' },\n    { text: 'Viet Nam', value: 'VN' },\n    { text: 'Virgin Islands, British', value: 'VG' },\n    { text: 'Virgin Islands, U.S.', value: 'VI' },\n    { text: 'Wallis and Futuna', value: 'WF' },\n    { text: 'Western Sahara', value: 'EH' },\n    { text: 'Yemen', value: 'YE' },\n    { text: 'Zambia', value: 'ZM' },\n    { text: 'Zimbabwe', value: 'ZW' }\n  ];\n  const getRecordCountry = (event, { value }) => {\n    event.preventDefault();\n    setRecordCountry(value);\n  };\n  const submitTrack = () => {\n    // artist name validation\n    if (artist === null) {\n      setNotificationConnect('Artisti on pakollinen tieto', 'fail');\n    }\n    if (people === null) {\n      const length = parseInt(min) * 60 + parseInt(sec);\n      const trackToUpdate = {\n        artist_name: artist,\n        album_name: album,\n        artist_id: currentTrack.artist_id,\n        album_id: currentTrack.album_id,\n        track_id: currentTrack.track_id,\n        track_title: trackTitle,\n        length,\n        country,\n        record_country: recordCountry,\n        people,\n        disc_no: discNo,\n        track_no: trackNo,\n        year,\n        isrc,\n        comment\n      };\n      updateTrackConnect(trackToUpdate);\n      setNotificationConnect(\n        `Biisin ${trackToUpdate.track_title} tiedot päivitetty!`,\n        'success'\n      );\n    } else {\n      const length = parseInt(min) * 60 + parseInt(sec);\n      const trackToUpdate = {\n        artist_name: artist,\n        album_name: album,\n        artist_id: currentTrack.artist_id,\n        album_id: currentTrack.album_id,\n        track_id: currentTrack.track_id,\n        track_title: trackTitle,\n        length,\n        country,\n        record_country: recordCountry,\n        people: `| ${people.replace(/\\n/g, ' | ')} |`,\n        disc_no: discNo,\n        track_no: trackNo,\n        year,\n        isrc,\n        comment\n      };\n      updateTrackConnect(trackToUpdate);\n      setNotificationConnect(\n        `Biisin ${trackToUpdate.track_title} tiedot päivitetty!`,\n        'success'\n      );\n    }\n  };\n  const addToReport = () => {\n    const trackToSave = {\n      track_id: currentTrack.track_id,\n      report_id: report.reportDetails.id,\n      length: currentTrack.length,\n      sortable_rank: report.report.length + 1\n    };\n    addTrackToReport(trackToSave);\n    setNotificationConnect(\n      `${currentTrack.track_title} lisätty raporttiin ${report.reportDetails.program_name}`,\n      'success'\n    );\n    setRedirect(true);\n  };\n  // save and add to report button - render if current report exists\n  const addToReportButton = () => {\n    if (report.reportDetails === null) {\n      return null;\n    }\n    return (\n      <Button onClick={addToReport} color='blue'>\n        Lisää raporttiin\n      </Button>\n    );\n  };\n\n  if (currentTrack === null) {\n    return (\n      <Dimmer>\n        <Loader>Ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n  if (redirect) {\n    return <Redirect to={`/reports/${report.reportDetails.id}`} />;\n  }\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <h2>Biisin tiedot</h2>\n        <Form>\n          <Form.Field\n            required\n            control={Input}\n            disabled\n            value={track.currentTrack[0].artist}\n            type='text'\n            placeholder={artist}\n            onChange={e => setArtist(e.target.value)}\n            label='Artisti'\n          />\n\n          <span>\n            <Link\n              style={{\n                cursor: 'pointer',\n                fontSize: '0.8rem',\n                color: 'teal',\n                marginRight: '1rem'\n              }}\n              to={`../artist/${currentTrack.artist_id}`}\n            >\n              Muokkaa artistin tietoja\n            </Link>\n          </span>\n          <span>\n            <ChangeArtistModal currentTrack={currentTrack} />\n          </span>\n\n          <Form.Field required>\n            <label>Albumi</label>\n            <Input\n              disabled\n              value={track.currentTrack[0].album}\n              type='text'\n              placeholder='Albumi...'\n              onChange={e => setAlbum(e.target.value)}\n            />\n            <span>\n              <Link\n                style={{\n                  cursor: 'pointer',\n                  fontSize: '0.8rem',\n                  color: 'teal',\n                  marginRight: '1rem'\n                }}\n                to={`../album/${currentTrack.album_id}`}\n              >\n                Muokkaa albumin tietoja\n              </Link>\n            </span>\n            <span>\n              <ChangeAlbumModal currentTrack={currentTrack} />\n            </span>\n          </Form.Field>\n          <Form.Field required>\n            <label>Biisi</label>\n            <Input\n              defaultValue={trackTitle}\n              type='text'\n              placeholder='Biisi...'\n              onChange={e => setTrackTitle(e.target.value)}\n            />\n          </Form.Field>\n          <Form.Group widths='equal'>\n            <Form.Field required>\n              <label>Kesto - minuutit</label>\n              <Input\n                maxLength={4}\n                defaultValue={min}\n                type='number'\n                placeholder='Minuuttia...'\n                onChange={e => setMin(e.target.value)}\n              />\n            </Form.Field>\n            <Form.Field required>\n              <label>Kesto - sekunnit</label>\n              <Input\n                defaultValue={sec}\n                maxLength={2}\n                type='number'\n                placeholder='Sekuntia...'\n                onChange={e => setSec(e.target.value)}\n              />\n            </Form.Field>\n          </Form.Group>\n          <Form.Group widths='equal'>\n            <Form.Field required>\n              <label>Levy#</label>\n              <Input\n                maxLength={2}\n                defaultValue={discNo}\n                type='number'\n                placeholder='CD1=1, CD2=2, A1=1, A2=2...'\n                onChange={e => setDiscNo(e.target.value)}\n              />\n            </Form.Field>\n            <Form.Field required>\n              <label>Biisi#</label>\n              <Input\n                defaultValue={trackNo}\n                maxLength={2}\n                type='number'\n                placeholder='Biisi #...'\n                onChange={e => setTrackNo(e.target.value)}\n              />\n            </Form.Field>\n          </Form.Group>\n          <Form.Field>\n            <label>Tekijät - max 5kpl, yksi per rivi, SUKUNIMI ETUNIMI</label>\n            <TextArea\n              defaultValue={people}\n              onChange={e => setPeople(e.target.value)}\n              placeholder='Tekijät - max 5kpl'\n            />\n          </Form.Field>\n          <Form.Group widths='equal'>\n            <Form.Field required>\n              <label>Säveltäjän kotimaa</label>\n              <Dropdown\n                placeholder='Suomi, muu, ei tietoa...'\n                openOnFocus={false}\n                defaultValue={country}\n                selection\n                options={countryOptions}\n                onChange={getCountry}\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>Tallennusmaa</label>\n              <Dropdown\n                placeholder='Valitse tallennusmaa...'\n                openOnFocus={false}\n                defaultValue={recordCountry}\n                selection\n                search\n                options={recordCountryOptions}\n                onChange={getRecordCountry}\n              />\n            </Form.Field>\n          </Form.Group>\n          <Form.Field>\n            <label>ISRC</label>\n            <Input\n              defaultValue={isrc}\n              maxLength={12}\n              type='text'\n              placeholder='ISRC...'\n              onChange={e => setIsrc(e.target.value)}\n            />\n          </Form.Field>\n          <Form.Field required>\n            <label>Vuosi</label>\n            <Input\n              defaultValue={year}\n              maxLength={4}\n              type='number'\n              placeholder='Vuosi...'\n              onChange={e => setYear(e.target.value)}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Lisätietoa</label>\n            <TextArea\n              defaultValue={comment}\n              onChange={e => setComment(e.target.value)}\n              placeholder='Lisätietoa...'\n            />\n          </Form.Field>\n          <Button\n            // disabled={\n            //   !artist ||\n            //   !album ||\n            //   !track ||\n            //   !trackNo ||\n            //   !discNo ||\n            //   !min ||\n            //   !sec ||\n            //   !label ||\n            //   !catId ||\n            //   !year\n            // }\n            color='green'\n            onClick={submitTrack}\n          >\n            Tallenna muutokset\n          </Button>\n          {addToReportButton()}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nTrackDetailsForm.propTypes = {\n  currentTrack: PropTypes.shape({\n    album: PropTypes.string,\n    album_id: PropTypes.number,\n    artist: PropTypes.string,\n    artist_id: PropTypes.number,\n    cat_id: PropTypes.string,\n    comment: PropTypes.string,\n    country: PropTypes.number,\n    disc_no: PropTypes.number,\n    isrc: PropTypes.string,\n    label: PropTypes.string,\n    length: PropTypes.number,\n    people: PropTypes.string,\n    record_country: PropTypes.string,\n    track_id: PropTypes.number,\n    track_no: PropTypes.number,\n    track_title: PropTypes.string,\n    year: PropTypes.string\n  }),\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.array\n  }),\n  track: PropTypes.shape({\n    currentTrack: PropTypes.arrayOf(\n      PropTypes.shape({\n        album: PropTypes.string,\n        album_id: PropTypes.number,\n        artist: PropTypes.string,\n        artist_id: PropTypes.number,\n        cat_id: PropTypes.string,\n        comment: PropTypes.string,\n        country: PropTypes.number,\n        disc_no: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        length: PropTypes.number,\n        people: PropTypes.string,\n        record_country: PropTypes.string,\n        track_id: PropTypes.number,\n        track_no: PropTypes.number,\n        track_title: PropTypes.string,\n        year: PropTypes.string\n      })\n    )\n  }),\n  setNotificationConnect: PropTypes.func,\n  updateTrackConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    track: state.track,\n    report: state.report\n  };\n};\n\nconst connectedTrackDetailsForm = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  updateTrackConnect: updateTrack,\n  addTrackToReport\n})(TrackDetailsForm);\n\nexport default connectedTrackDetailsForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n\nconst PlayHistoryItem = ({ pgm }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>{pgm.program_date}</Table.Cell>\n      <Table.Cell>\n        <Link to={`/reports/${pgm.report_id}`}>{pgm.program_name}</Link>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nPlayHistoryItem.propTypes = {\n  pgm: PropTypes.shape({\n    program_name: PropTypes.string,\n    program_date: PropTypes.string,\n    program_id: PropTypes.number,\n    report_id: PropTypes.number,\n    track_id: PropTypes.number\n  })\n};\n\nexport default PlayHistoryItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Dimmer, Loader } from 'semantic-ui-react';\nimport PlayHistoryItem from './PlayHistoryItem';\n\nconst PlayHistory = ({ playhistory }) => {\n  if (playhistory === null) {\n    return (\n      <Dimmer>\n        <Loader>Ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n  return (\n    <React.Fragment>\n      <h4>Soittohistoria</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Päivämäärä</Table.Cell>\n            <Table.Cell>Ohjelma</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {playhistory.map(pgm => (\n            <PlayHistoryItem key={pgm.report_id} pgm={pgm} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nPlayHistory.propTypes = {\n  playhistory: PropTypes.arrayOf(\n    PropTypes.shape({\n      program_name: PropTypes.string,\n      program_date: PropTypes.string,\n      program_id: PropTypes.number,\n      report_id: PropTypes.number,\n      track_id: PropTypes.number\n    })\n  )\n};\n\nexport default PlayHistory;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport TrackDetailsForm from './TrackDetailsForm';\nimport PlayHistory from './PlayHistory';\nimport { getOneTrack, getOneTrackHistory } from '../../actions/trackActions';\n\nconst TrackDetails = ({\n  track,\n  id,\n  getOneTrackConnect,\n  getOneTrackHistoryConnect\n}) => {\n  useEffect(() => {\n    getOneTrackHistoryConnect(parseInt(id));\n    getOneTrackConnect(parseInt(id));\n    // eslint-disable-next-line\n  }, []);\n\n  if (track.currentTrack === null || track.playhistory === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <TrackDetailsForm currentTrack={track.currentTrack[0]} />\n      <PlayHistory playhistory={track.playhistory} />\n    </Container>\n  );\n};\n\nTrackDetails.propTypes = {\n  id: PropTypes.string,\n  track: PropTypes.shape({\n    currentTrack: PropTypes.arrayOf(\n      PropTypes.shape({\n        track_id: PropTypes.number\n      })\n    ),\n    playhistory: PropTypes.arrayOf(\n      PropTypes.shape({\n        program_name: PropTypes.string,\n        program_date: PropTypes.string,\n        program_id: PropTypes.number,\n        report_id: PropTypes.number,\n        track_id: PropTypes.number\n      })\n    )\n  }),\n  getOneTrackConnect: PropTypes.func,\n  getOneTrackHistoryConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    track: state.track\n  };\n};\n\nconst connectedTrackDetails = connect(mapStateToProps, {\n  getOneTrackConnect: getOneTrack,\n  getOneTrackHistoryConnect: getOneTrackHistory\n})(TrackDetails);\nexport default connectedTrackDetails;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Input } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { newLogin } from '../../actions/loginActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport Notification from '../layout/Notification';\n\n// eslint-disable-next-line no-shadow\nconst LoginForm = ({ newLogin }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  // handle login redux\n  const handleLogin = async event => {\n    event.preventDefault();\n    const user = {\n      username,\n      password\n    };\n    newLogin(user);\n  };\n  return (\n    <div>\n      <h1>RADIO HELSINKI - TEOSTORAPORTOINTI</h1>\n      <h3>Kirjaudu sisään</h3>\n      <Notification />\n      <Form onSubmit={handleLogin}>\n        <Form.Field\n          label='Käyttäjätunnus'\n          control={Input}\n          type='text'\n          placeholder='Käyttäjätunnus...'\n          onChange={e => setUsername(e.target.value.trim())}\n        />\n        <Form.Field\n          label='Salasana'\n          control={Input}\n          type='password'\n          placeholder='Salasana...'\n          onChange={e => setPassword(e.target.value.trim())}\n        />\n        <Button color='green' type='submit'>\n          Kirjaudu\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nLoginForm.propTypes = {\n  newLogin: PropTypes.func.isRequired\n};\n\nexport default connect(null, { newLogin, setNotification })(LoginForm);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Form,\n  Header,\n  Container,\n  Dimmer,\n  Loader\n} from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport fi from 'date-fns/locale/fi';\nimport { getAllReportsByDate } from '../../actions/reportsListActions';\nimport { generateReportTransfer } from '../../actions/reportTransferActions';\n\nconst ReportTransferOptions = ({\n  reportsList,\n  login,\n  getAllReportsByDateConnect,\n  generateReportTransferConnect\n}) => {\n  const [pickerDate, setPickerDate] = useState(new Date());\n\n  useEffect(() => {\n    getAllReportsByDateConnect(moment(pickerDate).format('YYYY-MM'));\n    // eslint-disable-next-line\n  }, [pickerDate]);\n\n  const getTransferFile = () => {\n    const params = {\n      user_id: login.id,\n      status: 1,\n      period: moment(pickerDate).format('YYYY-MM'),\n      filename: `${moment(new Date()).format('YYYYMMDDhhmmss')}.txt`\n    };\n    generateReportTransferConnect(params);\n  };\n\n  if (reportsList.reportsList === null) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  if (reportsList.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  return (\n    <div>\n      <Header>Hae siirtotiedosto ajalta:</Header>\n      <Form>\n        <Form.Field>\n          <DatePicker\n            selected={pickerDate}\n            dateFormat='MMMM yyyy'\n            onChange={date => setPickerDate(date)}\n            showMonthYearPicker\n            locale={fi}\n          />\n        </Form.Field>\n        <Form.Field></Form.Field>\n        <Form.Field>\n          <Button color='blue' onClick={getTransferFile}>\n            HAE\n          </Button>\n        </Form.Field>\n      </Form>\n    </div>\n  );\n};\n\nReportTransferOptions.propTypes = {\n  generateReportTransferConnect: PropTypes.func,\n  getAllReportsByDateConnect: PropTypes.func,\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  reportsList: PropTypes.shape({\n    reportsList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        program_date: PropTypes.string,\n        program_dj: PropTypes.string,\n        program_start_time: PropTypes.string,\n        program_end_time: PropTypes.string,\n        program_no: PropTypes.number,\n        rerun: PropTypes.number,\n        status: PropTypes.number,\n        user_id: PropTypes.number\n      })\n    ),\n    loading: PropTypes.bool\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    reportsList: state.reportsList,\n    login: state.login\n  };\n};\n\nconst connectedReportTransferOptions = connect(mapStateToProps, {\n  getAllReportsByDateConnect: getAllReportsByDate,\n  generateReportTransferConnect: generateReportTransfer\n})(ReportTransferOptions);\n\nexport default connectedReportTransferOptions;\n","import {\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  SET_LOADING\n} from './types';\nimport reportService from '../services/reports';\n\n// get a list of reports by date\nexport const getAllTransfers = () => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const reports = await reportService.getAllTransfers();\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const generateReportTransfer = params => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADING\n    });\n    const transferredReport = await reportService.generateReportDownload(\n      params\n    );\n    const reports = await reportService.getAllTransfers();\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports\n    });\n    dispatch({\n      type: GENERATE_REPORT_TRANSFER,\n      data: transferredReport\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { downloadReport } from '../../services/reports';\n\nconst ReportTransferListItem = ({ item }) => {\n  const downloadTransfer = filename => {\n    downloadReport(filename);\n  };\n  return (\n    <Table.Row>\n      <Table.Cell>{item.created_at}</Table.Cell>\n      <Table.Cell>\n        {item.first_name} {item.last_name}\n      </Table.Cell>\n      <Table.Cell>{moment(item.period).format('MM/YYYY')}</Table.Cell>\n      <Table.Cell>\n        <button\n          type='button'\n          className='link-btn'\n          onClick={() => downloadTransfer(item.filename)}\n        >\n          {item.filename}\n        </button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nReportTransferListItem.propTypes = {\n  item: PropTypes.shape({\n    created_at: PropTypes.string,\n    filename: PropTypes.string,\n    first_name: PropTypes.string,\n    id: PropTypes.number,\n    last_name: PropTypes.string,\n    period: PropTypes.string,\n    status: PropTypes.number,\n    updated_at: PropTypes.string,\n    user_id: PropTypes.number,\n    username: PropTypes.string\n  })\n};\n\nexport default ReportTransferListItem;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container, Table, Dimmer, Loader } from 'semantic-ui-react';\nimport ReportTransferOptions from './ReportTransferOptions';\nimport ReportTransferListItem from './ReportTransferListItem';\nimport { getAllTransfers } from '../../actions/reportTransferActions';\n\nconst ReportTransferList = ({ reportsList, login, getAllTransfersConnect }) => {\n  useEffect(() => {\n    getAllTransfersConnect();\n    // eslint-disable-next-line\n  }, [reportsList.lastReport]);\n\n  if (reportsList.reportTransferList === null) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  if (login.level === 3) {\n    return (\n      <Container>\n        <h1>Siirtotiedostot</h1>\n        <ReportTransferOptions />\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>Luontipäivämäärä</Table.Cell>\n              <Table.Cell>Käyttäjä</Table.Cell>\n              <Table.Cell>Raportin ajankohta</Table.Cell>\n              <Table.Cell>Siirtotiedosto</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {reportsList.reportTransferList.map(item => (\n              <ReportTransferListItem key={item.id} item={item} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nReportTransferList.propTypes = {\n  reportsList: PropTypes.shape({\n    reportTransferList: PropTypes.arrayOf(\n      PropTypes.shape({\n        created_at: PropTypes.string,\n        filename: PropTypes.string,\n        first_name: PropTypes.string,\n        id: PropTypes.number,\n        last_name: PropTypes.string,\n        period: PropTypes.string,\n        status: PropTypes.number,\n        updated_at: PropTypes.string,\n        user_id: PropTypes.number,\n        username: PropTypes.string\n      })\n    ),\n    lastTransfer: PropTypes.shape({\n      created_at: PropTypes.string,\n      filename: PropTypes.string,\n      id: PropTypes.number,\n      period: PropTypes.string,\n      status: PropTypes.number,\n      updated_at: PropTypes.string,\n      user_id: PropTypes.number\n    })\n  }),\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  getAllTransfersConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    reportsList: state.reportsList,\n    login: state.login\n  };\n};\n\nconst mapDispatchToProps = {\n  getAllTransfersConnect: getAllTransfers\n};\n\nconst connectedReportTransferList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReportTransferList);\n\nexport default connectedReportTransferList;\n","import {\n  AUTOCOMPLETE_RESULTS,\n  SET_SEARCH_LOADING,\n  TOP_100,\n  GET_DISCOGS_CATID,\n  CLEAR_DISCOGS_CATID,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_CHANGE_ALBUM_OPTIONS,\n  GET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ALBUM_OPTIONS\n} from './types';\nimport searchService from '../services/search';\n\nexport const getAutocompleteResults = query => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING\n    });\n    const results = await searchService.getTracksForSearch(query);\n    dispatch({\n      type: AUTOCOMPLETE_RESULTS,\n      data: results\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const advancedSearch = searchParams => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING\n    });\n    const results = await searchService.advancedSearch(searchParams);\n    dispatch({\n      type: ADVANCED_RESULTS,\n      data: results\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const sortAdvancedResults = sortBy => async dispatch => {\n  try {\n    dispatch({\n      type: SORT_ADVANCED_RESULTS,\n      data: sortBy\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCatIdFromDiscogs = query => async dispatch => {\n  try {\n    let catId;\n    const results = await searchService.getCatIdFromDiscogs(query);\n    console.log(results.results.length);\n    if (results.results.length === 0) {\n      catId = 'EI ILMOITETTU';\n    } else if (results.results[0].catno !== 'none') {\n      catId = results.results[0].catno;\n    } else if (results.results[1].catno !== 'none') {\n      catId = results.results[1].catno;\n    } else if (results.results[2].catno !== 'none') {\n      catId = results.results[2].catno;\n    } else if (results.results[3].catno !== 'none') {\n      catId = results.results[3].catno;\n    } else if (results.results[4].catno !== 'none') {\n      catId = results.results[4].catno;\n    } else {\n      catId = 'EI ILMOITETTU';\n    }\n    console.log(catId);\n    dispatch({\n      type: GET_DISCOGS_CATID,\n      data: catId\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const clearDiscogsCatId = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_DISCOGS_CATID\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getTop100 = query => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING\n    });\n    const results = await searchService.getTop100(query);\n    dispatch({\n      type: TOP_100,\n      data: results,\n      query\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getChangeAlbumOptions = query => async dispatch => {\n  try {\n    dispatch({\n      type: RESET_CHANGE_ALBUM_OPTIONS\n    });\n    dispatch({\n      type: SET_SEARCH_LOADING\n    });\n    const results = await searchService.changeAlbumOptions(query);\n    dispatch({\n      type: GET_CHANGE_ALBUM_OPTIONS,\n      data: results\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getChangeArtistOptions = query => async dispatch => {\n  try {\n    dispatch({\n      type: RESET_CHANGE_ARTIST_OPTIONS\n    });\n    dispatch({\n      type: SET_SEARCH_LOADING\n    });\n    const results = await searchService.changeArtistOptions(query);\n    dispatch({\n      type: GET_CHANGE_ARTIST_OPTIONS,\n      data: results\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  TextArea,\n  Dropdown\n} from 'semantic-ui-react';\nimport { getCatIdFromDiscogs } from '../../actions/searchActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { addTrackToDb, addNewTrack } from '../../actions/trackActions';\n\nconst AddTrackBtn = ({\n  search,\n  login,\n  report,\n  setNotificationConnect,\n  addTrackToDbConnect,\n  addNewTrackConnect,\n  getCatIdFromDiscogsConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [artist, setArtist] = useState('');\n  const [album, setAlbum] = useState('');\n  const [track, setTrack] = useState('');\n  const [min, setMin] = useState('');\n  const [sec, setSec] = useState('');\n  const [country, setCountry] = useState('');\n  const [recordCountry, setRecordCountry] = useState('');\n  const [people, setPeople] = useState('');\n  const [discNo, setDiscNo] = useState('');\n  const [trackNo, setTrackNo] = useState('');\n  const [year, setYear] = useState('');\n  const [label, setLabel] = useState('');\n  const [catId, setCatId] = useState('');\n  const [isrc, setIsrc] = useState('');\n  const [comment, setComment] = useState('');\n  useEffect(() => {\n    if (search.discogsCatId === null) {\n      setCatId('');\n    } else {\n      setCatId(search.discogsCatId);\n    }\n  }, [search.discogsCatId]);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const submitTrack = () => {\n    // artist name validation\n    if (artist === null) {\n      setNotificationConnect('Artisti on pakollinen tieto', 'fail');\n    }\n    const length = parseInt(min) * 60 + parseInt(sec);\n    if (people === null) {\n      const trackToAdd = {\n        artist_name: artist,\n        album_name: album,\n        track_title: track,\n        length,\n        country,\n        record_country: recordCountry,\n        people,\n        disc_no: parseInt(discNo),\n        track_no: parseInt(trackNo),\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        user_id: login.id\n      };\n      addTrackToDbConnect(trackToAdd);\n      setNotificationConnect(`${trackToAdd.track_title} lisätty!`, 'success');\n      handleClose();\n    } else {\n      const trackToAdd = {\n        artist_name: artist,\n        album_name: album,\n        track_title: track,\n        length,\n        country,\n        record_country: recordCountry,\n        people: `| ${people.replace(/\\n/g, ' | ')} |`,\n        disc_no: discNo,\n        track_no: trackNo,\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        user_id: login.id\n      };\n      addTrackToDbConnect(trackToAdd);\n      setNotificationConnect(`${trackToAdd.track_title} lisätty!`, 'success');\n      handleClose();\n    }\n  };\n\n  const saveAndAddToReport = () => {\n    // artist name validation\n    if (artist === null) {\n      setNotificationConnect('Artisti on pakollinen tieto', 'fail');\n    }\n    const length = parseInt(min) * 60 + parseInt(sec);\n    if (people === null) {\n      const trackToAdd = {\n        artist_name: artist,\n        album_name: album,\n        track_title: track,\n        length,\n        country,\n        record_country: recordCountry,\n        people,\n        disc_no: discNo,\n        track_no: trackNo,\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        report_id: report.reportDetails.id,\n        user_id: login.id,\n        sortable_rank: report.report.length + 1\n      };\n      addNewTrackConnect(trackToAdd);\n      setNotificationConnect(\n        `${trackToAdd.track_title} lisätty ja tallennettu raporttiin ${report.reportDetails.program_name}!`,\n        'success'\n      );\n      handleClose();\n    } else {\n      const trackToAdd = {\n        artist_name: artist,\n        album_name: album,\n        track_title: track,\n        length,\n        country,\n        record_country: recordCountry,\n        people: `| ${people.replace(/\\n/g, ' | ')} |`,\n        disc_no: discNo,\n        track_no: trackNo,\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        report_id: report.reportDetails.id,\n        user_id: login.id,\n        sortable_rank: report.report.length + 1\n      };\n      addNewTrackConnect(trackToAdd);\n      setNotificationConnect(\n        `${trackToAdd.track_title} lisätty ja tallennettu raporttiin ${report.reportDetails.program_name}!`,\n        'success'\n      );\n      handleClose();\n    }\n  };\n\n  // save and add to report button - render if current report exists\n  const saveAndAddToReportButton = () => {\n    if (report.reportDetails === null) {\n      return null;\n    }\n    return (\n      <Button\n        disabled={\n          !artist ||\n          !album ||\n          !track ||\n          !trackNo ||\n          !discNo ||\n          !min ||\n          !sec ||\n          !label ||\n          !catId ||\n          !year\n        }\n        onClick={saveAndAddToReport}\n        color='green'\n      >\n        Tallenna ja lisää raporttiin\n      </Button>\n    );\n  };\n\n  const countryOptions = [\n    {\n      key: 1,\n      text: 'Suomi',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Muu',\n      value: 2\n    },\n    {\n      key: 0,\n      text: 'Ei tietoa',\n      value: null\n    }\n  ];\n  const getCountry = (event, { value }) => {\n    event.preventDefault();\n    setCountry(value);\n  };\n  const recordCountryOptions = [\n    { text: 'Finland', value: 'FI' },\n    { text: 'United Kingdom', value: 'GB' },\n    { text: 'United States', value: 'US' },\n    { text: 'Afghanistan', value: 'AF' },\n    { text: 'Åland Islands', value: 'AX' },\n    { text: 'Albania', value: 'AL' },\n    { text: 'Algeria', value: 'DZ' },\n    { text: 'American Samoa', value: 'AS' },\n    { text: 'AndorrA', value: 'AD' },\n    { text: 'Angola', value: 'AO' },\n    { text: 'Anguilla', value: 'AI' },\n    { text: 'Antarctica', value: 'AQ' },\n    { text: 'Antigua and Barbuda', value: 'AG' },\n    { text: 'Argentina', value: 'AR' },\n    { text: 'Armenia', value: 'AM' },\n    { text: 'Aruba', value: 'AW' },\n    { text: 'Australia', value: 'AU' },\n    { text: 'Austria', value: 'AT' },\n    { text: 'Azerbaijan', value: 'AZ' },\n    { text: 'Bahamas', value: 'BS' },\n    { text: 'Bahrain', value: 'BH' },\n    { text: 'Bangladesh', value: 'BD' },\n    { text: 'Barbados', value: 'BB' },\n    { text: 'Belarus', value: 'BY' },\n    { text: 'Belgium', value: 'BE' },\n    { text: 'Belize', value: 'BZ' },\n    { text: 'Benin', value: 'BJ' },\n    { text: 'Bermuda', value: 'BM' },\n    { text: 'Bhutan', value: 'BT' },\n    { text: 'Bolivia', value: 'BO' },\n    { text: 'Bosnia and Herzegovina', value: 'BA' },\n    { text: 'Botswana', value: 'BW' },\n    { text: 'Bouvet Island', value: 'BV' },\n    { text: 'Brazil', value: 'BR' },\n    { text: 'British Indian Ocean Territory', value: 'IO' },\n    { text: 'Brunei Darussalam', value: 'BN' },\n    { text: 'Bulgaria', value: 'BG' },\n    { text: 'Burkina Faso', value: 'BF' },\n    { text: 'Burundi', value: 'BI' },\n    { text: 'Cambodia', value: 'KH' },\n    { text: 'Cameroon', value: 'CM' },\n    { text: 'Canada', value: 'CA' },\n    { text: 'Cape Verde', value: 'CV' },\n    { text: 'Cayman Islands', value: 'KY' },\n    { text: 'Central African Republic', value: 'CF' },\n    { text: 'Chad', value: 'TD' },\n    { text: 'Chile', value: 'CL' },\n    { text: 'China', value: 'CN' },\n    { text: 'Christmas Island', value: 'CX' },\n    { text: 'Cocos (Keeling) Islands', value: 'CC' },\n    { text: 'Colombia', value: 'CO' },\n    { text: 'Comoros', value: 'KM' },\n    { text: 'Congo', value: 'CG' },\n    { text: 'Congo, The Democratic Republic of the', value: 'CD' },\n    { text: 'Cook Islands', value: 'CK' },\n    { text: 'Costa Rica', value: 'CR' },\n    { text: \"Cote D'Ivoire\", value: 'CI' },\n    { text: 'Croatia', value: 'HR' },\n    { text: 'Cuba', value: 'CU' },\n    { text: 'Cyprus', value: 'CY' },\n    { text: 'Czech Republic', value: 'CZ' },\n    { text: 'Denmark', value: 'DK' },\n    { text: 'Djibouti', value: 'DJ' },\n    { text: 'Dominica', value: 'DM' },\n    { text: 'Dominican Republic', value: 'DO' },\n    { text: 'Ecuador', value: 'EC' },\n    { text: 'Egypt', value: 'EG' },\n    { text: 'El Salvador', value: 'SV' },\n    { text: 'Equatorial Guinea', value: 'GQ' },\n    { text: 'Eritrea', value: 'ER' },\n    { text: 'Estonia', value: 'EE' },\n    { text: 'Ethiopia', value: 'ET' },\n    { text: 'Falkland Islands (Malvinas)', value: 'FK' },\n    { text: 'Faroe Islands', value: 'FO' },\n    { text: 'Fiji', value: 'FJ' },\n    { text: 'France', value: 'FR' },\n    { text: 'French Guiana', value: 'GF' },\n    { text: 'French Polynesia', value: 'PF' },\n    { text: 'French Southern Territories', value: 'TF' },\n    { text: 'Gabon', value: 'GA' },\n    { text: 'Gambia', value: 'GM' },\n    { text: 'Georgia', value: 'GE' },\n    { text: 'Germany', value: 'DE' },\n    { text: 'Ghana', value: 'GH' },\n    { text: 'Gibraltar', value: 'GI' },\n    { text: 'Greece', value: 'GR' },\n    { text: 'Greenland', value: 'GL' },\n    { text: 'Grenada', value: 'GD' },\n    { text: 'Guadeloupe', value: 'GP' },\n    { text: 'Guam', value: 'GU' },\n    { text: 'Guatemala', value: 'GT' },\n    { text: 'Guernsey', value: 'GG' },\n    { text: 'Guinea', value: 'GN' },\n    { text: 'Guinea-Bissau', value: 'GW' },\n    { text: 'Guyana', value: 'GY' },\n    { text: 'Haiti', value: 'HT' },\n    { text: 'Heard Island and Mcdonald Islands', value: 'HM' },\n    { text: 'Holy See (Vatican City State)', value: 'VA' },\n    { text: 'Honduras', value: 'HN' },\n    { text: 'Hong Kong', value: 'HK' },\n    { text: 'Hungary', value: 'HU' },\n    { text: 'Iceland', value: 'IS' },\n    { text: 'India', value: 'IN' },\n    { text: 'Indonesia', value: 'ID' },\n    { text: 'Iran, Islamic Republic Of', value: 'IR' },\n    { text: 'Iraq', value: 'IQ' },\n    { text: 'Ireland', value: 'IE' },\n    { text: 'Isle of Man', value: 'IM' },\n    { text: 'Israel', value: 'IL' },\n    { text: 'Italy', value: 'IT' },\n    { text: 'Jamaica', value: 'JM' },\n    { text: 'Japan', value: 'JP' },\n    { text: 'Jersey', value: 'JE' },\n    { text: 'Jordan', value: 'JO' },\n    { text: 'Kazakhstan', value: 'KZ' },\n    { text: 'Kenya', value: 'KE' },\n    { text: 'Kiribati', value: 'KI' },\n    { text: \"Korea, Democratic People's Republic of\", value: 'KP' },\n    { text: 'Korea, Republic of', value: 'KR' },\n    { text: 'Kuwait', value: 'KW' },\n    { text: 'Kyrgyzstan', value: 'KG' },\n    { text: \"Lao People's Democratic Republic\", value: 'LA' },\n    { text: 'Latvia', value: 'LV' },\n    { text: 'Lebanon', value: 'LB' },\n    { text: 'Lesotho', value: 'LS' },\n    { text: 'Liberia', value: 'LR' },\n    { text: 'Libyan Arab Jamahiriya', value: 'LY' },\n    { text: 'Liechtenstein', value: 'LI' },\n    { text: 'Lithuania', value: 'LT' },\n    { text: 'Luxembourg', value: 'LU' },\n    { text: 'Macao', value: 'MO' },\n    { text: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n    { text: 'Madagascar', value: 'MG' },\n    { text: 'Malawi', value: 'MW' },\n    { text: 'Malaysia', value: 'MY' },\n    { text: 'Maldives', value: 'MV' },\n    { text: 'Mali', value: 'ML' },\n    { text: 'Malta', value: 'MT' },\n    { text: 'Marshall Islands', value: 'MH' },\n    { text: 'Martinique', value: 'MQ' },\n    { text: 'Mauritania', value: 'MR' },\n    { text: 'Mauritius', value: 'MU' },\n    { text: 'Mayotte', value: 'YT' },\n    { text: 'Mexico', value: 'MX' },\n    { text: 'Micronesia, Federated States of', value: 'FM' },\n    { text: 'Moldova, Republic of', value: 'MD' },\n    { text: 'Monaco', value: 'MC' },\n    { text: 'Mongolia', value: 'MN' },\n    { text: 'Montenegro', value: 'ME' },\n    { text: 'Montserrat', value: 'MS' },\n    { text: 'Morocco', value: 'MA' },\n    { text: 'Mozambique', value: 'MZ' },\n    { text: 'Myanmar', value: 'MM' },\n    { text: 'Namibia', value: 'NA' },\n    { text: 'Nauru', value: 'NR' },\n    { text: 'Nepal', value: 'NP' },\n    { text: 'Netherlands', value: 'NL' },\n    { text: 'Netherlands Antilles', value: 'AN' },\n    { text: 'New Caledonia', value: 'NC' },\n    { text: 'New Zealand', value: 'NZ' },\n    { text: 'Nicaragua', value: 'NI' },\n    { text: 'Niger', value: 'NE' },\n    { text: 'Nigeria', value: 'NG' },\n    { text: 'Niue', value: 'NU' },\n    { text: 'Norfolk Island', value: 'NF' },\n    { text: 'Northern Mariana Islands', value: 'MP' },\n    { text: 'Norway', value: 'NO' },\n    { text: 'Oman', value: 'OM' },\n    { text: 'Pakistan', value: 'PK' },\n    { text: 'Palau', value: 'PW' },\n    { text: 'Palestinian Territory, Occupied', value: 'PS' },\n    { text: 'Panama', value: 'PA' },\n    { text: 'Papua New Guinea', value: 'PG' },\n    { text: 'Paraguay', value: 'PY' },\n    { text: 'Peru', value: 'PE' },\n    { text: 'Philippines', value: 'PH' },\n    { text: 'Poland', value: 'PL' },\n    { text: 'Portugal', value: 'PT' },\n    { text: 'Puerto Rico', value: 'PR' },\n    { text: 'Qatar', value: 'QA' },\n    { text: 'Romania', value: 'RO' },\n    { text: 'Russian Federation', value: 'RU' },\n    { text: 'RWANDA', value: 'RW' },\n    { text: 'Saint Helena', value: 'SH' },\n    { text: 'Saint Kitts and Nevis', value: 'KN' },\n    { text: 'Saint Lucia', value: 'LC' },\n    { text: 'Saint Pierre and Miquelon', value: 'PM' },\n    { text: 'Saint Vincent and the Grenadines', value: 'VC' },\n    { text: 'Samoa', value: 'WS' },\n    { text: 'San Marino', value: 'SM' },\n    { text: 'Sao Tome and Principe', value: 'ST' },\n    { text: 'Saudi Arabia', value: 'SA' },\n    { text: 'Senegal', value: 'SN' },\n    { text: 'Serbia', value: 'RS' },\n    { text: 'Seychelles', value: 'SC' },\n    { text: 'Sierra Leone', value: 'SL' },\n    { text: 'Singapore', value: 'SG' },\n    { text: 'Slovakia', value: 'SK' },\n    { text: 'Slovenia', value: 'SI' },\n    { text: 'Solomon Islands', value: 'SB' },\n    { text: 'Somalia', value: 'SO' },\n    { text: 'South Africa', value: 'ZA' },\n    { text: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n    { text: 'Spain', value: 'ES' },\n    { text: 'Sri Lanka', value: 'LK' },\n    { text: 'Sudan', value: 'SD' },\n    { text: 'Suriname', value: 'SR' },\n    { text: 'Svalbard and Jan Mayen', value: 'SJ' },\n    { text: 'Swaziland', value: 'SZ' },\n    { text: 'Sweden', value: 'SE' },\n    { text: 'Switzerland', value: 'CH' },\n    { text: 'Syrian Arab Republic', value: 'SY' },\n    { text: 'Taiwan, Province of China', value: 'TW' },\n    { text: 'Tajikistan', value: 'TJ' },\n    { text: 'Tanzania, United Republic of', value: 'TZ' },\n    { text: 'Thailand', value: 'TH' },\n    { text: 'Timor-Leste', value: 'TL' },\n    { text: 'Togo', value: 'TG' },\n    { text: 'Tokelau', value: 'TK' },\n    { text: 'Tonga', value: 'TO' },\n    { text: 'Trinidad and Tobago', value: 'TT' },\n    { text: 'Tunisia', value: 'TN' },\n    { text: 'Turkey', value: 'TR' },\n    { text: 'Turkmenistan', value: 'TM' },\n    { text: 'Turks and Caicos Islands', value: 'TC' },\n    { text: 'Tuvalu', value: 'TV' },\n    { text: 'Uganda', value: 'UG' },\n    { text: 'Ukraine', value: 'UA' },\n    { text: 'United Arab Emirates', value: 'AE' },\n    { text: 'United States Minor Outlying Islands', value: 'UM' },\n    { text: 'Uruguay', value: 'UY' },\n    { text: 'Uzbekistan', value: 'UZ' },\n    { text: 'Vanuatu', value: 'VU' },\n    { text: 'Venezuela', value: 'VE' },\n    { text: 'Viet Nam', value: 'VN' },\n    { text: 'Virgin Islands, British', value: 'VG' },\n    { text: 'Virgin Islands, U.S.', value: 'VI' },\n    { text: 'Wallis and Futuna', value: 'WF' },\n    { text: 'Western Sahara', value: 'EH' },\n    { text: 'Yemen', value: 'YE' },\n    { text: 'Zambia', value: 'ZM' },\n    { text: 'Zimbabwe', value: 'ZW' }\n  ];\n  const getRecordCountry = (event, { value }) => {\n    event.preventDefault();\n    setRecordCountry(value);\n  };\n  const getDiscogs = () => {\n    const query = {\n      artist,\n      album\n    };\n    getCatIdFromDiscogsConnect(query);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      trigger={\n        <Button color='blue' onClick={handleOpen}>\n          Lisää uusi biisi\n        </Button>\n      }\n      onClose={handleClose}\n    >\n      <Header content='Lisää uusi biisi' />\n      <Modal.Content>\n        <Form onSubmit={submitTrack}>\n          <Form.Field\n            required\n            control={Input}\n            value={artist}\n            type='text'\n            placeholder='Artisti...'\n            onChange={e => setArtist(e.target.value)}\n            label='Artisti'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={album}\n            type='text'\n            placeholder='Albumi...'\n            onChange={e => setAlbum(e.target.value)}\n            label='Albumi'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={track}\n            type='text'\n            placeholder='Biisi...'\n            onChange={e => setTrack(e.target.value)}\n            label='Biisi'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Input}\n              maxLength={4}\n              value={min}\n              type='number'\n              placeholder='Minuuttia...'\n              onChange={e => setMin(e.target.value)}\n              label='Kesto - minuutit'\n            />\n            <Form.Field\n              required\n              control={Input}\n              value={sec}\n              maxLength={2}\n              type='number'\n              placeholder='Sekuntia...'\n              onChange={e => setSec(e.target.value)}\n              label='Kesto - sekunnit'\n            />\n          </Form.Group>\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Input}\n              maxLength={2}\n              value={discNo}\n              type='number'\n              placeholder='CD1=1, CD2=2, A1=1, A2=2...'\n              onChange={e => setDiscNo(e.target.value)}\n              label='Levy#'\n            />\n            <Form.Field\n              required\n              control={Input}\n              value={trackNo}\n              maxLength={2}\n              type='number'\n              placeholder='Biisi #...'\n              onChange={e => setTrackNo(e.target.value)}\n              label='Biisi#'\n            />\n          </Form.Group>\n          <Form.Field\n            control={TextArea}\n            onChange={e => setPeople(e.target.value)}\n            placeholder='Tekijät - max 5kpl'\n            label='Tekijät - max 5kpl, yksi per rivi, SUKUNIMI ETUNIMI'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Dropdown}\n              placeholder='Suomi, muu, ei tietoa...'\n              openOnFocus={false}\n              value={country}\n              selection\n              options={countryOptions}\n              onChange={getCountry}\n              label='Säveltäjän kotimaa'\n            />\n            <Form.Field\n              control={Dropdown}\n              placeholder='Valitse tallennusmaa...'\n              openOnFocus={false}\n              value={recordCountry}\n              selection\n              search\n              options={recordCountryOptions}\n              onChange={getRecordCountry}\n              label='Tallennusmaa'\n            />\n          </Form.Group>\n          <Form.Field\n            required\n            control={Input}\n            value={label}\n            type='text'\n            placeholder='Levymerkki...'\n            onChange={e => setLabel(e.target.value)}\n            label='Levymerkki'\n          />\n          <Form.Field required>\n            <label style={{ display: 'inline' }}>Levykoodi</label>\n            <Button\n              onClick={e => getDiscogs(e.preventDefault())}\n              size='mini'\n              floated='right'\n              style={{ marginBottom: '0.3rem' }}\n            >\n              Hae levykoodi Discogsista\n            </Button>\n            <Input\n              value={catId}\n              type='text'\n              placeholder='Levykoodi...'\n              onChange={e => setCatId(e.target.value)}\n            />\n          </Form.Field>\n          <Form.Field\n            control={Input}\n            value={isrc}\n            maxLength={12}\n            type='text'\n            placeholder='ISRC...'\n            onChange={e => setIsrc(e.target.value)}\n            label='ISRC'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={year}\n            maxLength={4}\n            type='number'\n            placeholder='Vuosi...'\n            onChange={e => setYear(e.target.value)}\n            label='Vuosi'\n          />\n          <Form.Field\n            control={TextArea}\n            onChange={e => setComment(e.target.value)}\n            placeholder='Lisätietoa...'\n            label='Lisätietoa'\n          />\n          <Button\n            disabled={\n              !artist ||\n              !album ||\n              !track ||\n              !trackNo ||\n              !discNo ||\n              !min ||\n              !sec ||\n              !label ||\n              !catId ||\n              !year\n            }\n            color='blue'\n            type='submit'\n          >\n            Tallenna\n          </Button>\n          {saveAndAddToReportButton()}\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nAddTrackBtn.propTypes = {\n  search: PropTypes.shape({\n    discogsCatId: PropTypes.string\n  }),\n  login: PropTypes.shape({\n    id: PropTypes.number\n  }),\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.arrayOf(\n      PropTypes.shape({\n        sortable_rank: PropTypes.number,\n        artist_name: PropTypes.string,\n        track_title: PropTypes.string,\n        length: PropTypes.number,\n        track_id: PropTypes.number,\n        artist_id: PropTypes.number,\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        disc_no: PropTypes.number,\n        track_no: PropTypes.number,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        people: PropTypes.string,\n        record_country: PropTypes.string,\n        year: PropTypes.string,\n        report_track_id: PropTypes.number\n      })\n    )\n  }),\n  setNotificationConnect: PropTypes.func,\n  addTrackToDbConnect: PropTypes.func,\n  addNewTrackConnect: PropTypes.func,\n  getCatIdFromDiscogsConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    login: state.login,\n    search: state.search\n  };\n};\nconst connectedAddTrackBtn = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  addTrackToDbConnect: addTrackToDb,\n  addNewTrackConnect: addNewTrack,\n  getCatIdFromDiscogsConnect: getCatIdFromDiscogs\n})(AddTrackBtn);\n\nexport default connectedAddTrackBtn;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button, Dropdown, Grid } from 'semantic-ui-react';\nimport AddTrackBtn from './AddTrackBtn';\nimport { advancedSearch } from '../../actions/searchActions';\n\nconst SearchForm = ({ advancedSearchConnect }) => {\n  const [searchString, setSearchString] = useState('');\n  const [searchTarget, setSearchTarget] = useState('ar');\n\n  const searchTargetOptions = [\n    {\n      key: 1,\n      text: 'Biisi',\n      value: 'tr'\n    },\n    {\n      key: 2,\n      text: 'Artisti',\n      value: 'ar'\n    },\n    {\n      key: 3,\n      text: 'Album',\n      value: 'al'\n    }\n  ];\n  const getSearchTarget = (e, { value }) => {\n    e.preventDefault();\n    setSearchTarget(value);\n  };\n\n  const handleSearch = () => {\n    const searchParams = {\n      query: searchString,\n      kind: searchTarget\n    };\n    advancedSearchConnect(searchParams);\n  };\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Form>\n          <Form.Field\n            control={Input}\n            placeholder='Hakusana...'\n            type='text'\n            value={searchString}\n            onChange={e => setSearchString(e.target.value)}\n            label='Hakusana'\n          />\n          <Form.Field\n            control={Dropdown}\n            openOnFocus\n            selection\n            defaultValue={searchTarget}\n            options={searchTargetOptions}\n            onChange={getSearchTarget}\n            label='Hae Biisin / Artistin / Albumin nimellä:'\n          />\n          <Button color='blue' onClick={handleSearch}>\n            HAE\n          </Button>\n        </Form>\n      </Grid.Column>\n      <Grid.Column>\n        <span style={{ float: 'right' }}>\n          <AddTrackBtn />\n        </span>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nSearchForm.propTypes = {\n  advancedSearchConnect: PropTypes.func.isRequired\n};\n\nconst connectedSearchForm = connect(null, {\n  advancedSearchConnect: advancedSearch\n})(SearchForm);\n\nexport default connectedSearchForm;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Dropdown } from 'semantic-ui-react';\nimport {\n  mergeArtistFunction,\n  updateArtistState\n} from '../../actions/artistActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport ModalNotification from '../layout/ModalNotification';\n\nconst MergeArtists = ({\n  artist_id,\n  artist_name,\n  search,\n  mergeArtistFunctionConnect,\n  updateArtistStateConnect,\n  setNotificationConnect\n}) => {\n  // console.log('merge album tracks modal props', props);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [artistToMerge, setArtistToMerge] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {artist_id}\n      </button>\n    );\n  }\n  const onSubmit = () => {\n    const mergeParams = {\n      type: 'artist',\n      mergeTo: artist_id,\n      merge: artistToMerge,\n      newName: artist_name\n    };\n    if (mergeParams.merge === mergeParams.mergeTo) {\n      setNotificationConnect('Tarkista artisti', 'fail');\n    } else {\n      mergeArtistFunctionConnect(mergeParams);\n      updateArtistStateConnect(mergeParams);\n      setNotificationConnect('Tiedot päivitetty!', 'success');\n      handleClose();\n    }\n  };\n\n  const mergeOptions = Array.from(\n    new Set(search.advancedResults.map(r => r.artist_id))\n  ).map(artist_id => {\n    return {\n      key: artist_id,\n      text: `${artist_id}: ${\n        search.advancedResults.find(r => r.artist_id === artist_id).artist_name\n      }`,\n      value: artist_id\n    };\n  });\n  const getArtistToMerge = (e, { value }) => {\n    e.preventDefault();\n    setArtistToMerge(value);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {artist_id}\n        </button>\n      }\n    >\n      <Header>\n        Yhdistä artistiin {artist_id} - {artist_name} tiedot\n      </Header>\n      <Modal.Content>\n        <ModalNotification />\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getArtistToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nMergeArtists.propTypes = {\n  search: PropTypes.shape({\n    advancedResults: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        length: PropTypes.number,\n        program_date: PropTypes.string,\n        report_id: PropTypes.number,\n        track_id: PropTypes.number,\n        track_title: PropTypes.string\n      })\n    )\n  }),\n  artist_id: PropTypes.number,\n  artist_name: PropTypes.string,\n  setNotificationConnect: PropTypes.func,\n  mergeArtistFunctionConnect: PropTypes.func,\n  updateArtistStateConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  // console.log('MergeArtists state', state);\n  return {\n    search: state.search\n  };\n};\n\nconst connectedMergeArtists = connect(mapStateToProps, {\n  mergeArtistFunctionConnect: mergeArtistFunction,\n  updateArtistStateConnect: updateArtistState,\n  setNotificationConnect: setNotification\n})(MergeArtists);\n\nexport default connectedMergeArtists;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Dropdown } from 'semantic-ui-react';\nimport {\n  mergeAlbumFunction,\n  updateAlbumState\n} from '../../actions/albumActions';\nimport ModalNotification from '../layout/ModalNotification';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst MergeAlbums = ({\n  search,\n  album_id,\n  album_name,\n  mergeAlbumsFunctionConnect,\n  updateAlbumStateConnect,\n  setNotificatonConnect\n}) => {\n  // console.log('merge album tracks modal props', props);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [albumToMerge, setAlbumToMerge] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {album_id}\n      </button>\n    );\n  }\n  const onSubmit = () => {\n    const mergeParams = {\n      type: 'album',\n      merge: albumToMerge,\n      mergeTo: album_id,\n      newName: album_name\n    };\n    if (mergeParams.merge === mergeParams.mergeTo) {\n      setNotificatonConnect('Tarkista albumi', 'fail');\n    } else {\n      updateAlbumStateConnect(mergeParams);\n      mergeAlbumsFunctionConnect(mergeParams);\n      setNotificatonConnect('Tiedot päivitetty!', 'success');\n      handleClose();\n    }\n  };\n\n  const mergeOptions = Array.from(\n    new Set(search.advancedResults.map(r => r.album_id))\n  ).map(album_id => {\n    return {\n      key: album_id,\n      text: `${album_id}: ${\n        search.advancedResults.find(r => r.album_id === album_id).album_name\n      }`,\n      value: album_id\n    };\n  });\n\n  const getalbumToMerge = (e, { value }) => {\n    e.preventDefault();\n    setAlbumToMerge(value);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {album_id}\n        </button>\n      }\n    >\n      <Header>\n        Yhdistä albumiin {album_id} - {album_name} tiedot\n      </Header>\n      <Modal.Content>\n        <ModalNotification />\n\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getalbumToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nMergeAlbums.propTypes = {\n  search: PropTypes.shape({\n    advancedResults: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        length: PropTypes.number,\n        program_date: PropTypes.string,\n        report_id: PropTypes.number,\n        track_id: PropTypes.number,\n        track_title: PropTypes.string\n      })\n    )\n  }),\n  album_id: PropTypes.number.isRequired,\n  album_name: PropTypes.string.isRequired,\n  mergeAlbumsFunctionConnect: PropTypes.func,\n  updateAlbumStateConnect: PropTypes.func,\n  setNotificatonConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  // console.log('MergeAlbums state', state);\n  return {\n    search: state.search\n  };\n};\n\nconst connectedMergeAlbums = connect(mapStateToProps, {\n  mergeAlbumsFunctionConnect: mergeAlbumFunction,\n  updateAlbumStateConnect: updateAlbumState,\n  setNotificatonConnect: setNotification\n})(MergeAlbums);\n\nexport default connectedMergeAlbums;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, Header, Form, Button, Dropdown } from 'semantic-ui-react';\nimport {\n  mergeTrackFunction,\n  updateTrackState\n} from '../../actions/trackActions';\nimport ModalNotification from '../layout/ModalNotification';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst MergeTracks = ({\n  track_id,\n  track_title,\n  search,\n  setNotificationConnect,\n  mergeTrackFunctionConnect,\n  updateTrackStateConnect\n}) => {\n  // console.log('merge track tracks modal props', props);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [trackToMerge, setTrackToMerge] = useState(null);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {track_id}\n      </button>\n    );\n  }\n  const onSubmit = () => {\n    const mergeParams = {\n      type: 'track',\n      merge: trackToMerge,\n      mergeTo: track_id,\n      newName: track_title\n    };\n    if (mergeParams.merge === mergeParams.mergeTo) {\n      setNotificationConnect('Tarkista biisi', 'fail');\n    } else {\n      mergeTrackFunctionConnect(mergeParams);\n      updateTrackStateConnect(mergeParams);\n      setNotificationConnect('Tiedot päivitetty!', 'success');\n      handleClose();\n    }\n  };\n\n  const mergeOptions = search.advancedResults.map(track => ({\n    key: track.track_id,\n    text: `${track.track_id} - ${track.track_title}`,\n    value: track.track_id\n  }));\n  const getTrackToMerge = (e, { value }) => {\n    e.preventDefault();\n    setTrackToMerge(value);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {track_id}\n        </button>\n      }\n    >\n      <Header>\n        Yhdistä biisiin {track_id} - {track_title} tiedot:\n      </Header>\n      <Modal.Content>\n        <ModalNotification />\n\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getTrackToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nMergeTracks.propTypes = {\n  mergeTrackFunctionConnect: PropTypes.func,\n  updateTrackStateConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func,\n  track_id: PropTypes.number,\n  track_title: PropTypes.string,\n  search: PropTypes.shape({\n    advancedResults: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        length: PropTypes.number,\n        program_date: PropTypes.string,\n        report_id: PropTypes.number,\n        track_id: PropTypes.number,\n        track_title: PropTypes.string\n      })\n    )\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst connectedMergeTracks = connect(mapStateToProps, {\n  mergeTrackFunctionConnect: mergeTrackFunction,\n  updateTrackStateConnect: updateTrackState,\n  setNotificationConnect: setNotification\n})(MergeTracks);\n\nexport default connectedMergeTracks;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Icon, Popup } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { addTrackToReport } from '../../actions/reportActions';\n\nconst style = {\n  borderRadius: 0,\n  display: 'block',\n  opacity: 0.9,\n  padding: '2em'\n};\n\nconst AddToCurrentReport = ({\n  report,\n  track_id,\n  track_title,\n  length,\n  addTrackToReportConnect,\n  setNotificationConnect\n}) => {\n  const [redirect, setRedirect] = useState(false);\n  if (!report.reportDetails) {\n    return null;\n  }\n  const onAdd = () => {\n    const trackToSave = {\n      track_id,\n      report_id: report.reportDetails.id,\n      length,\n      sortable_rank: report.report.length + 1\n    };\n    addTrackToReportConnect(trackToSave);\n    setNotificationConnect(\n      `${track_title} lisätty raporttiin ${report.reportDetails.program_name}`,\n      'success'\n    );\n    setRedirect(true);\n  };\n  if (redirect) {\n    return <Redirect to={`/reports/${report.reportDetails.id}`} />;\n  }\n  return (\n    <React.Fragment>\n      <Popup\n        trigger={\n          <Icon\n            style={{ cursor: 'pointer' }}\n            color='green'\n            onClick={onAdd}\n            name='add'\n          />\n        }\n        style={style}\n        inverted\n        basic\n        content={`Lisää kappale ${track_title} raporttiin ${report.reportDetails.program_name}`}\n      />\n    </React.Fragment>\n  );\n};\n\nAddToCurrentReport.propTypes = {\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.arrayOf(\n      PropTypes.shape({\n        sortable_rank: PropTypes.number,\n        artist_name: PropTypes.string,\n        track_title: PropTypes.string,\n        length: PropTypes.number,\n        track_id: PropTypes.number,\n        artist_id: PropTypes.number,\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        disc_no: PropTypes.number,\n        track_no: PropTypes.number,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        people: PropTypes.string,\n        record_country: PropTypes.string,\n        year: PropTypes.string,\n        report_track_id: PropTypes.number\n      })\n    )\n  }),\n  track_id: PropTypes.number.isRequired,\n  track_title: PropTypes.string.isRequired,\n  length: PropTypes.number,\n  addTrackToReportConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report\n  };\n};\nconst connectedAddToCurrentReport = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  addTrackToReportConnect: addTrackToReport\n})(AddToCurrentReport);\n\nexport default connectedAddToCurrentReport;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport MergeArtists from './MergeArtists';\nimport MergeAlbums from './MergeAlbums';\nimport MergeTracks from './MergeTracks';\nimport AddToCurrentReport from '../track/AddToCurrentReport';\n\nconst SearchResultItem = ({ result }) => {\n  if (result === null) {\n    return null;\n  }\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <Link to={`../artist/${result.artist_id}`}>{result.artist_name}</Link>\n        <MergeArtists\n          artist_id={result.artist_id}\n          artist_name={result.artist_name}\n        />\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../album/${result.album_id}`}>{result.album_name}</Link>\n        <MergeAlbums\n          album_id={result.album_id}\n          album_name={result.album_name}\n        />\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../track/${result.track_id}`}>{result.track_title}</Link>\n        <MergeTracks\n          track_id={result.track_id}\n          track_title={result.track_title}\n        />\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../reports/${result.report_id}`}>{result.program_date}</Link>\n      </Table.Cell>\n      <Table.Cell>\n        <AddToCurrentReport\n          track_title={result.track_title}\n          track_id={result.track_id}\n          length={result.length}\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nSearchResultItem.propTypes = {\n  result: PropTypes.shape({\n    album_id: PropTypes.number,\n    album_name: PropTypes.string,\n    artist_id: PropTypes.number,\n    artist_name: PropTypes.string,\n    length: PropTypes.number,\n    program_date: PropTypes.string,\n    report_id: PropTypes.number,\n    track_id: PropTypes.number,\n    track_title: PropTypes.string\n  })\n};\n\nexport default SearchResultItem;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Dropdown, Grid } from 'semantic-ui-react';\nimport { sortAdvancedResults } from '../../actions/searchActions';\n\nconst SortResults = ({ sortAdvancedResultsConnect }) => {\n  const [sortBy, setSortBy] = useState(1);\n\n  useEffect(() => {\n    sortAdvancedResultsConnect(sortBy);\n    // eslint-disable-next-line\n  }, [sortBy]);\n\n  const sortOptions = [\n    {\n      key: 1,\n      text: 'Biisin nimen mukaan',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Artistin nimen mukaan',\n      value: 2\n    }\n  ];\n  const getSortOptions = (e, { value }) => {\n    e.preventDefault();\n    setSortBy(value);\n  };\n  return (\n    <Grid columns={4}>\n      <Grid.Column>\n        <Form>\n          <Form.Field\n            control={Dropdown}\n            defaultValue={sortBy}\n            openOnFocus\n            selection\n            options={sortOptions}\n            onChange={getSortOptions}\n            label='Järjestä tulokset'\n          />\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nSortResults.propTypes = {\n  sortAdvancedResultsConnect: PropTypes.func\n};\n\nconst connectedSortResult = connect(null, {\n  sortAdvancedResultsConnect: sortAdvancedResults\n})(SortResults);\n\nexport default connectedSortResult;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Table, Loader, Dimmer } from 'semantic-ui-react';\nimport SearchResultItem from './SearchResultItem';\nimport SortResults from './SortResults';\n\nconst SearchResults = ({ search }) => {\n  if (search.advancedResults === null) {\n    return null;\n  }\n  if (search.loading === true) {\n    return (\n      <Dimmer active>\n        <Loader>ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n  let resultsToShow = search.advancedResults;\n\n  resultsToShow =\n    search.sortAdvancedResults === 2\n      ? resultsToShow\n      : resultsToShow.sort((a, b) =>\n          a.track_title > b.track_title\n            ? 1\n            : b.track_title > a.track_title\n            ? -1\n            : 0\n        );\n\n  resultsToShow =\n    search.sortAdvancedResults === 1\n      ? resultsToShow\n      : resultsToShow.sort((a, b) =>\n          a.artist_name > b.artist_name\n            ? 1\n            : b.artist_name > a.artist_name\n            ? -1\n            : 0\n        );\n\n  return (\n    <div style={{ marginTop: '2rem' }}>\n      <SortResults />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Esittäjä</Table.Cell>\n            <Table.Cell>Albumi</Table.Cell>\n            <Table.Cell>Biisi</Table.Cell>\n            <Table.Cell>Soinut viimeksi</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {resultsToShow.map(result => (\n            <SearchResultItem key={result.track_id} result={result} />\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nSearchResults.propTypes = {\n  search: PropTypes.shape({\n    advancedResults: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        length: PropTypes.number,\n        program_date: PropTypes.string,\n        report_id: PropTypes.number,\n        track_id: PropTypes.number,\n        track_title: PropTypes.string\n      })\n    ),\n    loading: PropTypes.bool,\n    sortAdvancedResults: PropTypes.number\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst connectedSearchResults = connect(mapStateToProps, null)(SearchResults);\n\nexport default connectedSearchResults;\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport SearchForm from './SearchForm';\nimport SearchResults from './SearchResults';\n\nconst Search = () => {\n  return (\n    <Container>\n      <h1>Haku</h1>\n      <SearchForm />\n      <SearchResults />\n    </Container>\n  );\n};\n\nexport default Search;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Button, Dropdown } from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport fi from 'date-fns/locale/fi';\nimport { getTop100 } from '../../actions/searchActions';\n\nconst Top100SearchForm = props => {\n  const [startDate, setStartDate] = useState(Date.now() - 7 * 24 * 3600 * 1000);\n  const [endDate, setEndDate] = useState(new Date());\n  const [list, setList] = useState('artist_id');\n\n  const handleSearch = () => {\n    const query = {\n      list,\n      start_date: moment(startDate).format('YYYY-MM-DD'),\n      end_date: moment(endDate).format('YYYY-MM-DD')\n    };\n    props.getTop100(query);\n  };\n\n  const listOptions = [\n    {\n      key: 1,\n      value: 'artist_id',\n      text: 'Artistit'\n    },\n    {\n      key: 2,\n      value: 'track_id',\n      text: 'Biisit'\n    },\n    {\n      key: 3,\n      value: 'album_id',\n      text: 'Albumit'\n    }\n  ];\n\n  const getListOptions = (e, { value }) => {\n    e.preventDefault();\n    setList(value);\n  };\n  return (\n    <Form>\n      <Form.Group widths='equal'>\n        <Form.Field\n          label='Hae'\n          control={Dropdown}\n          openOnFocus\n          selection\n          defaultValue={list}\n          options={listOptions}\n          onChange={getListOptions}\n        />\n        <Form.Field\n          label='Alkaen'\n          control={DatePicker}\n          selected={startDate}\n          disabledKeyboardNavigation\n          dateFormat='dd.MM.yyyy'\n          onChange={date => setStartDate(date)}\n          locale={fi}\n        />\n        <Form.Field\n          label='Päättyen'\n          control={DatePicker}\n          selected={endDate}\n          disabledKeyboardNavigation\n          dateFormat='dd.MM.yyyy'\n          onChange={date => setEndDate(date)}\n          locale={fi}\n        />\n        <Form.Field></Form.Field>\n        <Form.Field></Form.Field>\n        <Form.Field></Form.Field>\n      </Form.Group>\n      <Button color='blue' onClick={handleSearch}>\n        Hae\n      </Button>{' '}\n    </Form>\n  );\n};\n\nTop100SearchForm.propTypes = {\n  getTop100: PropTypes.func.isRequired\n};\n\nconst connectedTop100SearchForm = connect(null, { getTop100 })(\n  Top100SearchForm\n);\n\nexport default connectedTop100SearchForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Table, Container } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport Top100SearchForm from './Top100SearchForm';\nimport AddToCurrentReport from '../track/AddToCurrentReport';\n\nconst Top100List = ({ search }) => {\n  if (search.top100Query === null) {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <Top100SearchForm />\n      </Container>\n    );\n  }\n  if (search.loading) {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <Top100SearchForm />\n        <div>Loading</div>\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'artist_id') {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <p>\n          Hae eniten soitettuja biisejä, artisteja tai albumeita tietyllä\n          aikavälillä.\n        </p>\n        <Top100SearchForm />\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>Artisti</Table.Cell>\n              <Table.Cell>Soittokerrat</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {search.top100.map(t => (\n              <Table.Row key={t.track_id}>\n                <Table.Cell>\n                  <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n                </Table.Cell>\n                <Table.Cell>{t.count}</Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'album_id') {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <Top100SearchForm />\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>Artisti</Table.Cell>\n              <Table.Cell>Albumi</Table.Cell>\n              <Table.Cell>Soittokerrat</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {search.top100.map(t => (\n              <Table.Row key={t.track_id}>\n                <Table.Cell>\n                  <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n                </Table.Cell>\n                <Table.Cell>\n                  <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n                </Table.Cell>\n                <Table.Cell>{t.count}</Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'track_id') {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <Top100SearchForm />\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>Artisti</Table.Cell>\n              <Table.Cell>Albumi</Table.Cell>\n              <Table.Cell>Biisi</Table.Cell>\n              <Table.Cell>Soittokerrat</Table.Cell>\n              <Table.Cell></Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {search.top100.map(t => (\n              <Table.Row key={t.track_id}>\n                <Table.Cell>\n                  <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n                </Table.Cell>\n                <Table.Cell>\n                  <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n                </Table.Cell>\n                <Table.Cell>\n                  <Link to={`/track/${t.track_id}`}>{t.track_title}</Link>\n                </Table.Cell>\n                <Table.Cell>{t.count}</Table.Cell>\n                <Table.Cell>\n                  <AddToCurrentReport\n                    track_title={t.track_title}\n                    track_id={t.track_id}\n                    length={t.length}\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n};\n\nTop100List.propTypes = {\n  search: PropTypes.shape({\n    top100Query: PropTypes.shape({\n      list: PropTypes.string,\n      start_date: PropTypes.string,\n      end_date: PropTypes.string\n    }),\n    top100: PropTypes.arrayOf(\n      PropTypes.shape({\n        count: PropTypes.number,\n        track_id: PropTypes.number,\n        track_title: PropTypes.string,\n        album: PropTypes.string,\n        artist: PropTypes.string,\n        album_id: PropTypes.number,\n        artist_id: PropTypes.number\n      })\n    )\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst connectedTop100List = connect(mapStateToProps, null)(Top100List);\n\nexport default connectedTop100List;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  TextArea,\n  Dropdown,\n  Icon\n} from 'semantic-ui-react';\nimport {\n  getOneTrack,\n  removeCurrentTrack,\n  updateTrack\n} from '../../actions/trackActions';\nimport {\n  getCatIdFromDiscogs,\n  clearDiscogsCatId\n} from '../../actions/searchActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst EditTrackModal = ({\n  login,\n  search,\n  report,\n  track,\n  report_track_id,\n  sortable_rank,\n  getCatIdFromDiscogsConnect,\n  clearDiscogsCatIdConnect,\n  updateTrackConnect,\n  setNotificationConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [artist, setArtist] = useState(track.artist_name);\n  const [album, setAlbum] = useState(track.album_name);\n  const [track_title, setTrack] = useState(track.track_title);\n  const [min, setMin] = useState(Math.floor(track.length / 60));\n  const [sec, setSec] = useState(track.length % 60);\n  const [country, setCountry] = useState(track.country);\n  const [recordCountry, setRecordCountry] = useState(track.record_country);\n  const [people, setPeople] = useState(track.people);\n  const [discNo, setDiscNo] = useState(track.disc_no);\n  const [trackNo, setTrackNo] = useState(track.track_no);\n  const [year, setYear] = useState(parseInt(track.year));\n  const [label, setLabel] = useState(track.label);\n  const [catId, setCatId] = useState(track.cat_id);\n  const [isrc, setIsrc] = useState(track.isrc);\n  const [comment, setComment] = useState(track.comment);\n  useEffect(() => {\n    if (track.year === null) {\n      setYear(null);\n    } else {\n      setYear(parseInt(track.year));\n    }\n  }, [track.year]);\n\n  useEffect(() => {\n    if (track.people === null) {\n      setPeople(null);\n    } else if (track.people === undefined) {\n      setPeople(null);\n    } else {\n      setPeople(\n        track.people\n          .replace(/\\| /, '')\n          .replace(/\\| /g, '\\n')\n          .replace(/ \\|/, '')\n      );\n    }\n  }, [track.people]);\n\n  useEffect(() => {\n    if (search.discogsCatId === null) {\n      setCatId(track.cat_id);\n    } else {\n      setCatId(search.discogsCatId);\n    }\n    // eslint-disable-next-line\n  }, [search.discogsCatId]);\n\n  const handleOpen = () => {\n    // getOneTrack(id);\n    setModalOpen(true);\n  };\n\n  const handleClose = () => {\n    // removeCurrentTrack();\n    clearDiscogsCatIdConnect();\n    setModalOpen(false);\n  };\n\n  // if (report.currentTrack === null) {\n  //   return (\n  //     <Icon\n  //       style={{ cursor: 'pointer' }}\n  //       color=\"blue\"\n  //       onClick={handleOpen}\n  //       name=\"edit\"\n  //     />\n  //   );\n  // }\n\n  if (report.loading || !modalOpen) {\n    return (\n      <Modal\n        open={modalOpen}\n        closeIcon\n        trigger={\n          <Icon\n            style={{ cursor: 'pointer' }}\n            color='blue'\n            onClick={handleOpen}\n            name='edit'\n          />\n        }\n        onClose={handleClose}\n      >\n        <Header content='Muokkaa biisin tietoja' />\n        <Modal.Content>ladataan</Modal.Content>\n      </Modal>\n    );\n  }\n  const submitTrack = () => {\n    // artist name validation\n    if (artist === null) {\n      setNotificationConnect('Artisti on pakollinen tieto', 'fail');\n    }\n    if (people === null) {\n      const length = parseInt(min) * 60 + parseInt(sec);\n      const trackToEdit = {\n        artist_name: artist,\n        album_name: album,\n        track_title,\n        length,\n        country,\n        record_country: recordCountry,\n        people,\n        disc_no: discNo,\n        track_no: trackNo,\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        user_id: login.id,\n        artist_id: track.artist_id,\n        album_id: track.album_id,\n        track_id: track.track_id,\n        sortable_rank,\n        report_track_id\n      };\n      updateTrackConnect(trackToEdit);\n      setNotificationConnect(\n        `Biisin ${trackToEdit.track_title} tiedot päivitetty!`,\n        'success'\n      );\n      handleClose();\n    } else {\n      const length = parseInt(min) * 60 + parseInt(sec);\n      const trackToEdit = {\n        artist_name: artist,\n        album_name: album,\n        track_title,\n        length,\n        country,\n        record_country: recordCountry,\n        people: `| ${people.replace(/\\n/g, ' | ')} |`,\n        disc_no: parseInt(discNo),\n        track_no: parseInt(trackNo),\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        user_id: login.id,\n        artist_id: track.artist_id,\n        album_id: track.album_id,\n        track_id: track.track_id,\n        sortable_rank,\n        report_track_id\n      };\n      updateTrackConnect(trackToEdit);\n      setNotificationConnect(\n        `Biisin ${trackToEdit.track_title} tiedot päivitetty!`,\n        'success'\n      );\n      handleClose();\n    }\n  };\n\n  const countryOptions = [\n    {\n      key: 1,\n      text: 'Suomi',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Muu',\n      value: 2\n    },\n    {\n      key: null,\n      text: 'Ei tietoa',\n      value: null\n    }\n  ];\n  const getCountry = (event, { value }) => {\n    event.preventDefault();\n    setCountry(value);\n  };\n  const recordCountryOptions = [\n    { text: 'Finland', value: 'FI' },\n    { text: 'United Kingdom', value: 'GB' },\n    { text: 'United States', value: 'US' },\n    { text: 'Afghanistan', value: 'AF' },\n    { text: 'Åland Islands', value: 'AX' },\n    { text: 'Albania', value: 'AL' },\n    { text: 'Algeria', value: 'DZ' },\n    { text: 'American Samoa', value: 'AS' },\n    { text: 'AndorrA', value: 'AD' },\n    { text: 'Angola', value: 'AO' },\n    { text: 'Anguilla', value: 'AI' },\n    { text: 'Antarctica', value: 'AQ' },\n    { text: 'Antigua and Barbuda', value: 'AG' },\n    { text: 'Argentina', value: 'AR' },\n    { text: 'Armenia', value: 'AM' },\n    { text: 'Aruba', value: 'AW' },\n    { text: 'Australia', value: 'AU' },\n    { text: 'Austria', value: 'AT' },\n    { text: 'Azerbaijan', value: 'AZ' },\n    { text: 'Bahamas', value: 'BS' },\n    { text: 'Bahrain', value: 'BH' },\n    { text: 'Bangladesh', value: 'BD' },\n    { text: 'Barbados', value: 'BB' },\n    { text: 'Belarus', value: 'BY' },\n    { text: 'Belgium', value: 'BE' },\n    { text: 'Belize', value: 'BZ' },\n    { text: 'Benin', value: 'BJ' },\n    { text: 'Bermuda', value: 'BM' },\n    { text: 'Bhutan', value: 'BT' },\n    { text: 'Bolivia', value: 'BO' },\n    { text: 'Bosnia and Herzegovina', value: 'BA' },\n    { text: 'Botswana', value: 'BW' },\n    { text: 'Bouvet Island', value: 'BV' },\n    { text: 'Brazil', value: 'BR' },\n    { text: 'British Indian Ocean Territory', value: 'IO' },\n    { text: 'Brunei Darussalam', value: 'BN' },\n    { text: 'Bulgaria', value: 'BG' },\n    { text: 'Burkina Faso', value: 'BF' },\n    { text: 'Burundi', value: 'BI' },\n    { text: 'Cambodia', value: 'KH' },\n    { text: 'Cameroon', value: 'CM' },\n    { text: 'Canada', value: 'CA' },\n    { text: 'Cape Verde', value: 'CV' },\n    { text: 'Cayman Islands', value: 'KY' },\n    { text: 'Central African Republic', value: 'CF' },\n    { text: 'Chad', value: 'TD' },\n    { text: 'Chile', value: 'CL' },\n    { text: 'China', value: 'CN' },\n    { text: 'Christmas Island', value: 'CX' },\n    { text: 'Cocos (Keeling) Islands', value: 'CC' },\n    { text: 'Colombia', value: 'CO' },\n    { text: 'Comoros', value: 'KM' },\n    { text: 'Congo', value: 'CG' },\n    { text: 'Congo, The Democratic Republic of the', value: 'CD' },\n    { text: 'Cook Islands', value: 'CK' },\n    { text: 'Costa Rica', value: 'CR' },\n    { text: \"Cote D'Ivoire\", value: 'CI' },\n    { text: 'Croatia', value: 'HR' },\n    { text: 'Cuba', value: 'CU' },\n    { text: 'Cyprus', value: 'CY' },\n    { text: 'Czech Republic', value: 'CZ' },\n    { text: 'Denmark', value: 'DK' },\n    { text: 'Djibouti', value: 'DJ' },\n    { text: 'Dominica', value: 'DM' },\n    { text: 'Dominican Republic', value: 'DO' },\n    { text: 'Ecuador', value: 'EC' },\n    { text: 'Egypt', value: 'EG' },\n    { text: 'El Salvador', value: 'SV' },\n    { text: 'Equatorial Guinea', value: 'GQ' },\n    { text: 'Eritrea', value: 'ER' },\n    { text: 'Estonia', value: 'EE' },\n    { text: 'Ethiopia', value: 'ET' },\n    { text: 'Falkland Islands (Malvinas)', value: 'FK' },\n    { text: 'Faroe Islands', value: 'FO' },\n    { text: 'Fiji', value: 'FJ' },\n    { text: 'France', value: 'FR' },\n    { text: 'French Guiana', value: 'GF' },\n    { text: 'French Polynesia', value: 'PF' },\n    { text: 'French Southern Territories', value: 'TF' },\n    { text: 'Gabon', value: 'GA' },\n    { text: 'Gambia', value: 'GM' },\n    { text: 'Georgia', value: 'GE' },\n    { text: 'Germany', value: 'DE' },\n    { text: 'Ghana', value: 'GH' },\n    { text: 'Gibraltar', value: 'GI' },\n    { text: 'Greece', value: 'GR' },\n    { text: 'Greenland', value: 'GL' },\n    { text: 'Grenada', value: 'GD' },\n    { text: 'Guadeloupe', value: 'GP' },\n    { text: 'Guam', value: 'GU' },\n    { text: 'Guatemala', value: 'GT' },\n    { text: 'Guernsey', value: 'GG' },\n    { text: 'Guinea', value: 'GN' },\n    { text: 'Guinea-Bissau', value: 'GW' },\n    { text: 'Guyana', value: 'GY' },\n    { text: 'Haiti', value: 'HT' },\n    { text: 'Heard Island and Mcdonald Islands', value: 'HM' },\n    { text: 'Holy See (Vatican City State)', value: 'VA' },\n    { text: 'Honduras', value: 'HN' },\n    { text: 'Hong Kong', value: 'HK' },\n    { text: 'Hungary', value: 'HU' },\n    { text: 'Iceland', value: 'IS' },\n    { text: 'India', value: 'IN' },\n    { text: 'Indonesia', value: 'ID' },\n    { text: 'Iran, Islamic Republic Of', value: 'IR' },\n    { text: 'Iraq', value: 'IQ' },\n    { text: 'Ireland', value: 'IE' },\n    { text: 'Isle of Man', value: 'IM' },\n    { text: 'Israel', value: 'IL' },\n    { text: 'Italy', value: 'IT' },\n    { text: 'Jamaica', value: 'JM' },\n    { text: 'Japan', value: 'JP' },\n    { text: 'Jersey', value: 'JE' },\n    { text: 'Jordan', value: 'JO' },\n    { text: 'Kazakhstan', value: 'KZ' },\n    { text: 'Kenya', value: 'KE' },\n    { text: 'Kiribati', value: 'KI' },\n    { text: \"Korea, Democratic People's Republic of\", value: 'KP' },\n    { text: 'Korea, Republic of', value: 'KR' },\n    { text: 'Kuwait', value: 'KW' },\n    { text: 'Kyrgyzstan', value: 'KG' },\n    { text: \"Lao People's Democratic Republic\", value: 'LA' },\n    { text: 'Latvia', value: 'LV' },\n    { text: 'Lebanon', value: 'LB' },\n    { text: 'Lesotho', value: 'LS' },\n    { text: 'Liberia', value: 'LR' },\n    { text: 'Libyan Arab Jamahiriya', value: 'LY' },\n    { text: 'Liechtenstein', value: 'LI' },\n    { text: 'Lithuania', value: 'LT' },\n    { text: 'Luxembourg', value: 'LU' },\n    { text: 'Macao', value: 'MO' },\n    { text: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n    { text: 'Madagascar', value: 'MG' },\n    { text: 'Malawi', value: 'MW' },\n    { text: 'Malaysia', value: 'MY' },\n    { text: 'Maldives', value: 'MV' },\n    { text: 'Mali', value: 'ML' },\n    { text: 'Malta', value: 'MT' },\n    { text: 'Marshall Islands', value: 'MH' },\n    { text: 'Martinique', value: 'MQ' },\n    { text: 'Mauritania', value: 'MR' },\n    { text: 'Mauritius', value: 'MU' },\n    { text: 'Mayotte', value: 'YT' },\n    { text: 'Mexico', value: 'MX' },\n    { text: 'Micronesia, Federated States of', value: 'FM' },\n    { text: 'Moldova, Republic of', value: 'MD' },\n    { text: 'Monaco', value: 'MC' },\n    { text: 'Mongolia', value: 'MN' },\n    { text: 'Montenegro', value: 'ME' },\n    { text: 'Montserrat', value: 'MS' },\n    { text: 'Morocco', value: 'MA' },\n    { text: 'Mozambique', value: 'MZ' },\n    { text: 'Myanmar', value: 'MM' },\n    { text: 'Namibia', value: 'NA' },\n    { text: 'Nauru', value: 'NR' },\n    { text: 'Nepal', value: 'NP' },\n    { text: 'Netherlands', value: 'NL' },\n    { text: 'Netherlands Antilles', value: 'AN' },\n    { text: 'New Caledonia', value: 'NC' },\n    { text: 'New Zealand', value: 'NZ' },\n    { text: 'Nicaragua', value: 'NI' },\n    { text: 'Niger', value: 'NE' },\n    { text: 'Nigeria', value: 'NG' },\n    { text: 'Niue', value: 'NU' },\n    { text: 'Norfolk Island', value: 'NF' },\n    { text: 'Northern Mariana Islands', value: 'MP' },\n    { text: 'Norway', value: 'NO' },\n    { text: 'Oman', value: 'OM' },\n    { text: 'Pakistan', value: 'PK' },\n    { text: 'Palau', value: 'PW' },\n    { text: 'Palestinian Territory, Occupied', value: 'PS' },\n    { text: 'Panama', value: 'PA' },\n    { text: 'Papua New Guinea', value: 'PG' },\n    { text: 'Paraguay', value: 'PY' },\n    { text: 'Peru', value: 'PE' },\n    { text: 'Philippines', value: 'PH' },\n    { text: 'Poland', value: 'PL' },\n    { text: 'Portugal', value: 'PT' },\n    { text: 'Puerto Rico', value: 'PR' },\n    { text: 'Qatar', value: 'QA' },\n    { text: 'Romania', value: 'RO' },\n    { text: 'Russian Federation', value: 'RU' },\n    { text: 'RWANDA', value: 'RW' },\n    { text: 'Saint Helena', value: 'SH' },\n    { text: 'Saint Kitts and Nevis', value: 'KN' },\n    { text: 'Saint Lucia', value: 'LC' },\n    { text: 'Saint Pierre and Miquelon', value: 'PM' },\n    { text: 'Saint Vincent and the Grenadines', value: 'VC' },\n    { text: 'Samoa', value: 'WS' },\n    { text: 'San Marino', value: 'SM' },\n    { text: 'Sao Tome and Principe', value: 'ST' },\n    { text: 'Saudi Arabia', value: 'SA' },\n    { text: 'Senegal', value: 'SN' },\n    { text: 'Serbia', value: 'RS' },\n    { text: 'Seychelles', value: 'SC' },\n    { text: 'Sierra Leone', value: 'SL' },\n    { text: 'Singapore', value: 'SG' },\n    { text: 'Slovakia', value: 'SK' },\n    { text: 'Slovenia', value: 'SI' },\n    { text: 'Solomon Islands', value: 'SB' },\n    { text: 'Somalia', value: 'SO' },\n    { text: 'South Africa', value: 'ZA' },\n    { text: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n    { text: 'Spain', value: 'ES' },\n    { text: 'Sri Lanka', value: 'LK' },\n    { text: 'Sudan', value: 'SD' },\n    { text: 'Suriname', value: 'SR' },\n    { text: 'Svalbard and Jan Mayen', value: 'SJ' },\n    { text: 'Swaziland', value: 'SZ' },\n    { text: 'Sweden', value: 'SE' },\n    { text: 'Switzerland', value: 'CH' },\n    { text: 'Syrian Arab Republic', value: 'SY' },\n    { text: 'Taiwan, Province of China', value: 'TW' },\n    { text: 'Tajikistan', value: 'TJ' },\n    { text: 'Tanzania, United Republic of', value: 'TZ' },\n    { text: 'Thailand', value: 'TH' },\n    { text: 'Timor-Leste', value: 'TL' },\n    { text: 'Togo', value: 'TG' },\n    { text: 'Tokelau', value: 'TK' },\n    { text: 'Tonga', value: 'TO' },\n    { text: 'Trinidad and Tobago', value: 'TT' },\n    { text: 'Tunisia', value: 'TN' },\n    { text: 'Turkey', value: 'TR' },\n    { text: 'Turkmenistan', value: 'TM' },\n    { text: 'Turks and Caicos Islands', value: 'TC' },\n    { text: 'Tuvalu', value: 'TV' },\n    { text: 'Uganda', value: 'UG' },\n    { text: 'Ukraine', value: 'UA' },\n    { text: 'United Arab Emirates', value: 'AE' },\n    { text: 'United States Minor Outlying Islands', value: 'UM' },\n    { text: 'Uruguay', value: 'UY' },\n    { text: 'Uzbekistan', value: 'UZ' },\n    { text: 'Vanuatu', value: 'VU' },\n    { text: 'Venezuela', value: 'VE' },\n    { text: 'Viet Nam', value: 'VN' },\n    { text: 'Virgin Islands, British', value: 'VG' },\n    { text: 'Virgin Islands, U.S.', value: 'VI' },\n    { text: 'Wallis and Futuna', value: 'WF' },\n    { text: 'Western Sahara', value: 'EH' },\n    { text: 'Yemen', value: 'YE' },\n    { text: 'Zambia', value: 'ZM' },\n    { text: 'Zimbabwe', value: 'ZW' }\n  ];\n  const getRecordCountry = (event, { value }) => {\n    event.preventDefault();\n    setRecordCountry(value);\n  };\n\n  const getDiscogs = () => {\n    const query = {\n      artist,\n      album\n    };\n    getCatIdFromDiscogsConnect(query);\n  };\n\n  // let minutes = Math.floor(report.currentTrack[0].length / 60);\n  // let seconds = report.currentTrack[0].length % 60;\n\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      trigger={\n        <Icon\n          style={{ cursor: 'pointer' }}\n          color='blue'\n          onClick={handleOpen}\n          name='edit'\n        />\n      }\n      onClose={handleClose}\n    >\n      <Header content='Muokkaa biisin tietoja' />\n      <Modal.Content>\n        <Form onSubmit={submitTrack}>\n          <Form.Field\n            required\n            control={Input}\n            defaultValue={artist}\n            type='text'\n            placeholder={artist}\n            onChange={e => setArtist(e.target.value)}\n            label='Artisti'\n          />\n          <Form.Field\n            required\n            control={Input}\n            defaultValue={album}\n            type='text'\n            placeholder='Albumi...'\n            onChange={e => setAlbum(e.target.value)}\n            label='Albumi'\n          />\n          <Form.Field\n            required\n            control={Input}\n            defaultValue={track_title}\n            type='text'\n            placeholder='Biisi...'\n            onChange={e => setTrack(e.target.value)}\n            label='Biisi'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Input}\n              maxLength={4}\n              defaultValue={min}\n              type='number'\n              placeholder='Minuuttia...'\n              onChange={e => setMin(e.target.value)}\n              label='Kesto - minuutit'\n            />\n            <Form.Field\n              required\n              control={Input}\n              defaultValue={sec}\n              maxLength={2}\n              type='number'\n              placeholder='Sekuntia...'\n              onChange={e => setSec(e.target.value)}\n              label='Kesto - sekunnit'\n            />\n          </Form.Group>\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Input}\n              maxLength={2}\n              defaultValue={discNo}\n              type='number'\n              placeholder='CD1=1, CD2=2, A1=1, A2=2...'\n              onChange={e => setDiscNo(e.target.value)}\n              label='Levy #'\n            />\n            <Form.Field\n              required\n              control={Input}\n              defaultValue={trackNo}\n              maxLength={2}\n              type='number'\n              placeholder='Biisi #...'\n              onChange={e => setTrackNo(e.target.value)}\n              label='Biisi #'\n            />\n          </Form.Group>\n          <Form.Field\n            control={TextArea}\n            defaultValue={people}\n            onChange={e => setPeople(e.target.value)}\n            placeholder='Tekijät - max 5kpl'\n            label='Tekijät - max 5kpl, yksi per rivi, SUKUNIMI ETUNIMI'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Dropdown}\n              placeholder='Suomi, muu, ei tietoa...'\n              openOnFocus={false}\n              defaultValue={country}\n              selection\n              options={countryOptions}\n              onChange={getCountry}\n              label='Säveltäjän kotimaa'\n            />\n            <Form.Field\n              control={Dropdown}\n              placeholder='Valitse tallennusmaa...'\n              openOnFocus={false}\n              defaultValue={recordCountry}\n              selection\n              search\n              options={recordCountryOptions}\n              onChange={getRecordCountry}\n              label='Tallennusmaa'\n            />\n          </Form.Group>\n          <Form.Field\n            required\n            control={Input}\n            defaultValue={label}\n            type='text'\n            placeholder='Levymerkki...'\n            onChange={e => setLabel(e.target.value)}\n            label='Levymerkki'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={catId}\n            type='text'\n            placeholder='Levykoodi...'\n            onChange={e => setCatId(e.target.value)}\n            label={\n              <React.Fragment>\n                <span style={{ display: 'inline' }}>Levykoodi</span>\n                <Button\n                  onClick={e => getDiscogs(e.preventDefault())}\n                  size='mini'\n                  floated='right'\n                  style={{ marginBottom: '0.3rem' }}\n                >\n                  Hae levykoodi Discogsista\n                </Button>\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            defaultValue={isrc}\n            maxLength={12}\n            type='text'\n            placeholder='ISRC...'\n            onChange={e => setIsrc(e.target.value)}\n            label='ISRC'\n          />\n          <Form.Field\n            required\n            control={Input}\n            defaultValue={year}\n            maxLength={4}\n            type='number'\n            placeholder='Vuosi...'\n            onChange={e => setYear(e.target.value)}\n            label='Vuosi'\n          />\n          <Form.Field\n            control={TextArea}\n            defaultValue={comment}\n            onChange={e => setComment(e.target.value)}\n            placeholder='Lisätietoa...'\n            label='Lisätietoa'\n          />\n          <Button\n            // disabled={\n            //   !artist ||\n            //   !album ||\n            //   !track ||\n            //   !trackNo ||\n            //   !discNo ||\n            //   !min ||\n            //   !sec ||\n            //   !label ||\n            //   !catId ||\n            //   !year\n            // }\n            color='green'\n            type='submit'\n          >\n            Tallenna tiedot\n          </Button>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nEditTrackModal.propTypes = {\n  report_track_id: PropTypes.number,\n  sortable_rank: PropTypes.number,\n  track: PropTypes.shape({\n    artist_name: PropTypes.string,\n    track_title: PropTypes.string,\n    length: PropTypes.number,\n    track_id: PropTypes.number,\n    artist_id: PropTypes.number,\n    album_id: PropTypes.number,\n    album_name: PropTypes.string,\n    disc_no: PropTypes.number,\n    track_no: PropTypes.number,\n    cat_id: PropTypes.string,\n    country: PropTypes.number,\n    isrc: PropTypes.string,\n    label: PropTypes.string,\n    people: PropTypes.string,\n    record_country: PropTypes.string,\n    year: PropTypes.string,\n    comment: PropTypes.string\n  }),\n  search: PropTypes.shape({\n    discogsCatId: PropTypes.string\n  }),\n  report: PropTypes.shape({\n    loading: PropTypes.bool\n  }),\n  login: PropTypes.shape({\n    id: PropTypes.number\n  }),\n  clearDiscogsCatIdConnect: PropTypes.func,\n  getCatIdFromDiscogsConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func,\n  updateTrackConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    login: state.login,\n    search: state.search\n  };\n};\nconst connectedEditTrackModal = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  getOneTrack,\n  removeCurrentTrack,\n  updateTrackConnect: updateTrack,\n  getCatIdFromDiscogsConnect: getCatIdFromDiscogs,\n  clearDiscogsCatIdConnect: clearDiscogsCatId\n})(EditTrackModal);\n\nexport default connectedEditTrackModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Table, Icon, Checkbox } from 'semantic-ui-react';\nimport EditTrackModal from '../track/EditTrackModal';\nimport {\n  deleteTrackFromReport,\n  checkForDelete,\n  unCheckForDelete\n} from '../../actions/reportActions';\n\nconst ReportWithTracksItem = ({\n  report,\n  track,\n  deleteTrackFromReportConnect,\n  checkForDeleteConnect,\n  unCheckForDeleteConnect\n}) => {\n  const [checked, setChecked] = useState(false);\n  const onDelete = () => {\n    const remainingTracks = report.report.filter(\n      t => t.report_track_id !== track.report_track_id\n    );\n    const params = {\n      report_track_id: track.report_track_id,\n      report_id: report.reportDetails.id,\n      remainingTracks\n    };\n    deleteTrackFromReportConnect(params);\n  };\n\n  const checkedClick = () => {\n    setChecked(!checked);\n    if (checked === true) {\n      unCheckForDeleteConnect(track.report_track_id);\n    } else {\n      checkForDeleteConnect(track.report_track_id);\n    }\n  };\n  let minutes = Math.floor(track.length / 60);\n  minutes = minutes.toString();\n  let seconds = track.length - minutes * 60;\n  if (seconds.toString().length === 1) {\n    seconds = `0${seconds.toString()}`;\n  }\n  seconds = seconds.toString();\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <Checkbox onChange={checkedClick} checked={checked} />\n        <Icon\n          style={{ marginLeft: '1.5rem', cursor: 'pointer' }}\n          name='arrows alternate'\n        />\n      </Table.Cell>\n      <Table.Cell>{track.sortable_rank}</Table.Cell>\n      <Table.Cell>{track.artist_name}</Table.Cell>\n      <Table.Cell>{track.track_title}</Table.Cell>\n      <Table.Cell>\n        {minutes}:{seconds}\n      </Table.Cell>\n      <Table.Cell>\n        <Icon\n          style={{ cursor: 'pointer' }}\n          color='red'\n          onClick={onDelete}\n          name='delete'\n        />\n      </Table.Cell>\n      <Table.Cell>\n        <EditTrackModal\n          id={track.track_id}\n          sortable_rank={track.sortable_rank}\n          report_track_id={track.report_track_id}\n          track={track}\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nReportWithTracksItem.propTypes = {\n  deleteTrackFromReportConnect: PropTypes.func,\n  checkForDeleteConnect: PropTypes.func,\n  unCheckForDeleteConnect: PropTypes.func,\n  track: PropTypes.shape({\n    album_id: PropTypes.number,\n    album_name: PropTypes.string,\n    artist_id: PropTypes.number,\n    artist_name: PropTypes.string,\n    cat_id: PropTypes.string,\n    country: PropTypes.number,\n    disc_no: PropTypes.number,\n    isrc: PropTypes.string,\n    label: PropTypes.string,\n    length: PropTypes.number,\n    people: PropTypes.string,\n    record_country: PropTypes.string,\n    report_track_id: PropTypes.number,\n    sortable_rank: PropTypes.number,\n    track_id: PropTypes.number,\n    track_no: PropTypes.number,\n    track_title: PropTypes.string,\n    year: PropTypes.string\n  }),\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        disc_no: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        length: PropTypes.number,\n        record_country: PropTypes.string,\n        report_id: PropTypes.number,\n        report_track_id: PropTypes.number,\n        sortable_rank: PropTypes.number,\n        spotify_id: PropTypes.string,\n        track_no: PropTypes.number,\n        track_title: PropTypes.string,\n        year: PropTypes.string\n      })\n    )\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report\n  };\n};\n\nconst connectedReportWithTracksItem = connect(mapStateToProps, {\n  deleteTrackFromReportConnect: deleteTrackFromReport,\n  checkForDeleteConnect: checkForDelete,\n  unCheckForDeleteConnect: unCheckForDelete\n})(ReportWithTracksItem);\n\nexport default connectedReportWithTracksItem;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Form,\n  Button,\n  Input,\n  TextArea,\n  Dropdown,\n  Popup,\n  Icon\n} from 'semantic-ui-react';\nimport {\n  getCatIdFromDiscogs,\n  clearDiscogsCatId\n} from '../../actions/searchActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport { addNewTrack } from '../../actions/trackActions';\n\nconst style = {\n  borderRadius: 0,\n  display: 'block',\n  opacity: 0.9,\n  padding: '2em'\n};\n\nconst AddTrackModal = ({\n  search,\n  login,\n  report,\n  getCatIdFromDiscogsConnect,\n  addNewTrackConnect,\n  setNotificationConnect\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [artist, setArtist] = useState('');\n  const [album, setAlbum] = useState('');\n  const [track, setTrack] = useState('');\n  const [min, setMin] = useState('');\n  const [sec, setSec] = useState('');\n  const [country, setCountry] = useState('');\n  const [recordCountry, setRecordCountry] = useState('');\n  const [people, setPeople] = useState('');\n  const [discNo, setDiscNo] = useState('');\n  const [trackNo, setTrackNo] = useState('');\n  const [year, setYear] = useState('');\n  const [label, setLabel] = useState('');\n  const [catId, setCatId] = useState('');\n  const [isrc, setIsrc] = useState('');\n  const [comment, setComment] = useState('');\n  useEffect(() => {\n    if (search.discogsCatId === null) {\n      setCatId('');\n    } else {\n      setCatId(search.discogsCatId);\n    }\n  }, [search.discogsCatId]);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const submitTrack = () => {\n    // artist name validation\n    if (artist === null) {\n      setNotificationConnect('Artisti on pakollinen tieto', 'fail');\n    }\n    const length = parseInt(min) * 60 + parseInt(sec);\n    if (people === null) {\n      const trackToAdd = {\n        artist_name: artist,\n        album_name: album,\n        track_title: track,\n        length,\n        country,\n        record_country: recordCountry,\n        people,\n        disc_no: parseInt(discNo),\n        track_no: parseInt(trackNo),\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        report_id: report.reportDetails.id,\n        user_id: login.id,\n        sortable_rank: report.report.length + 1\n      };\n      addNewTrackConnect(trackToAdd);\n      handleClose();\n    } else {\n      const trackToAdd = {\n        artist_name: artist,\n        album_name: album,\n        track_title: track,\n        length,\n        country,\n        record_country: recordCountry,\n        people: `| ${people.replace(/\\n/g, ' | ')} |`,\n        disc_no: parseInt(discNo),\n        track_no: parseInt(trackNo),\n        year,\n        label,\n        cat_id: catId,\n        isrc,\n        comment,\n        report_id: report.reportDetails.id,\n        user_id: login.id,\n        sortable_rank: report.report.length + 1\n      };\n      addNewTrackConnect(trackToAdd);\n      handleClose();\n    }\n  };\n\n  const countryOptions = [\n    {\n      key: 1,\n      text: 'Suomi',\n      value: 1\n    },\n    {\n      key: 2,\n      text: 'Muu',\n      value: 2\n    },\n    {\n      key: 0,\n      text: 'Ei tietoa',\n      value: null\n    }\n  ];\n  const getCountry = (event, { value }) => {\n    event.preventDefault();\n    setCountry(value);\n  };\n  const recordCountryOptions = [\n    { text: 'Finland', value: 'FI' },\n    { text: 'United Kingdom', value: 'GB' },\n    { text: 'United States', value: 'US' },\n    { text: 'Afghanistan', value: 'AF' },\n    { text: 'Åland Islands', value: 'AX' },\n    { text: 'Albania', value: 'AL' },\n    { text: 'Algeria', value: 'DZ' },\n    { text: 'American Samoa', value: 'AS' },\n    { text: 'AndorrA', value: 'AD' },\n    { text: 'Angola', value: 'AO' },\n    { text: 'Anguilla', value: 'AI' },\n    { text: 'Antarctica', value: 'AQ' },\n    { text: 'Antigua and Barbuda', value: 'AG' },\n    { text: 'Argentina', value: 'AR' },\n    { text: 'Armenia', value: 'AM' },\n    { text: 'Aruba', value: 'AW' },\n    { text: 'Australia', value: 'AU' },\n    { text: 'Austria', value: 'AT' },\n    { text: 'Azerbaijan', value: 'AZ' },\n    { text: 'Bahamas', value: 'BS' },\n    { text: 'Bahrain', value: 'BH' },\n    { text: 'Bangladesh', value: 'BD' },\n    { text: 'Barbados', value: 'BB' },\n    { text: 'Belarus', value: 'BY' },\n    { text: 'Belgium', value: 'BE' },\n    { text: 'Belize', value: 'BZ' },\n    { text: 'Benin', value: 'BJ' },\n    { text: 'Bermuda', value: 'BM' },\n    { text: 'Bhutan', value: 'BT' },\n    { text: 'Bolivia', value: 'BO' },\n    { text: 'Bosnia and Herzegovina', value: 'BA' },\n    { text: 'Botswana', value: 'BW' },\n    { text: 'Bouvet Island', value: 'BV' },\n    { text: 'Brazil', value: 'BR' },\n    { text: 'British Indian Ocean Territory', value: 'IO' },\n    { text: 'Brunei Darussalam', value: 'BN' },\n    { text: 'Bulgaria', value: 'BG' },\n    { text: 'Burkina Faso', value: 'BF' },\n    { text: 'Burundi', value: 'BI' },\n    { text: 'Cambodia', value: 'KH' },\n    { text: 'Cameroon', value: 'CM' },\n    { text: 'Canada', value: 'CA' },\n    { text: 'Cape Verde', value: 'CV' },\n    { text: 'Cayman Islands', value: 'KY' },\n    { text: 'Central African Republic', value: 'CF' },\n    { text: 'Chad', value: 'TD' },\n    { text: 'Chile', value: 'CL' },\n    { text: 'China', value: 'CN' },\n    { text: 'Christmas Island', value: 'CX' },\n    { text: 'Cocos (Keeling) Islands', value: 'CC' },\n    { text: 'Colombia', value: 'CO' },\n    { text: 'Comoros', value: 'KM' },\n    { text: 'Congo', value: 'CG' },\n    { text: 'Congo, The Democratic Republic of the', value: 'CD' },\n    { text: 'Cook Islands', value: 'CK' },\n    { text: 'Costa Rica', value: 'CR' },\n    { text: \"Cote D'Ivoire\", value: 'CI' },\n    { text: 'Croatia', value: 'HR' },\n    { text: 'Cuba', value: 'CU' },\n    { text: 'Cyprus', value: 'CY' },\n    { text: 'Czech Republic', value: 'CZ' },\n    { text: 'Denmark', value: 'DK' },\n    { text: 'Djibouti', value: 'DJ' },\n    { text: 'Dominica', value: 'DM' },\n    { text: 'Dominican Republic', value: 'DO' },\n    { text: 'Ecuador', value: 'EC' },\n    { text: 'Egypt', value: 'EG' },\n    { text: 'El Salvador', value: 'SV' },\n    { text: 'Equatorial Guinea', value: 'GQ' },\n    { text: 'Eritrea', value: 'ER' },\n    { text: 'Estonia', value: 'EE' },\n    { text: 'Ethiopia', value: 'ET' },\n    { text: 'Falkland Islands (Malvinas)', value: 'FK' },\n    { text: 'Faroe Islands', value: 'FO' },\n    { text: 'Fiji', value: 'FJ' },\n    { text: 'France', value: 'FR' },\n    { text: 'French Guiana', value: 'GF' },\n    { text: 'French Polynesia', value: 'PF' },\n    { text: 'French Southern Territories', value: 'TF' },\n    { text: 'Gabon', value: 'GA' },\n    { text: 'Gambia', value: 'GM' },\n    { text: 'Georgia', value: 'GE' },\n    { text: 'Germany', value: 'DE' },\n    { text: 'Ghana', value: 'GH' },\n    { text: 'Gibraltar', value: 'GI' },\n    { text: 'Greece', value: 'GR' },\n    { text: 'Greenland', value: 'GL' },\n    { text: 'Grenada', value: 'GD' },\n    { text: 'Guadeloupe', value: 'GP' },\n    { text: 'Guam', value: 'GU' },\n    { text: 'Guatemala', value: 'GT' },\n    { text: 'Guernsey', value: 'GG' },\n    { text: 'Guinea', value: 'GN' },\n    { text: 'Guinea-Bissau', value: 'GW' },\n    { text: 'Guyana', value: 'GY' },\n    { text: 'Haiti', value: 'HT' },\n    { text: 'Heard Island and Mcdonald Islands', value: 'HM' },\n    { text: 'Holy See (Vatican City State)', value: 'VA' },\n    { text: 'Honduras', value: 'HN' },\n    { text: 'Hong Kong', value: 'HK' },\n    { text: 'Hungary', value: 'HU' },\n    { text: 'Iceland', value: 'IS' },\n    { text: 'India', value: 'IN' },\n    { text: 'Indonesia', value: 'ID' },\n    { text: 'Iran, Islamic Republic Of', value: 'IR' },\n    { text: 'Iraq', value: 'IQ' },\n    { text: 'Ireland', value: 'IE' },\n    { text: 'Isle of Man', value: 'IM' },\n    { text: 'Israel', value: 'IL' },\n    { text: 'Italy', value: 'IT' },\n    { text: 'Jamaica', value: 'JM' },\n    { text: 'Japan', value: 'JP' },\n    { text: 'Jersey', value: 'JE' },\n    { text: 'Jordan', value: 'JO' },\n    { text: 'Kazakhstan', value: 'KZ' },\n    { text: 'Kenya', value: 'KE' },\n    { text: 'Kiribati', value: 'KI' },\n    { text: \"Korea, Democratic People's Republic of\", value: 'KP' },\n    { text: 'Korea, Republic of', value: 'KR' },\n    { text: 'Kuwait', value: 'KW' },\n    { text: 'Kyrgyzstan', value: 'KG' },\n    { text: \"Lao People's Democratic Republic\", value: 'LA' },\n    { text: 'Latvia', value: 'LV' },\n    { text: 'Lebanon', value: 'LB' },\n    { text: 'Lesotho', value: 'LS' },\n    { text: 'Liberia', value: 'LR' },\n    { text: 'Libyan Arab Jamahiriya', value: 'LY' },\n    { text: 'Liechtenstein', value: 'LI' },\n    { text: 'Lithuania', value: 'LT' },\n    { text: 'Luxembourg', value: 'LU' },\n    { text: 'Macao', value: 'MO' },\n    { text: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n    { text: 'Madagascar', value: 'MG' },\n    { text: 'Malawi', value: 'MW' },\n    { text: 'Malaysia', value: 'MY' },\n    { text: 'Maldives', value: 'MV' },\n    { text: 'Mali', value: 'ML' },\n    { text: 'Malta', value: 'MT' },\n    { text: 'Marshall Islands', value: 'MH' },\n    { text: 'Martinique', value: 'MQ' },\n    { text: 'Mauritania', value: 'MR' },\n    { text: 'Mauritius', value: 'MU' },\n    { text: 'Mayotte', value: 'YT' },\n    { text: 'Mexico', value: 'MX' },\n    { text: 'Micronesia, Federated States of', value: 'FM' },\n    { text: 'Moldova, Republic of', value: 'MD' },\n    { text: 'Monaco', value: 'MC' },\n    { text: 'Mongolia', value: 'MN' },\n    { text: 'Montenegro', value: 'ME' },\n    { text: 'Montserrat', value: 'MS' },\n    { text: 'Morocco', value: 'MA' },\n    { text: 'Mozambique', value: 'MZ' },\n    { text: 'Myanmar', value: 'MM' },\n    { text: 'Namibia', value: 'NA' },\n    { text: 'Nauru', value: 'NR' },\n    { text: 'Nepal', value: 'NP' },\n    { text: 'Netherlands', value: 'NL' },\n    { text: 'Netherlands Antilles', value: 'AN' },\n    { text: 'New Caledonia', value: 'NC' },\n    { text: 'New Zealand', value: 'NZ' },\n    { text: 'Nicaragua', value: 'NI' },\n    { text: 'Niger', value: 'NE' },\n    { text: 'Nigeria', value: 'NG' },\n    { text: 'Niue', value: 'NU' },\n    { text: 'Norfolk Island', value: 'NF' },\n    { text: 'Northern Mariana Islands', value: 'MP' },\n    { text: 'Norway', value: 'NO' },\n    { text: 'Oman', value: 'OM' },\n    { text: 'Pakistan', value: 'PK' },\n    { text: 'Palau', value: 'PW' },\n    { text: 'Palestinian Territory, Occupied', value: 'PS' },\n    { text: 'Panama', value: 'PA' },\n    { text: 'Papua New Guinea', value: 'PG' },\n    { text: 'Paraguay', value: 'PY' },\n    { text: 'Peru', value: 'PE' },\n    { text: 'Philippines', value: 'PH' },\n    { text: 'Poland', value: 'PL' },\n    { text: 'Portugal', value: 'PT' },\n    { text: 'Puerto Rico', value: 'PR' },\n    { text: 'Qatar', value: 'QA' },\n    { text: 'Romania', value: 'RO' },\n    { text: 'Russian Federation', value: 'RU' },\n    { text: 'RWANDA', value: 'RW' },\n    { text: 'Saint Helena', value: 'SH' },\n    { text: 'Saint Kitts and Nevis', value: 'KN' },\n    { text: 'Saint Lucia', value: 'LC' },\n    { text: 'Saint Pierre and Miquelon', value: 'PM' },\n    { text: 'Saint Vincent and the Grenadines', value: 'VC' },\n    { text: 'Samoa', value: 'WS' },\n    { text: 'San Marino', value: 'SM' },\n    { text: 'Sao Tome and Principe', value: 'ST' },\n    { text: 'Saudi Arabia', value: 'SA' },\n    { text: 'Senegal', value: 'SN' },\n    { text: 'Serbia', value: 'RS' },\n    { text: 'Seychelles', value: 'SC' },\n    { text: 'Sierra Leone', value: 'SL' },\n    { text: 'Singapore', value: 'SG' },\n    { text: 'Slovakia', value: 'SK' },\n    { text: 'Slovenia', value: 'SI' },\n    { text: 'Solomon Islands', value: 'SB' },\n    { text: 'Somalia', value: 'SO' },\n    { text: 'South Africa', value: 'ZA' },\n    { text: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n    { text: 'Spain', value: 'ES' },\n    { text: 'Sri Lanka', value: 'LK' },\n    { text: 'Sudan', value: 'SD' },\n    { text: 'Suriname', value: 'SR' },\n    { text: 'Svalbard and Jan Mayen', value: 'SJ' },\n    { text: 'Swaziland', value: 'SZ' },\n    { text: 'Sweden', value: 'SE' },\n    { text: 'Switzerland', value: 'CH' },\n    { text: 'Syrian Arab Republic', value: 'SY' },\n    { text: 'Taiwan, Province of China', value: 'TW' },\n    { text: 'Tajikistan', value: 'TJ' },\n    { text: 'Tanzania, United Republic of', value: 'TZ' },\n    { text: 'Thailand', value: 'TH' },\n    { text: 'Timor-Leste', value: 'TL' },\n    { text: 'Togo', value: 'TG' },\n    { text: 'Tokelau', value: 'TK' },\n    { text: 'Tonga', value: 'TO' },\n    { text: 'Trinidad and Tobago', value: 'TT' },\n    { text: 'Tunisia', value: 'TN' },\n    { text: 'Turkey', value: 'TR' },\n    { text: 'Turkmenistan', value: 'TM' },\n    { text: 'Turks and Caicos Islands', value: 'TC' },\n    { text: 'Tuvalu', value: 'TV' },\n    { text: 'Uganda', value: 'UG' },\n    { text: 'Ukraine', value: 'UA' },\n    { text: 'United Arab Emirates', value: 'AE' },\n    { text: 'United States Minor Outlying Islands', value: 'UM' },\n    { text: 'Uruguay', value: 'UY' },\n    { text: 'Uzbekistan', value: 'UZ' },\n    { text: 'Vanuatu', value: 'VU' },\n    { text: 'Venezuela', value: 'VE' },\n    { text: 'Viet Nam', value: 'VN' },\n    { text: 'Virgin Islands, British', value: 'VG' },\n    { text: 'Virgin Islands, U.S.', value: 'VI' },\n    { text: 'Wallis and Futuna', value: 'WF' },\n    { text: 'Western Sahara', value: 'EH' },\n    { text: 'Yemen', value: 'YE' },\n    { text: 'Zambia', value: 'ZM' },\n    { text: 'Zimbabwe', value: 'ZW' }\n  ];\n  const getRecordCountry = (event, { value }) => {\n    event.preventDefault();\n    setRecordCountry(value);\n  };\n  const getDiscogs = () => {\n    const query = {\n      artist,\n      album\n    };\n    getCatIdFromDiscogsConnect(query);\n  };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      trigger={\n        <Button color='blue' onClick={handleOpen}>\n          Lisää uusi biisi\n        </Button>\n      }\n      onClose={handleClose}\n    >\n      <Header content='Lisää uusi biisi' />\n      <Modal.Content>\n        <Form onSubmit={submitTrack}>\n          <Form.Field\n            required\n            control={Input}\n            value={artist}\n            type='text'\n            placeholder='Artisti...'\n            onChange={e => setArtist(e.target.value)}\n            label='Artisti'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={album}\n            type='text'\n            placeholder='Albumi...'\n            onChange={e => setAlbum(e.target.value)}\n            label='Albumi'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={track}\n            type='text'\n            placeholder='Biisi...'\n            onChange={e => setTrack(e.target.value)}\n            label='Biisi'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Input}\n              maxLength={4}\n              value={min}\n              type='number'\n              placeholder='Minuuttia...'\n              onChange={e => setMin(e.target.value)}\n              label='Kesto - minuutit'\n            />\n            <Form.Field\n              required\n              control={Input}\n              value={sec}\n              maxLength={2}\n              type='number'\n              placeholder='Sekuntia...'\n              onChange={e => setSec(e.target.value)}\n              label='Kesto - sekunnit'\n            />\n          </Form.Group>\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Input}\n              maxLength={2}\n              value={discNo}\n              type='number'\n              placeholder='CD1=1, CD2=2, A1=1, A2=2...'\n              onChange={e => setDiscNo(e.target.value)}\n              label='Levy #'\n            />\n            <Form.Field\n              required\n              control={Input}\n              value={trackNo}\n              maxLength={2}\n              type='number'\n              placeholder='Biisi #...'\n              onChange={e => setTrackNo(e.target.value)}\n              label='Biisi #'\n            />\n          </Form.Group>\n          <Form.Field\n            control={TextArea}\n            onChange={e => setPeople(e.target.value)}\n            placeholder='Tekijät - max 5kpl'\n            label='Tekijät - max 5kpl, yksi per rivi, SUKUNIMI ETUNIMI'\n          />\n          <Form.Group widths='equal'>\n            <Form.Field\n              required\n              control={Dropdown}\n              placeholder='Suomi, muu, ei tietoa...'\n              openOnFocus={false}\n              value={country}\n              selection\n              options={countryOptions}\n              onChange={getCountry}\n              label='Säveltäjän kotimaa'\n            />\n            <Form.Field\n              control={Dropdown}\n              placeholder='Valitse tallennusmaa...'\n              openOnFocus={false}\n              value={recordCountry}\n              selection\n              search\n              options={recordCountryOptions}\n              onChange={getRecordCountry}\n              label='Tallennusmaa'\n            />\n          </Form.Group>\n          <Form.Field\n            required\n            control={Input}\n            value={label}\n            type='text'\n            placeholder='Levymerkki...'\n            onChange={e => setLabel(e.target.value)}\n            label={\n              <span>\n                Levymerkki{' '}\n                <Popup\n                  trigger={\n                    <Icon\n                      style={{ display: 'inline' }}\n                      name='question circle'\n                    />\n                  }\n                  content='Jos et tiedä levymerkkiä, kirjoita Ei tiedossa'\n                  style={style}\n                  inverted\n                />\n              </span>\n            }\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={catId}\n            type='text'\n            placeholder='Levykoodi...'\n            onChange={e => setCatId(e.target.value)}\n            label={\n              <React.Fragment>\n                <span style={{ display: 'inline' }}>\n                  Levykoodi{' '}\n                  <Popup\n                    trigger={\n                      <Icon\n                        style={{ display: 'inline' }}\n                        name='question circle'\n                      />\n                    }\n                    content='Jos et tiedä levykoodia, kirjoita Ei tiedossa'\n                    style={style}\n                    inverted\n                  />\n                </span>\n                <Button\n                  onClick={e => getDiscogs(e.preventDefault())}\n                  size='mini'\n                  floated='right'\n                  style={{ marginBottom: '0.3rem' }}\n                >\n                  Hae levykoodi Discogsista\n                </Button>\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            value={isrc}\n            maxLength={12}\n            type='text'\n            placeholder='ISRC...'\n            onChange={e => setIsrc(e.target.value)}\n            label='ISRC'\n          />\n          <Form.Field\n            required\n            control={Input}\n            value={year}\n            maxLength={4}\n            type='number'\n            placeholder='Vuosi...'\n            onChange={e => setYear(e.target.value)}\n            label='Vuosi'\n          />\n          <Form.Field\n            control={TextArea}\n            onChange={e => setComment(e.target.value)}\n            placeholder='Lisätietoa...'\n            label='Lisätietoa'\n          />\n          <Button\n            disabled={\n              !artist ||\n              !album ||\n              !track ||\n              !trackNo ||\n              !discNo ||\n              !min ||\n              !sec ||\n              !label ||\n              !catId ||\n              !year\n            }\n            color='green'\n            type='submit'\n          >\n            Tallenna ja lisää raporttiin\n          </Button>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nAddTrackModal.propTypes = {\n  search: PropTypes.shape({\n    discogsCatId: PropTypes.string\n  }),\n  login: PropTypes.shape({\n    id: PropTypes.number\n  }),\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.arrayOf(\n      PropTypes.shape({\n        sortable_rank: PropTypes.number,\n        artist_name: PropTypes.string,\n        track_title: PropTypes.string,\n        length: PropTypes.number,\n        track_id: PropTypes.number,\n        artist_id: PropTypes.number,\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        disc_no: PropTypes.number,\n        track_no: PropTypes.number,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        people: PropTypes.string,\n        record_country: PropTypes.string,\n        year: PropTypes.string,\n        report_track_id: PropTypes.number\n      })\n    )\n  }),\n  setNotificationConnect: PropTypes.func,\n  addNewTrackConnect: PropTypes.func,\n  getCatIdFromDiscogsConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    login: state.login,\n    search: state.search\n  };\n};\nconst connectedAddTrackModal = connect(mapStateToProps, {\n  setNotificationConnect: setNotification,\n  addNewTrackConnect: addNewTrack,\n  getCatIdFromDiscogsConnect: getCatIdFromDiscogs,\n  clearDiscogsCatId\n})(AddTrackModal);\n\nexport default connectedAddTrackModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Search, Button, Grid, Header } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { getAutocompleteResults } from '../../actions/searchActions';\nimport { addTrackToReport } from '../../actions/reportActions';\nimport { setNotification } from '../../reducers/notificationReducer';\nimport AddTrackModal from './AddTrackModal';\nimport { useSearchTracksHook } from '../../hooks/searchTracksHook';\n\nconst SearchTrack = ({\n  report,\n  addTrackToReportConnect,\n  setNotificationConnect\n}) => {\n  const [trackToSave, setTrackToSave] = useState(null);\n  const [redirect, setRedirect] = useState(false);\n  const { setInputText, search } = useSearchTracksHook();\n\n  const handleResultSelect = (e, { result }) => {\n    const newTrackToReport = {\n      track_id: result.value,\n      report_id: report.reportDetails.id,\n      length: result.length,\n      sortable_rank: report.report.length + 1\n    };\n    setTrackToSave(newTrackToReport);\n  };\n\n  const saveClick = () => {\n    if (!trackToSave) {\n      setNotificationConnect('Valitse biisi!', 'fail');\n    } else {\n      addTrackToReportConnect(trackToSave);\n      setTrackToSave(null);\n    }\n  };\n\n  const goToAdvancedSearch = () => {\n    setRedirect(true);\n  };\n\n  let results;\n  if (search.result === undefined) {\n    results = [];\n  } else {\n    results = search.result.map(result => ({\n      key: result.track_id,\n      title: result.track_title,\n      description: `${result.artist}:\n                    ${result.album}`,\n      length: result.length,\n      value: result.track_id\n    }));\n  }\n\n  if (redirect) {\n    return <Redirect to='/search' />;\n  }\n\n  return (\n    <div style={{ marginLeft: '1rem', marginBottom: '1rem' }}>\n      <Grid divided='vertically'>\n        <Grid.Row columns='2'>\n          <Form>\n            <Header>Hae</Header>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Search\n                  loading={search.loading}\n                  onResultSelect={handleResultSelect}\n                  onSearchChange={e => setInputText(e.target.value)}\n                  onSelectionChange={handleResultSelect}\n                  results={results}\n                  style={{ cursor: 'pointer' }}\n                />\n              </Form.Field>\n              <Form.Field>\n                <Button color='green' onClick={saveClick}>\n                  Lisää biisi raporttiin\n                </Button>\n              </Form.Field>\n            </Form.Group>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                {' '}\n                <Button onClick={goToAdvancedSearch} color='blue'>\n                  Tarkennettu haku\n                </Button>\n              </Form.Field>\n              <Form.Field>\n                {' '}\n                <AddTrackModal />\n              </Form.Field>\n            </Form.Group>\n          </Form>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nSearchTrack.propTypes = {\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      id: PropTypes.number\n    }),\n    report: PropTypes.array\n  }),\n  addTrackToReportConnect: PropTypes.func,\n  setNotificationConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report\n  };\n};\nconst connectedSearchTrack = connect(mapStateToProps, {\n  getAutocompleteResults,\n  addTrackToReportConnect: addTrackToReport,\n  setNotificationConnect: setNotification\n})(SearchTrack);\n\nexport default connectedSearchTrack;\n","import { useState } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\nimport searchService from '../services/search';\n\nexport const useSearchTracksHook = () => {\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchTrack = useConstant(() =>\n    AwesomeDebouncePromise(searchService.getTracksForSearch, 400)\n  );\n  const search = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchTrack(inputText);\n      }\n    },\n    // Ensure a new request is made everytime the text changes (even if it's debounced)\n    [inputText]\n  );\n  return {\n    inputText,\n    setInputText,\n    search\n  };\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Button, Dropdown, Grid, Header } from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport fi from 'date-fns/locale/fi';\nimport moment from 'moment';\nimport { parseISO } from 'date-fns';\nimport { getDjonlineTracks } from '../../actions/trackActions';\n\nconst GetDjOnlineTracks = ({ report, getDjonlineTracksConnect }) => {\n  const [date, setDate] = useState(parseISO(report.reportDetails.program_date));\n  const [studioId, setStudioId] = useState('928');\n  const [startTime, setStartTime] = useState(\n    report.reportDetails.program_start_time.slice(0, 2)\n  );\n  const [endTime, setEndTime] = useState(\n    report.reportDetails.program_end_time.slice(0, 2)\n  );\n\n  const getStudioId = (e, { value }) => {\n    e.preventDefault();\n    setStudioId(value);\n  };\n\n  const studioOptions = [\n    {\n      key: '928',\n      text: 'Studio 1',\n      value: '928'\n    },\n    {\n      key: '1047',\n      text: 'Studio 2',\n      value: '1047'\n    }\n  ];\n\n  // list of program start time options\n  const startTimeOptions = [\n    {\n      key: '00:00',\n      text: '00:00',\n      value: '00'\n    },\n    {\n      key: '01:00',\n      text: '01:00',\n      value: '01'\n    },\n    {\n      key: '02:00',\n      text: '02:00',\n      value: '02'\n    },\n    {\n      key: '03:00',\n      text: '03:00',\n      value: '03'\n    },\n    {\n      key: '04:00',\n      text: '04:00',\n      value: '04'\n    },\n    {\n      key: '05:00',\n      text: '05:00',\n      value: '05'\n    },\n    {\n      key: '06:00',\n      text: '06:00',\n      value: '06'\n    },\n    {\n      key: '07:00',\n      text: '07:00',\n      value: '07'\n    },\n    {\n      key: '08:00',\n      text: '08:00',\n      value: '08'\n    },\n    {\n      key: '09:00',\n      text: '09:00',\n      value: '09'\n    },\n    {\n      key: '10:00',\n      text: '10:00',\n      value: '10'\n    },\n    {\n      key: '11:00',\n      text: '11:00',\n      value: '11'\n    },\n    {\n      key: '12:00',\n      text: '12:00',\n      value: '12'\n    },\n    {\n      key: '13:00',\n      text: '13:00',\n      value: '13'\n    },\n    {\n      key: '14:00',\n      text: '14:00',\n      value: '14'\n    },\n    {\n      key: '15:00',\n      text: '15:00',\n      value: '15'\n    },\n    {\n      key: '16:00',\n      text: '16:00',\n      value: '16'\n    },\n    {\n      key: '17:00',\n      text: '17:00',\n      value: '17'\n    },\n    {\n      key: '18:00',\n      text: '18:00',\n      value: '18'\n    },\n    {\n      key: '19:00',\n      text: '19:00',\n      value: '19'\n    },\n    {\n      key: '20:00',\n      text: '20:00',\n      value: '20'\n    },\n    {\n      key: '21:00',\n      text: '21:00',\n      value: '21'\n    },\n    {\n      key: '22:00',\n      text: '22:00',\n      value: '22'\n    },\n    {\n      key: '23:00',\n      text: '23:00',\n      value: '23'\n    }\n  ];\n  const getStartTime = (event, { value }) => {\n    event.preventDefault();\n    setStartTime(value);\n  };\n\n  // list of program end time options\n  const endTimeOptions = [\n    {\n      key: '01:00',\n      text: '01:00',\n      value: '01'\n    },\n    {\n      key: '02:00',\n      text: '02:00',\n      value: '02'\n    },\n    {\n      key: '03:00',\n      text: '03:00',\n      value: '03'\n    },\n    {\n      key: '04:00',\n      text: '04:00',\n      value: '04'\n    },\n    {\n      key: '05:00',\n      text: '05:00',\n      value: '05'\n    },\n    {\n      key: '06:00',\n      text: '06:00',\n      value: '06'\n    },\n    {\n      key: '07:00',\n      text: '07:00',\n      value: '07'\n    },\n    {\n      key: '08:00',\n      text: '08:00',\n      value: '08'\n    },\n    {\n      key: '09:00',\n      text: '09:00',\n      value: '09'\n    },\n    {\n      key: '10:00',\n      text: '10:00',\n      value: '10'\n    },\n    {\n      key: '11:00',\n      text: '11:00',\n      value: '11'\n    },\n    {\n      key: '12:00',\n      text: '12:00',\n      value: '12'\n    },\n    {\n      key: '13:00',\n      text: '13:00',\n      value: '13'\n    },\n    {\n      key: '14:00',\n      text: '14:00',\n      value: '14'\n    },\n    {\n      key: '15:00',\n      text: '15:00',\n      value: '15'\n    },\n    {\n      key: '16:00',\n      text: '16:00',\n      value: '16'\n    },\n    {\n      key: '17:00',\n      text: '17:00',\n      value: '17'\n    },\n    {\n      key: '18:00',\n      text: '18:00',\n      value: '18'\n    },\n    {\n      key: '19:00',\n      text: '19:00',\n      value: '19'\n    },\n    {\n      key: '20:00',\n      text: '20:00',\n      value: '20'\n    },\n    {\n      key: '21:00',\n      text: '21:00',\n      value: '21'\n    },\n    {\n      key: '22:00',\n      text: '22:00',\n      value: '22'\n    },\n    {\n      key: '23:00',\n      text: '23:00',\n      value: '23'\n    },\n    {\n      key: '24:00',\n      text: '24:00',\n      value: '24'\n    }\n  ];\n  const getEndTime = (event, { value }) => {\n    event.preventDefault();\n    setEndTime(value);\n  };\n\n  const GetTracksFromApi = () => {\n    const searchParams = {\n      studioId,\n      date: moment(date).format('YYYY-MM-DD'),\n      startTime,\n      endTime,\n      report_id: report.reportDetails.id,\n      sortable_rank_start: report.report.length\n    };\n    getDjonlineTracksConnect(searchParams);\n  };\n\n  return (\n    <div style={{ marginLeft: '1rem', marginBottom: '1rem' }}>\n      <Grid divided='vertically'>\n        <Grid.Row columns={2}>\n          <Form>\n            <Header>Hae biisit DJOnlinesta</Header>\n            <Form.Group widths='equal'>\n              <Form.Field\n                control={DatePicker}\n                selected={date}\n                dateFormat='dd.MM.yyyy'\n                locale={fi}\n                onChange={date => setDate(date)}\n                label='Valitse päivä'\n              />\n              <Form.Field\n                control={Dropdown}\n                placeholder='Studio 1'\n                openOnFocus\n                selection\n                options={studioOptions}\n                onChange={getStudioId}\n                defaultValue={studioId}\n                label='Valitse studio'\n              />\n            </Form.Group>\n            <Form.Group widths='equal'>\n              <Form.Field\n                control={Dropdown}\n                placeholder='Alkaen HH:MM'\n                openOnFocus\n                selection\n                search\n                options={startTimeOptions}\n                onChange={getStartTime}\n                defaultValue={startTime}\n                label='Alkaen kello'\n              />\n              <Form.Field\n                control={Dropdown}\n                placeholder='Päättyen HH:MM'\n                openOnFocus\n                selection\n                search\n                options={endTimeOptions}\n                onChange={getEndTime}\n                defaultValue={endTime}\n                label='Päättyen kello'\n              />\n            </Form.Group>\n            <Button color='green' onClick={GetTracksFromApi}>\n              Hae\n            </Button>\n          </Form>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nGetDjOnlineTracks.propTypes = {\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        disc_no: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        length: PropTypes.number,\n        record_country: PropTypes.string,\n        report_id: PropTypes.number,\n        report_track_id: PropTypes.number,\n        sortable_rank: PropTypes.number,\n        spotify_id: PropTypes.string,\n        track_no: PropTypes.number,\n        track_title: PropTypes.string,\n        year: PropTypes.string\n      })\n    )\n  }),\n  getDjonlineTracksConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report\n  };\n};\n\nconst connectedGetDjOnlineTracks = connect(mapStateToProps, {\n  getDjonlineTracksConnect: getDjonlineTracks\n})(GetDjOnlineTracks);\n\nexport default connectedGetDjOnlineTracks;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  Header,\n  Form,\n  Button,\n  Dropdown,\n  Segment,\n  Grid,\n  Dimmer,\n  Loader\n} from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport fi from 'date-fns/locale/fi';\nimport moment from 'moment';\nimport SearchTrack from '../track/SearchTrack';\nimport GetDjOnlineTracks from '../track/GetDjOnlineTracks';\nimport Togglable from '../layout/Togglable';\nimport { updateReport, copyReport } from '../../actions/reportActions';\nimport { setNotification } from '../../reducers/notificationReducer';\n\nconst ReportDetails = ({\n  report,\n  users,\n  programs,\n  login,\n  updateReportConnect,\n  copyReportConnect,\n  setNotificationConnect\n}) => {\n  const [programId, setProgramId] = useState('');\n  const [programNumber, setProgramNumber] = useState('');\n  const [dj, setDj] = useState('');\n  const [programDate, setProgramDate] = useState('');\n  console.log('report details program date', programDate);\n  const [programStartTime, setProgramStartTime] = useState('');\n  const [programEndTime, setProgramEndTime] = useState('');\n  const [status, setStatus] = useState('');\n  const [userId, setUserId] = useState('');\n  const [rerun, setRerun] = useState(null);\n\n  useEffect(() => {\n    if (report.reportDetails !== null) {\n      setUserId(report.reportDetails.user_id);\n      setProgramId(report.reportDetails.program_id);\n      setDj(report.reportDetails.program_dj);\n      setProgramNumber(report.reportDetails.program_no);\n      setProgramDate(new Date(report.reportDetails.program_date));\n      setProgramStartTime(report.reportDetails.program_start_time);\n      setProgramEndTime(report.reportDetails.program_end_time);\n      setStatus(report.reportDetails.status);\n      setRerun(report.reportDetails.rerun);\n    }\n  }, [report.reportDetails]);\n\n  if (report.reportDetails === null || users.users === null) {\n    return (\n      <Segment>\n        <Dimmer active inverted>\n          <Loader inverted content='Ladataan...' />\n        </Dimmer>\n      </Segment>\n    );\n  }\n\n  const programOptions = programs.activePrograms.map(program => ({\n    key: program.id,\n    text: program.name,\n    value: program.id\n  }));\n  const userOptions = users.users.map(user => ({\n    key: user.id,\n    text: `${user.first_name} ${user.last_name}`,\n    value: user.id\n  }));\n  const getProgram = (event, { value }) => {\n    event.preventDefault();\n    setProgramId(value);\n  };\n  const getUser = (event, { value }) => {\n    event.preventDefault();\n    setUserId(value);\n  };\n  // list of program start time options\n  const startTimeOptions = [\n    {\n      key: 0,\n      text: '00:00',\n      value: '00:00:00'\n    },\n    {\n      key: 1,\n      text: '01:00',\n      value: '01:00:00'\n    },\n    {\n      key: 2,\n      text: '02:00',\n      value: '02:00:00'\n    },\n    {\n      key: 3,\n      text: '03:00',\n      value: '03:00:00'\n    },\n    {\n      key: 4,\n      text: '04:00',\n      value: '04:00:00'\n    },\n    {\n      key: 5,\n      text: '05:00',\n      value: '05:00:00'\n    },\n    {\n      key: 6,\n      text: '06:00',\n      value: '06:00:00'\n    },\n    {\n      key: 7,\n      text: '07:00',\n      value: '07:00:00'\n    },\n    {\n      key: 8,\n      text: '08:00',\n      value: '08:00:00'\n    },\n    {\n      key: 9,\n      text: '09:00',\n      value: '09:00:00'\n    },\n    {\n      key: 10,\n      text: '10:00',\n      value: '10:00:00'\n    },\n    {\n      key: 11,\n      text: '11:00',\n      value: '11:00:00'\n    },\n    {\n      key: 12,\n      text: '12:00',\n      value: '12:00:00'\n    },\n    {\n      key: 13,\n      text: '13:00',\n      value: '13:00:00'\n    },\n    {\n      key: 14,\n      text: '14:00',\n      value: '14:00:00'\n    },\n    {\n      key: 15,\n      text: '15:00',\n      value: '15:00:00'\n    },\n    {\n      key: 16,\n      text: '16:00',\n      value: '16:00:00'\n    },\n    {\n      key: 17,\n      text: '17:00',\n      value: '17:00:00'\n    },\n    {\n      key: 18,\n      text: '18:00',\n      value: '18:00:00'\n    },\n    {\n      key: 19,\n      text: '19:00',\n      value: '19:00:00'\n    },\n    {\n      key: 20,\n      text: '20:00',\n      value: '20:00:00'\n    },\n    {\n      key: 21,\n      text: '21:00',\n      value: '21:00:00'\n    },\n    {\n      key: 22,\n      text: '22:00',\n      value: '22:00:00'\n    },\n    {\n      key: 23,\n      text: '23:00',\n      value: '23:00:00'\n    }\n  ];\n  const getStartTime = (event, { value }) => {\n    event.preventDefault();\n    setProgramStartTime(value);\n  };\n\n  // list of program end time options\n  const endTimeOptions = [\n    {\n      key: 0,\n      text: '01:00',\n      value: '01:00:00'\n    },\n    {\n      key: 1,\n      text: '02:00',\n      value: '02:00:00'\n    },\n    {\n      key: 2,\n      text: '03:00',\n      value: '03:00:00'\n    },\n    {\n      key: 3,\n      text: '04:00',\n      value: '04:00:00'\n    },\n    {\n      key: 4,\n      text: '05:00',\n      value: '05:00:00'\n    },\n    {\n      key: 5,\n      text: '06:00',\n      value: '06:00:00'\n    },\n    {\n      key: 6,\n      text: '07:00',\n      value: '07:00:00'\n    },\n    {\n      key: 7,\n      text: '08:00',\n      value: '08:00:00'\n    },\n    {\n      key: 8,\n      text: '09:00',\n      value: '09:00:00'\n    },\n    {\n      key: 9,\n      text: '10:00',\n      value: '10:00:00'\n    },\n    {\n      key: 10,\n      text: '11:00',\n      value: '11:00:00'\n    },\n    {\n      key: 11,\n      text: '12:00',\n      value: '12:00:00'\n    },\n    {\n      key: 12,\n      text: '13:00',\n      value: '13:00:00'\n    },\n    {\n      key: 13,\n      text: '14:00',\n      value: '14:00:00'\n    },\n    {\n      key: 14,\n      text: '15:00',\n      value: '15:00:00'\n    },\n    {\n      key: 15,\n      text: '16:00',\n      value: '16:00:00'\n    },\n    {\n      key: 16,\n      text: '17:00',\n      value: '17:00:00'\n    },\n    {\n      key: 17,\n      text: '18:00',\n      value: '18:00:00'\n    },\n    {\n      key: 18,\n      text: '19:00',\n      value: '19:00:00'\n    },\n    {\n      key: 19,\n      text: '20:00',\n      value: '20:00:00'\n    },\n    {\n      key: 20,\n      text: '21:00',\n      value: '21:00:00'\n    },\n    {\n      key: 21,\n      text: '22:00',\n      value: '22:00:00'\n    },\n    {\n      key: 22,\n      text: '23:00',\n      value: '23:00:00'\n    },\n    {\n      key: 23,\n      text: '23:59',\n      value: '23:59:59'\n    }\n  ];\n  const getEndTime = (event, { value }) => {\n    event.preventDefault();\n    setProgramEndTime(value);\n  };\n\n  // list of program status options\n  const statusOptions = [\n    {\n      key: 0,\n      text: 'Keskeneräinen',\n      value: 0\n    },\n    {\n      key: 1,\n      text: 'Valmis',\n      value: 1\n    },\n    {\n      key: 9,\n      text: 'Poistettu',\n      value: 9\n    }\n  ];\n  const getStatus = (event, { value }) => {\n    event.preventDefault();\n    setStatus(value);\n  };\n\n  const getRerun = () => {\n    if (rerun === null) {\n      setRerun(1);\n    } else {\n      setRerun(null);\n    }\n  };\n\n  // save changes to db\n  const saveChanges = e => {\n    console.log('program date', programDate);\n    e.preventDefault();\n    const updatedReportDetails = {\n      id: report.reportDetails.id,\n      user_id: userId,\n      program_id: programId,\n      program_date: moment(programDate).format('YYYY-MM-DD'),\n      program_start_time: programStartTime,\n      program_end_time: programEndTime,\n      program_no: programNumber,\n      program_dj: dj,\n      program_name: report.reportDetails.program_name,\n      status,\n      rerun\n    };\n    if (\n      parseInt(updatedReportDetails.program_start_time) >=\n      parseInt(updatedReportDetails.program_end_time)\n    ) {\n      setNotificationConnect('Tarkasta aloitus- ja lopetusaika!', 'fail');\n    } else {\n      console.log('saving changes...', updatedReportDetails);\n      setNotificationConnect('Muutokset tallennettu!', 'success');\n      updateReportConnect(updatedReportDetails);\n    }\n  };\n\n  // copy report for rerun\n  const handleCopyReportClick = e => {\n    e.preventDefault();\n    console.log('klikd copy');\n    const reportDetailsToCopy = {\n      user_id: userId,\n      program_id: programId,\n      program_date: moment(programDate).format('YYYY-MM-DD'),\n      program_start_time: programStartTime,\n      program_end_time: programEndTime,\n      program_no: programNumber,\n      program_name: report.reportDetails.program_name,\n      program_dj: dj,\n      status,\n      rerun\n    };\n    const reportTracksToCopy = report.report;\n    copyReportConnect(reportDetailsToCopy, reportTracksToCopy);\n    setNotificationConnect(\n      `Raportti monistettu ajankohtaan ${moment(programDate).format(\n        'YYYY-MM-DD'\n      )}`,\n      'success'\n    );\n  };\n\n  const rerunCheckBox = () => {\n    if (login.level === 1) {\n      return null;\n    }\n    return (\n      <Form.Field\n        label='Uusinta'\n        control={Form.Checkbox}\n        name='rerun'\n        onChange={getRerun}\n        checked={!!rerun}\n      />\n    );\n  };\n\n  const duplicateBtn = () => {\n    if (login.level === 1) {\n      return null;\n    }\n    return <Button onClick={handleCopyReportClick}>Monista</Button>;\n  };\n\n  return (\n    <div>\n      <Header>Lisää biisi raporttiin:</Header>\n      <Segment.Group horizontal>\n        <Segment>\n          <Togglable color='blue' buttonLabel='Pikahaku'>\n            <SearchTrack />\n          </Togglable>\n        </Segment>\n        <Segment>\n          <Togglable color='blue' buttonLabel='Hae biisit DJonlinesta'>\n            <GetDjOnlineTracks />\n          </Togglable>\n        </Segment>\n      </Segment.Group>\n\n      <Grid divided='vertically'>\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Header>Raportin tiedot:</Header>\n            <Form>\n              <Form.Field\n                label='Ohjelma'\n                control={Dropdown}\n                placeholder='Ohjelma'\n                openOnFocus\n                selection\n                value={programId}\n                search\n                options={programOptions}\n                onChange={getProgram}\n              />\n              <Form.Field\n                label='Ohjelmanumero'\n                control={Form.Input}\n                defaultValue={programNumber}\n                onChange={e => setProgramNumber(e.target.value)}\n              />\n              <Form.Field\n                label='DJ'\n                control={Form.Input}\n                value={dj}\n                onChange={e => setDj(e.target.value)}\n              />\n              <Form.Group widths='equal'>\n                <Form.Field\n                  label='Ohjelman päivä'\n                  control={DatePicker}\n                  selected={programDate}\n                  disabledKeyboardNavigation\n                  dateFormat='dd.MM.yyyy'\n                  onChange={date => setProgramDate(new Date(date))}\n                  locale={fi}\n                />\n                <Form.Field\n                  label='Alkaa kello'\n                  control={Dropdown}\n                  value={programStartTime}\n                  openOnFocus\n                  selection\n                  search\n                  options={startTimeOptions}\n                  onChange={getStartTime}\n                />\n                <Form.Field\n                  label='Päättyy kello'\n                  control={Dropdown}\n                  value={programEndTime}\n                  openOnFocus\n                  selection\n                  search\n                  options={endTimeOptions}\n                  onChange={getEndTime}\n                />\n              </Form.Group>\n              <Form.Field\n                label='Raportin tila'\n                control={Dropdown}\n                openOnFocus\n                selection\n                options={statusOptions}\n                onChange={getStatus}\n                value={status}\n              />\n              <Form.Field\n                label='Käyttäjä'\n                control={Dropdown}\n                placeholder='Käyttäjä'\n                openOnFocus={false}\n                value={userId}\n                selection\n                search\n                options={userOptions}\n                onChange={getUser}\n              />\n              {rerunCheckBox()}\n              <Form.Group widths='equal'>\n                <Button color='green' onClick={saveChanges}>\n                  Tallenna\n                </Button>\n                {duplicateBtn()}\n              </Form.Group>\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nReportDetails.propTypes = {\n  report: PropTypes.shape({\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    report: PropTypes.arrayOf(\n      PropTypes.shape({\n        sortable_rank: PropTypes.number,\n        artist_name: PropTypes.string,\n        track_title: PropTypes.string,\n        length: PropTypes.number,\n        track_id: PropTypes.number,\n        artist_id: PropTypes.number,\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        disc_no: PropTypes.number,\n        track_no: PropTypes.number,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        people: PropTypes.string,\n        record_country: PropTypes.string,\n        year: PropTypes.string,\n        report_track_id: PropTypes.number\n      })\n    )\n  }),\n  users: PropTypes.shape({\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        username: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        email: PropTypes.string,\n        address: PropTypes.string,\n        zip: PropTypes.string,\n        city: PropTypes.string,\n        country: PropTypes.string,\n        phone: PropTypes.string,\n        status: PropTypes.number,\n        level: PropTypes.number,\n        last_seen: PropTypes.string,\n        reset_key: PropTypes.string,\n        old_id: PropTypes.number,\n        created_at: PropTypes.string,\n        updated_at: PropTypes.string\n      })\n    ),\n    current: PropTypes.shape({\n      id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      zip: PropTypes.string,\n      city: PropTypes.string,\n      country: PropTypes.string,\n      phone: PropTypes.string,\n      status: PropTypes.number,\n      level: PropTypes.number,\n      last_seen: PropTypes.string,\n      reset_key: PropTypes.string,\n      old_id: PropTypes.number,\n      created_at: PropTypes.string,\n      updated_at: PropTypes.string\n    }),\n    loading: PropTypes.bool\n  }),\n  programs: PropTypes.shape({\n    activePrograms: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        user_id: PropTypes.number,\n        name: PropTypes.string,\n        identifier: PropTypes.string,\n        display: PropTypes.number,\n        site: PropTypes.number,\n        created_at: PropTypes.string,\n        updated_at: PropTypes.string\n      })\n    )\n  }),\n  login: PropTypes.shape({\n    token: PropTypes.string,\n    username: PropTypes.string,\n    id: PropTypes.number,\n    email: PropTypes.string,\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    level: PropTypes.number,\n    status: PropTypes.number,\n    loading: PropTypes.bool\n  }),\n  setNotificationConnect: PropTypes.func,\n  updateReportConnect: PropTypes.func,\n  copyReportConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    programs: state.programs,\n    notification: state.notification,\n    users: state.users,\n    login: state.login\n  };\n};\n\nconst connectedReportDetails = connect(mapStateToProps, {\n  updateReportConnect: updateReport,\n  copyReportConnect: copyReport,\n  setNotificationConnect: setNotification\n})(ReportDetails);\n\nexport default connectedReportDetails;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ReactDragListView from 'react-drag-listview/lib/index.js';\nimport {\n  Container,\n  Table,\n  Dimmer,\n  Loader,\n  Button,\n  Header\n} from 'semantic-ui-react';\nimport {\n  getOneReport,\n  getReportDetails,\n  deleteChecked,\n  updateSortableRank\n} from '../../actions/reportActions';\nimport ReportWithTracksItem from './ReportWithTracksItem';\nimport ReportDetails from './ReportDetails';\n\nconst ReportWithTracks = ({\n  report,\n  login,\n  id,\n  getOneReportConnect,\n  getReportDetailsConnect,\n  deleteCheckedConnect,\n  updateSortableRankConnect\n}) => {\n  const [dragState, setDragState] = useState(null);\n  // get report tracks by report id\n  useEffect(() => {\n    setTimeout(() => {\n      if (id === undefined) {\n        getOneReportConnect(report.reportDetails.id);\n      } else {\n        getOneReportConnect(parseInt(id));\n      }\n    }, 1000);\n    // eslint-disable-next-line\n  }, [report.djonline]);\n  // get report details by report id\n  useEffect(() => {\n    if (id === undefined) {\n      getReportDetailsConnect(report.reportDetails.id);\n    } else {\n      getReportDetailsConnect(id);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  // fetch tracks after sorting changes\n  useEffect(() => {\n    updateSortableRankConnect(dragState, id);\n    // eslint-disable-next-line\n  }, [dragState]);\n\n  const array = report.report;\n\n  const clickDeleteChecked = () => {\n    const remainingTracks = report.report.filter(function(e) {\n      return this.indexOf(e.report_track_id) < 0;\n    }, report.checkedForDelete);\n    deleteCheckedConnect(report.checkedForDelete, id, remainingTracks);\n  };\n\n  const dragProps = {\n    onDragEnd(fromIndex, toIndex) {\n      const item = array.splice(fromIndex, 1)[0];\n      array.splice(toIndex, 0, item);\n      setDragState(array);\n    },\n    nodeSelector: 'tr',\n    handleSelector: 'i.arrows'\n  };\n\n  if (report.report === null || report.reportDetails === null) {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted content='Ladataan...' />\n      </Dimmer>\n    );\n  }\n  if (report.loading) {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted content='Ladataan...' />\n      </Dimmer>\n    );\n  }\n  if (report.report.length === 0) {\n    return (\n      <Container>\n        <Header>Ei lisättyjä kappaleita. Lisää biisit alta</Header>\n        <ReportDetails report={report.reportDetails} />\n      </Container>\n    );\n  }\n  if (login.level === 1 && login.id !== report.reportDetails.user_id) {\n    return null;\n  }\n  return (\n    <Container>\n      <h3>Raportti</h3>\n      <ReactDragListView {...dragProps}>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell></Table.Cell>\n              <Table.Cell>#</Table.Cell>\n              <Table.Cell>Artisti</Table.Cell>\n              <Table.Cell>Biisi</Table.Cell>\n              <Table.Cell>Kesto</Table.Cell>\n              <Table.Cell></Table.Cell>\n              <Table.Cell></Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {report.report.map(track => (\n              <ReportWithTracksItem key={track.report_track_id} track={track} />\n            ))}\n          </Table.Body>\n          <Table.Footer>\n            <Table.Row></Table.Row>\n          </Table.Footer>\n        </Table>\n      </ReactDragListView>\n\n      <Button\n        color='red'\n        onClick={clickDeleteChecked}\n        style={{\n          marginLeft: '1rem',\n          marginBottom: '1rem',\n          marginTop: '1rem'\n        }}\n      >\n        Poista valitut\n      </Button>\n      <ReportDetails report={report.reportDetails} />\n    </Container>\n  );\n};\n\nReportWithTracks.propTypes = {\n  id: PropTypes.string.isRequired,\n  deleteCheckedConnect: PropTypes.func,\n  getOneReportConnect: PropTypes.func,\n  getReportDetailsConnect: PropTypes.func,\n  updateSortableRankConnect: PropTypes.func,\n  login: PropTypes.shape({\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    level: PropTypes.number,\n    loading: PropTypes.bool,\n    status: PropTypes.number,\n    token: PropTypes.string,\n    username: PropTypes.string\n  }),\n  report: PropTypes.shape({\n    checkedForDelete: PropTypes.array,\n    reportDetails: PropTypes.shape({\n      program_name: PropTypes.string,\n      program_no: PropTypes.number,\n      program_dj: PropTypes.string,\n      program_date: PropTypes.string,\n      program_start_time: PropTypes.string,\n      program_end_time: PropTypes.string,\n      id: PropTypes.number,\n      program_id: PropTypes.number,\n      rerun: PropTypes.number,\n      status: PropTypes.number,\n      user_id: PropTypes.number,\n      username: PropTypes.string,\n      first_name: PropTypes.string,\n      last_name: PropTypes.string\n    }),\n    djonline: PropTypes.arrayOf(\n      PropTypes.shape({\n        album_id: PropTypes.number,\n        album_name: PropTypes.string,\n        artist_id: PropTypes.number,\n        artist_name: PropTypes.string,\n        cat_id: PropTypes.string,\n        country: PropTypes.number,\n        disc_no: PropTypes.string,\n        isrc: PropTypes.string,\n        label: PropTypes.string,\n        length: PropTypes.number,\n        record_country: PropTypes.string,\n        report_id: PropTypes.number,\n        report_track_id: PropTypes.number,\n        sortable_rank: PropTypes.number,\n        spotify_id: PropTypes.string,\n        track_no: PropTypes.string,\n        track_title: PropTypes.string,\n        user_id: PropTypes.number,\n        year: PropTypes.string\n      })\n    ),\n    // report: PropTypes.arrayOf(\n    //   PropTypes.shape({\n    //     album_id: PropTypes.number,\n    //     album_name: PropTypes.string,\n    //     artist_id: PropTypes.number,\n    //     artist_name: PropTypes.string,\n    //     cat_id: PropTypes.string,\n    //     country: PropTypes.number,\n    //     disc_no: PropTypes.number,\n    //     isrc: PropTypes.string,\n    //     label: PropTypes.string,\n    //     length: PropTypes.number,\n    //     record_country: PropTypes.string,\n    //     report_id: PropTypes.number,\n    //     report_track_id: PropTypes.number,\n    //     sortable_rank: PropTypes.number,\n    //     spotify_id: PropTypes.string,\n    //     track_no: PropTypes.number,\n    //     track_title: PropTypes.string,\n    //     year: PropTypes.string\n    //   })\n    // ),\n    report: PropTypes.array,\n    loading: PropTypes.bool\n  })\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    login: state.login\n  };\n};\n\nconst connectedReportWithTracks = connect(mapStateToProps, {\n  getOneReportConnect: getOneReport,\n  getReportDetailsConnect: getReportDetails,\n  deleteCheckedConnect: deleteChecked,\n  updateSortableRankConnect: updateSortableRank\n})(ReportWithTracks);\n\nexport default connectedReportWithTracks;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Navbar from './components/layout/Navbar';\nimport Footer from './components/layout/Footer';\nimport Home from './components/layout/Home';\nimport UserList from './components/user/UserList';\nimport ReportList from './components/report/ReportList';\nimport ProgramList from './components/program/ProgramList';\nimport ArtistDetails from './components/artist/ArtistDetails';\nimport AlbumDetails from './components/album/AlbumDetails';\nimport TrackDetails from './components/track/TrackDetails';\nimport LoginForm from './components/login/LoginForm';\nimport ReportTransferList from './components/report/ReportTransferList';\nimport Search from './components/search/Search';\nimport Top100List from './components/top100/Top100List';\nimport ReportWithTracks from './components/report/ReportWithTracks';\nimport Notification from './components/layout/Notification';\nimport { initializeUser } from './actions/loginActions';\nimport { initializeUsers } from './actions/userActions';\nimport { initializePrograms } from './actions/programActions';\n\nconst App = ({\n  login,\n  initializeProgramsConnect,\n  initializeUserConnect,\n  initializeUsersConnect\n}) => {\n  // initial logged in user, programs list, users list\n  useEffect(() => {\n    initializeUserConnect();\n    initializeProgramsConnect();\n    initializeUsersConnect();\n    // eslint-disable-next-line\n  }, [login.token]);\n\n  if (login.user === null) {\n    return (\n      <Container>\n        <LoginForm />\n      </Container>\n    );\n  }\n  if (login.status === null) {\n    return (\n      <Container>\n        <div>Tunnukset hyllyllä. Ota yhteys ylläpitoon.</div>\n        <LoginForm />\n      </Container>\n    );\n  }\n\n  return (\n    <Router>\n      <div>\n        <Navbar first_name={login.first_name} last_name={login.last_name} />\n      </div>\n      <div>\n        <Notification />\n      </div>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/reports' component={ReportList} />\n        <Route exact path='/transfer' component={ReportTransferList} />\n        <Route\n          path='/reports/:id'\n          render={({ match }) => {\n            return <ReportWithTracks id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/artist/:id'\n          render={({ match }) => {\n            return <ArtistDetails id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/album/:id'\n          render={({ match }) => {\n            return <AlbumDetails id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/track/:id'\n          render={({ match }) => {\n            return <TrackDetails id={match.params.id} />;\n          }}\n        />\n        <Route exact path='/programs' component={ProgramList} />\n        <Route exact path='/search' component={Search} />\n        <Route exact path='/top100' component={Top100List} />\n        <Route exact path='/users' component={UserList} />\n      </Switch>\n      <div>\n        <Footer />\n      </div>\n    </Router>\n  );\n};\n\nApp.propTypes = {\n  login: PropTypes.objectOf(PropTypes.any),\n  initializeUserConnect: PropTypes.func,\n  initializeUsersConnect: PropTypes.func,\n  initializeProgramsConnect: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    report: state.report,\n    reportsList: state.reportsList,\n    login: state.login,\n    users: state.users,\n    programs: state.programs\n  };\n};\n\nconst mapDispatchToProps = {\n  initializeUserConnect: initializeUser,\n  initializeProgramsConnect: initializePrograms,\n  initializeUsersConnect: initializeUsers\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  GET_ONE_ARTIST,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  SET_LOADING\n} from '../actions/types';\n\nconst initialState = {\n  currentArtist: null,\n  albumList: null,\n  loading: false\n};\n\nconst artistReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ONE_ARTIST:\n      return {\n        ...state,\n        currentArtist: action.data,\n        loading: false\n      };\n    case GET_ALBUM_LIST_BY_ARTIST:\n      return {\n        ...state,\n        albumList: action.data,\n        loading: false\n      };\n    case CLEAR_CURRENT_ARTIST:\n      return {\n        ...state,\n        currentArtist: null\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default artistReducer;\n","import {\n  GET_ONE_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  SET_LOADING,\n  CHANGE_ARTIST_OF_ALBUM\n} from '../actions/types';\n\nconst initialState = {\n  currentAlbum: null,\n  tracklist: null,\n  loading: false\n};\n\nconst albumReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ONE_ALBUM:\n      return {\n        ...state,\n        currentAlbum: action.data,\n        loading: false\n      };\n    case GET_TRACKLIST_OF_ALBUM:\n      return {\n        ...state,\n        tracklist: action.data,\n        loading: false\n      };\n    case CLEAR_CURRENT_ALBUM:\n      return {\n        ...state,\n        currentAlbum: null,\n        tracklist: null,\n        loading: false\n      };\n    case CHANGE_ARTIST_OF_ALBUM:\n      return {\n        ...state,\n        currentAlbum: [\n          {\n            ...state.currentAlbum[0],\n            artist_id: action.data.artist_id,\n            artist_name: action.data.artist_name\n          }\n        ],\n        loading: false\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default albumReducer;\n","import {\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  SET_LOADING,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST\n} from '../actions/types';\n\nconst initialState = {\n  currentTrack: null,\n  playhistory: null,\n  loading: false\n};\n\nconst trackReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false\n      };\n    case GET_ONE_TRACK_HISTORY:\n      return {\n        ...state,\n        playhistory: action.data,\n        loading: false\n      };\n    case CLEAR_CURRENT_TRACK:\n      return {\n        ...state,\n        playhistory: null,\n        currentTrack: null\n      };\n    case CHANGE_ALBUM:\n      return {\n        ...state,\n        currentTrack: [\n          {\n            ...state.currentTrack[0],\n            album_id: action.data.album_id,\n            album: action.data.album_name\n          }\n        ],\n        loading: false\n      };\n    case CHANGE_ARTIST:\n      return {\n        ...state,\n        currentTrack: [\n          {\n            ...state.currentTrack[0],\n            artist_id: action.data.artist_id,\n            artist: action.data.artist_name\n          }\n        ],\n        loading: false\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default trackReducer;\n","import {\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  LOGIN_ERROR,\n  UPDATE_CURRENT_USER,\n  SET_LOADING\n} from '../actions/types';\n\nconst initialState = {\n  user: null,\n  loading: false,\n  error: null\n};\n\nconst loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_USER:\n      return action.data;\n\n    case LOGOUT:\n      return initialState;\n\n    case LOGIN:\n      return action.data;\n\n    case LOGIN_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    case UPDATE_CURRENT_USER:\n      return {\n        ...state,\n        first_name: action.data.first_name,\n        last_name: action.data.last_name,\n        email: action.data.email\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n","import {\n  GET_ONE_REPORT,\n  GET_REPORT_DETAILS,\n  GET_DJONLINE_TRACKS,\n  ADD_NEW_TRACK,\n  UPDATE_TRACK,\n  SET_EDIT_TRACK_ID,\n  GET_ONE_TRACK,\n  REMOVE_CURRENT_TRACK,\n  DELETE_TRACK_FROM_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CLEAR_CURRENT_REPORT,\n  SET_LOADING,\n  REPORT_ERROR\n} from '../actions/types';\n\nconst initialState = {\n  report: [],\n  djonline: null,\n  editTrackId: null,\n  reportDetails: null,\n  newReport: null,\n  loading: false,\n  checkedForDelete: [],\n  currentTrack: null,\n  error: null\n};\n\nconst reportReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ONE_REPORT:\n      return {\n        ...state,\n        report: action.data,\n        loading: false\n      };\n    case GET_DJONLINE_TRACKS:\n      return {\n        ...state,\n        report: [...state.report, action.data.map(track => track)],\n        djonline: action.data,\n        loading: false\n      };\n    case ADD_NEW_TRACK:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n        loading: false\n      };\n    case UPDATE_TRACK:\n      return {\n        ...state,\n        report: state.report.map(track =>\n          track.track_id === action.data.track_id ? action.data : track\n        ),\n        loading: false\n      };\n    case SET_EDIT_TRACK_ID:\n      return {\n        ...state,\n        editTrackId: action.data\n      };\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false\n      };\n    case REMOVE_CURRENT_TRACK:\n      return {\n        ...state,\n        currentTrack: null\n      };\n    case GET_REPORT_DETAILS:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null\n        // loading: false\n      };\n    case CREATE_REPORT:\n      return {\n        ...state,\n        newReport: action.data,\n        reportDetails: action.data,\n        loading: false\n      };\n\n    case UPDATE_REPORT:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false\n      };\n\n    case DELETE_TRACK_FROM_REPORT:\n      return {\n        ...state,\n        report: state.report.filter(\n          track => track.report_track_id !== action.id\n        )\n      };\n    case CHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [action.data, ...state.checkedForDelete]\n      };\n    case UNCHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: state.checkedForDelete.filter(\n          id => id !== action.data\n        )\n      };\n    case CLEAR_CURRENT_REPORT:\n      return {\n        ...state,\n        report: []\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case REPORT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reportReducer;\n","import {\n  INIT_USERS_LIST,\n  SET_LOADING,\n  SET_CURRENT,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER\n} from '../actions/types';\n\nconst initialState = {\n  users: null,\n  current: null,\n  loading: false\n};\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_USERS_LIST:\n      return {\n        ...state,\n        users: action.data,\n        loading: false\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: false\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n        loading: false\n      };\n    case CREATE_USER:\n      return {\n        ...state,\n        users: [...state.users, action.data],\n        loading: false\n      };\n    case UPDATE_USER:\n      return {\n        ...state,\n        users: action.data,\n        loading: false\n      };\n    case DELETE_USER:\n      return {\n        ...state,\n        users: state.users.filter(user => user.id !== action.data),\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import {\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  DELETE_REPORT,\n  SET_LOADING,\n  REPORT_ERROR\n} from '../actions/types';\n\nconst initialState = {\n  inProgress: null,\n  reportsList: null,\n  reportListDate: null,\n  reportTransferList: null,\n  lastTransfer: null,\n  loading: false,\n  filterStatusValue: null,\n  filterUserValue: null,\n  filterByText: '',\n  error: null\n};\n\nconst reportListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    // date is YYYY-MM\n    case GET_ALL_REPORTS_BY_DATE:\n      return {\n        ...state,\n        reportsList: action.data,\n        reportListDate: action.date,\n        loading: false\n      };\n    case GET_ALL_IN_PROGRESS:\n      return {\n        ...state,\n        inProgress: action.data,\n        loading: false\n      };\n    case GET_ALL_REPORT_TRANSFERS:\n      return {\n        ...state,\n        reportTransferList: action.data,\n        loading: false\n      };\n    case GENERATE_REPORT_TRANSFER:\n      return {\n        ...state,\n        lastTransfer: action.data,\n        loading: false\n      };\n    case DELETE_REPORT:\n      return {\n        ...state,\n        reportsList: state.reportsList.filter(\n          report => report.id !== action.data\n        ),\n        loading: false\n      };\n    case FILTER_BY_USER_ID:\n      return {\n        ...state,\n        filterUserValue: action.data\n      };\n    case FILTER_BY_STATUS:\n      return {\n        ...state,\n        filterStatusValue: action.data\n      };\n    case FILTER_BY_TEXT:\n      return {\n        ...state,\n        filterByText: action.data\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case REPORT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportListReducer;\n","import {\n  GET_ONE_PROGRAM,\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  CREATE_NEW_PROGRAM,\n  CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  UPDATE_PROGRAM\n} from '../actions/types';\n\nconst initialState = {\n  allPrograms: null,\n  activePrograms: null,\n  program: null,\n  loading: false\n};\n\nconst programReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_PROGRAMS:\n      return {\n        ...state,\n        allPrograms: action.data,\n        loading: false\n      };\n    case GET_ALL_ACTIVE_PROGRAMS:\n      return {\n        ...state,\n        activePrograms: action.data,\n        loading: false\n      };\n    case GET_ONE_PROGRAM:\n      return {\n        ...state,\n        program: action.data,\n        loading: false\n      };\n    case CREATE_NEW_PROGRAM:\n      return {\n        ...state,\n        allPrograms: [...state.allPrograms, action.data],\n        loading: false\n      };\n    case CREATE_NEW_PROGRAM_ON_NEW_REPORT:\n      return {\n        ...state,\n        activePrograms: [...state.activePrograms, action.data],\n        loading: false\n      };\n    case UPDATE_PROGRAM:\n      return {\n        ...state,\n        allPrograms: state.allPrograms.map(program =>\n          program.id === action.data.id ? action.data : program\n        ),\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport default programReducer;\n","import {\n  AUTOCOMPLETE_RESULTS,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_DISCOGS_CATID,\n  CLEAR_DISCOGS_CATID,\n  TOP_100,\n  SET_SEARCH_LOADING,\n  GET_CHANGE_ALBUM_OPTIONS,\n  GET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ALBUM_OPTIONS,\n  RESET_CHANGE_ARTIST_OPTIONS,\n  MERGE_ALBUMS,\n  MERGE_ARTISTS,\n  MERGE_TRACKS\n} from '../actions/types';\n\nconst initialState = {\n  searchResults: [],\n  top100: null,\n  top100Query: null,\n  advancedResults: null,\n  sortAdvancedResults: null,\n  changeArtistOptions: null,\n  changeAlbumOptions: null,\n  loading: false,\n  discogsCatId: null,\n  error: null\n};\n\nconst searchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case AUTOCOMPLETE_RESULTS:\n      return {\n        ...state,\n        searchResults: action.data,\n        loading: false\n      };\n    case ADVANCED_RESULTS:\n      return {\n        ...state,\n        advancedResults: action.data,\n        loading: false\n      };\n    case SORT_ADVANCED_RESULTS:\n      return {\n        ...state,\n        sortAdvancedResults: action.data\n      };\n    case SET_SEARCH_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case TOP_100:\n      return {\n        ...state,\n        top100: action.data,\n        top100Query: action.query,\n        loading: false\n      };\n    case GET_DISCOGS_CATID:\n      return {\n        ...state,\n        discogsCatId: action.data\n      };\n    case CLEAR_DISCOGS_CATID:\n      return {\n        ...state,\n        discogsCatId: null\n      };\n    case GET_CHANGE_ALBUM_OPTIONS:\n      return {\n        ...state,\n        changeAlbumOptions: action.data,\n        loading: false\n      };\n    case GET_CHANGE_ARTIST_OPTIONS:\n      return {\n        ...state,\n        changeArtistOptions: action.data,\n        loading: false\n      };\n    case RESET_CHANGE_ALBUM_OPTIONS:\n      return {\n        ...state,\n        changeAlbumOptions: null\n      };\n    case RESET_CHANGE_ARTIST_OPTIONS:\n      return {\n        ...state,\n        changeArtistOptions: null\n      };\n    case MERGE_TRACKS:\n      return {\n        ...state,\n        advancedResults: state.advancedResults.filter(\n          result => result.track_id !== action.data.merge\n        )\n      };\n    case MERGE_ALBUMS: {\n      const albumToMerge = action.data.merge;\n      const mergeAlbumTo = action.data.mergeTo;\n      const newAlbumName = action.data.newName;\n      // get the albums that need name and id changing\n      const filteredAlbums = state.advancedResults.filter(\n        r => r.album_id === albumToMerge\n      );\n      // update the names and ids of those albums\n      const renamedAlbums = filteredAlbums.map(result => ({\n        ...result,\n        album_id: mergeAlbumTo,\n        album_name: newAlbumName\n      }));\n      // remove albums with old ids from advancedResults\n      const removeMergedAlbums = state.advancedResults.filter(\n        r => r.album_id !== albumToMerge\n      );\n      //\n      const newAlbumResults = [...renamedAlbums, ...removeMergedAlbums];\n      return {\n        ...state,\n        advancedResults: newAlbumResults\n      };\n    }\n    case MERGE_ARTISTS: {\n      const artistToMerge = action.data.merge;\n      const mergeArtistTo = action.data.mergeTo;\n      const newArtistName = action.data.newName;\n      // get the artists that need name and id changing\n      const filteredArtists = state.advancedResults.filter(\n        r => r.artist_id === artistToMerge\n      );\n      // update the names and ids of those artists\n      const renamedArtists = filteredArtists.map(result => ({\n        ...result,\n        artist_id: mergeArtistTo,\n        artist_name: newArtistName\n      }));\n      // remove albums with old ids from advancedResults\n      const removeMergedArtists = state.advancedResults.filter(\n        r => r.artist_id !== artistToMerge\n      );\n      //\n      const newArtistResults = [...renamedArtists, ...removeMergedArtists];\n      return {\n        ...state,\n        advancedResults: newArtistResults\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport artistReducer from './reducers/artistReducer';\nimport albumReducer from './reducers/albumReducer';\nimport trackReducer from './reducers/trackReducer';\nimport loginReducer from './reducers/loginReducer';\nimport notificationReducer from './reducers/notificationReducer';\nimport reportReducer from './reducers/reportReducer';\nimport userReducer from './reducers/userReducer';\nimport reportsListReducer from './reducers/reportsListReducer';\nimport programReducer from './reducers/programReducer';\nimport searchReducer from './reducers/searchReducer';\n\nconst appReducer = combineReducers({\n  artist: artistReducer,\n  album: albumReducer,\n  track: trackReducer,\n  login: loginReducer,\n  notification: notificationReducer,\n  report: reportReducer,\n  reportsList: reportsListReducer,\n  programs: programReducer,\n  search: searchReducer,\n  users: userReducer\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === 'LOGOUT') {\n    // eslint-disable-next-line no-param-reassign\n    state = undefined;\n  }\n  return appReducer(state, action);\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}